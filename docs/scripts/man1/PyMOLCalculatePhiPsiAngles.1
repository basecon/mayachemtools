.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PyMOLCalculatePhiPsiAngles 1"
.TH PyMOLCalculatePhiPsiAngles 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PyMOLCalculatePhiPsiAngles.py \- Calculate phi and psi torsion angles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
PyMOLCalculatePhiPsiAngles.py [\fB\-\-chainIDs\fR <First, All or \s-1ID1,ID2...\s0>]
[\fB\-\-outMode\fR <SingleFile or MultipleFies>] [\fB\-\-outChainID\fR <yes or no>]
[\fB\-\-outCategory\fR <yes or no>] [\fB\-\-overwrite\fR] [\fB\-\-precision\fR <number>]
[\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-o\fR <outfile>
.PP
PyMOLCalculatePhiPsiAngles.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Calculate phi and psi torsion angels for amino acid residues present
in macromolecules.
.PP
The phi and psi angles are categorized into the following groups
corresponding to four types of Ramachandran plots:
.PP
.Vb 5
\&    General: All residues except glycine, proline, or pre\-proline
\&    Glycine: Only glycine residues
\&    Proline: Only proline residues
\&    Pre\-Proline: Only residues before proline not including glycine or
\&        proline
.Ve
.PP
The supported input  file format are: \s-1PDB \s0(.pdb), mmCIF (.cif)
.PP
The supported output file formats are:  \s-1CSV \s0(.csv), \s-1TSV \s0(.tsv, .txt)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-c, \-\-chainIDs\fR <First, All or \s-1ID1,ID2...\s0>  [default: All]" 4
.IX Item "-c, --chainIDs <First, All or ID1,ID2...> [default: All]"
List of chain IDs to use for calculating phi and psi angles for residues
in chains. Possible values: First, All, or a comma delimited list of chain
IDs. The default is to use all chain IDs in input file.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name for writing out calculated values. Supported text file
extensions: csv, tsv or txt.
.Sp
In addition to the specified outfile containing phi and psi angles for all
residues, a set of additional output files is generated for 'MultipleFiles'
value of '\-\-outMode' option. The names of these output files are
automatically generated from the the name of the specified output
file as shown below:
.Sp
.Vb 4
\&    General: <OutfileRoot>_General.<OutfileExt>
\&    Glycine: <OutfileRoot>_Glycine.<OutfileExt>
\&    Proline: <OutfileRoot>_Proline.<OutfileExt>
\&    Pre\-Proline: <OutfileRoot>_PreProline.<OutfileExt>
.Ve
.IP "\fB\-\-outMode\fR <SingleFile or MultipleFiles>  [default: SingleFile]" 4
.IX Item "--outMode <SingleFile or MultipleFiles> [default: SingleFile]"
A single output file containing phi and psi angles for all residues or
multiple output files corresponding to different categories of angles.
.Sp
The phi and psi angles are categorized into the following groups
corresponding to four types of Ramachandran plots:
.Sp
.Vb 5
\&    General: All residues except glycine, proline, or pre\-proline
\&    Glycine: Only glycine residues
\&    Proline: Only proline residues
\&    Pre\-Proline: Only residues before proline not including glycine or
\&        proline
.Ve
.Sp
The output files contain the following information:
.Sp
.Vb 1
\&    ChainID ResNum ResName Phi Psi Category
.Ve
.IP "\fB\-\-outChainID\fR <yes or no>  [default: yes]" 4
.IX Item "--outChainID <yes or no> [default: yes]"
Write chain IDs to output file.
.IP "\fB\-\-outCategory\fR <yes or no>  [default: yes]" 4
.IX Item "--outCategory <yes or no> [default: yes]"
Write phi and psi category to output file.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-p, \-\-precision\fR <number>  [default: 2]" 4
.IX Item "-p, --precision <number> [default: 2]"
Floating point precision for writing the calculated phi and psi angles.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To calculate phi and psi angles for all residues across all chains in input
file and write out a single \s-1CSV\s0 file containing calculated values along with
chain IDs, residue names and numbers, and category of angles corresponding
to Ramachandran plots, type:
.PP
.Vb 1
\&    % PyMOLCalculatePhiPsiAngles.py \-i Sample3.pdb \-o Sample3Out.csv
.Ve
.PP
To calculate phi and psi angles for all residues across all chains in input
file and write out a multiple \s-1CSV\s0 files corresponding to categories of angles
for Ramachandran plots along with other relevant information, type:
.PP
.Vb 2
\&    % PyMOLCalculatePhiPsiAngles.py \-\-outMode MultipleFiles \-i Sample3.pdb
\&      \-o Sample3Out.csv
.Ve
.PP
To calculate phi and psi angles for all residues in a specific chain in input
file and write out a single \s-1TSV\s0 file containing calculated values along with
other relevant information, type:
.PP
.Vb 1
\&    % PyMOLCalculatePhiPsiAngles.py \-c E  \-i Sample3.pdb \-o Sample3Out.csv
.Ve
.PP
To calculate phi and psi angles for all residues in a specific chain in input
file and write out a multiple \s-1TSV\s0 files containing calculated values at a specific
precision along with other relevant information, type:
.PP
.Vb 2
\&    % PyMOLCalculatePhiPsiAngles.py \-\-outMode MultipleFiles \-\-chainIDs I
\&      \-i Sample3.pdb \-o Sample3Out.csv
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DownloadPDBFiles.pl, PyMOLCalculateRMSD.py, PyMOLCalculateProperties.py,
PyMOLGenerateRamachandranPlots.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using PyMOL, a
molecular visualization system on an open source foundation originally
developed by Warren DeLano.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
