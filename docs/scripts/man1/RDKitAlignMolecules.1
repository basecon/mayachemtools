.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitAlignMolecules 1"
.TH RDKitAlignMolecules 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitAlignMolecules.py \- Align molecules by RMSD or shape
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitAlignMolecules.py [\fB\-\-alignment\fR <Open3A, CrippenOpen3A, \s-1RMSD,\s0 BestRMSD>]
[\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-maxIters\fR <number>]
[\fB\-\-mode\fR <OneToOne, FirstToAll>] [ \fB\-\-outfileParams\fR <Name,Value,...> ] 
[\fB\-\-overwrite\fR] [\fB\-w\fR <dir>] \fB\-r\fR <reffile> \fB\-p\fR <probefile> \fB\-o\fR <outfile>
.PP
RDKitAlignMolecules.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perform alignment between a set of similar molecules in reference and probe
input files. The molecules are aligned either by Root Mean Square Distance (\s-1RMSD\s0)
between molecules or overlying their shapes (Open3A or CrippenOpen3A).
The RDKit function fails to calculate \s-1RMSD\s0 values for dissimilar molecules. Consequently,
unaligned probe molecules are written to the output file for dissimilar molecule pairs.
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd)
.PP
The supported output file formats are:  \s-1SD \s0(.sdf, .sd)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-alignment\fR <Open3A, CrippenOpen3A, \s-1RMSD,\s0 BestRMSD>  [default: Open3A]" 4
.IX Item "-a, --alignment <Open3A, CrippenOpen3A, RMSD, BestRMSD> [default: Open3A]"
Alignment methodology to use for aligning molecules. Possible values: Open3A,
CrippenOpen3A, \s-1RMSD,\s0 BestRMSD.
.Sp
The Open3A and CrippenOpen3A allow alignment of molecules using their shapes
Open 3DAlign (Open3A) [ Ref 132 ] overlays molecules based on \s-1MMFF\s0 atom types
and charges. Crippen Open 3DAlign (CrippenOpen3A) uses Crippen logP contributions
to overlay molecules.
.Sp
During BestRMSMode mode, the RDKit 'function AllChem.GetBestRMS' is used to
align and calculate \s-1RMSD.\s0 This function calculates optimal \s-1RMSD\s0 for aligning two
molecules, taking symmetry into account. Otherwise, the \s-1RMSD\s0 value is calculated
using 'AllChem.AlignMol function' without changing the atom order. A word to the
wise from RDKit documentation: The AllChem.GetBestRMS function will attempt to
align all permutations of matching atom orders in both molecules, for some molecules
it will lead to 'combinatorial explosion'.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD, MOL: removeHydrogens,yes,sanitize,yes,strictParsing,yes
.Ve
.IP "\fB\-\-maxIters\fR <number>  [default: 50]" 4
.IX Item "--maxIters <number> [default: 50]"
Maximum number of iterations to perform for each molecule pair during minimization
of \s-1RMSD\s0 values. This option is ignored during BestRMSD mode.
.IP "\fB\-m, \-\-mode\fR <OneToOne, FirstToAll>  [default: OneToOne]" 4
.IX Item "-m, --mode <OneToOne, FirstToAll> [default: OneToOne]"
Specify how molecules are handled in reference and probe input files during
alignment of molecules between reference and probe molecules.  Possible values:
OneToOne and  FirstToAll. For OneToOne mode, the alignment is performed
for each pair of molecules in the reference and probe file, and the aligned probe
molecule is written the output file. For FirstToAll mode, the alignment is only
performed between the first reference molecule against all probe molecules.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name for writing out aligned probe molecules values. Supported
file extensions: sdf or sd.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD: kekulize,no
.Ve
.IP "\fB\-p, \-\-probefile\fR <probefile>" 4
.IX Item "-p, --probefile <probefile>"
Probe input file name.
.IP "\fB\-r, \-\-reffile\fR <reffile>" 4
.IX Item "-r, --reffile <reffile>"
Reference input file name.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To perform shape alignment using Open3A methodology between paris of molecules in
reference and probe input 3D \s-1SD\s0 files and write out a \s-1SD\s0 file containing aligned
molecules, type:
.PP
.Vb 2
\&    % RDKitAlignMolecules.py  \-r Sample3DRef.sdf \-p Sample3DProb.sdf
\&      \-o SampleOut.sdf
.Ve
.PP
To perform alignment using \s-1RMSD\s0 methodology between paris of molecules in
reference and probe input 3D \s-1SD\s0 files and write out a \s-1SD\s0 file containing aligned
molecules, type:
.PP
.Vb 2
\&    % RDKitAlignMolecules.py  \-a RMSD \-r Sample3DRef.sdf \-p Sample3DProb.sdf
\&      \-o SampleOut.sdf
.Ve
.PP
To perform alignment using Open3A methodology  between first reference molecule
against all probe molecules in 3D \s-1SD\s0 files without removing hydrogens , and write out
a \s-1SD\s0 file containing aligned molecules, type:
.PP
.Vb 3
\&    % RDKitAlignMolecules.py \-m FirstToAll \-a Open3A
\&      \-\-infileParams "removeHydrogens,no" \-r Sample3DRef.sdf
\&      \-p Sample3DProb.sdf \-o SampleOut.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitCalculateMolecularDescriptors.py, RDKitCompareMoleculeShapes.py, RDKitCalculateRMSD.py,
RDKitConvertFileFormat.py, RDKitGenerateConformers.py, RDKitPerformMinimization.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
