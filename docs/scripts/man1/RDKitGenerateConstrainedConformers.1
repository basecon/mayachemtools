.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitGenerateConstrainedConformers 1"
.TH RDKitGenerateConstrainedConformers 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitGenerateConstrainedConformers.py \- Generate constrained molecular conformations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitGenerateConstrainedConformers.py [\fB\-\-addHydrogens\fR <yes or no>] [\fB\-\-conformerGenerator\fR <\s-1SDG, ETDG, KDG, ETKDG\s0>]
[\fB\-\-forceField\fR <\s-1UFF,\s0 or \s-1MMFF\s0>] [\fB\-\-forceFieldMMFFVariant\fR <\s-1MMFF94\s0 or MMFF94s>]
[\fB\-\-energyOut\fR  <yes or no>] [\fB\-\-enforceChirality\fR <yes or no>]  [\fB\-\-energyRMSDCutoff\fR <number>]
[\fB\-\-energyWindow\fR <number> ] [\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-maxConfs\fR <number>]
[\fB\-\-mcsParams\fR <Name,Value,...>] [\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name.Value,...>]
[ \fB\-\-outfileParams\fR <Name,Value,...> ] [\fB\-\-overwrite\fR] [\fB\-\-quiet\fR <yes or no>] [ \fB\-\-removeHydrogens\fR <yes or no>]
[\fB\-\-scaffold\fR <auto or \s-1SMARTS\s0>]  [\fB\-\-scaffoldRMSDOut\fR  <yes or no>] [\fB\-\-useTethers\fR  <yes or no>] 
[\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-r\fR <reffile> \fB\-o\fR <outfile>
.PP
RDKitGenerateConstrainedConformers.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generate molecular conformations  by performing a constrained energy minimization
against a reference molecule. An initial set of 3D conformers are generated for the input
molecules using distance geometry. A common core scaffold, corresponding to
a Maximum Common Substructure (\s-1MCS\s0) or an explicit \s-1SMARTS\s0 pattern,  is identified
between a pair of input and reference molecules. The core scaffold atoms in input
molecules are aligned against the same atoms in the reference molecule. The energy
of aligned structures are minimized using the forcefield to generate the final 3D structures.
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi,
\&.csv, .tsv .txt)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-addHydrogens\fR <yes or no>  [default: yes]" 4
.IX Item "-a, --addHydrogens <yes or no> [default: yes]"
Add hydrogens before minimization.
.IP "\fB\-c, \-\-conformerGenerator\fR <\s-1SDG, ETDG, KDG, ETKDG\s0>  [default: \s-1ETKDG\s0]" 4
.IX Item "-c, --conformerGenerator <SDG, ETDG, KDG, ETKDG> [default: ETKDG]"
Conformation generation methodology for generating initial 3D coordinates
for molecules in input file. A common core scaffold is identified between a
a pair of input and reference molecules. The atoms in common core scaffold 
of input molecules are aligned against the reference molecule followed by
energy minimization to generate final 3D structure.
.Sp
Possible values: Standard Distance Geometry, (\s-1SDG\s0), Experimental Torsion-angle
preference with Distance Geometry (\s-1ETDG\s0), basic Knowledge-terms with Distance
Geometry (\s-1KDG\s0),  and Experimental Torsion-angle preference along with basic
Knowledge-terms with Distance Geometry (\s-1ETKDG\s0) [Ref 129] .
.IP "\fB\-f, \-\-forceField\fR <\s-1UFF, MMFF\s0>  [default: \s-1MMFF\s0]" 4
.IX Item "-f, --forceField <UFF, MMFF> [default: MMFF]"
Forcefield method to use for  constrained energy minimization. Possible values:
Universal Force Field (\s-1UFF\s0) [ Ref 81 ] or Merck Molecular Mechanics Force
Field [ Ref 83\-87 ] .
.IP "\fB\-\-forceFieldMMFFVariant\fR <\s-1MMFF94\s0 or MMFF94s>  [default: \s-1MMFF94\s0]" 4
.IX Item "--forceFieldMMFFVariant <MMFF94 or MMFF94s> [default: MMFF94]"
Variant of \s-1MMFF\s0 forcefield to use for energy minimization.
.IP "\fB\-\-energyOut\fR <yes or no>  [default: No]" 4
.IX Item "--energyOut <yes or no> [default: No]"
Write out energy values.
.IP "\fB\-\-enforceChirality\fR <yes or no>  [default: Yes]" 4
.IX Item "--enforceChirality <yes or no> [default: Yes]"
Enforce chirality for defined chiral centers.
.IP "\fB\-\-energyRMSDCutoff\fR <number>  [default: 0.5]" 4
.IX Item "--energyRMSDCutoff <number> [default: 0.5]"
\&\s-1RMSD\s0 cutoff for retaining conformations after embedding and energy minimization.
Possible values. A number or None
.Sp
The default is to keep only those conformations which are different from the
lowest energy conformation by the specified \s-1RMSD\s0 cutoff. The None value may
be used to keep all minimized conformations with in the specified energy window
from the lowest energy conformation. The lowest energy conformation is always
retained.
.IP "\fB\-\-energyWindow\fR <number>  [default: 20]" 4
.IX Item "--energyWindow <number> [default: 20]"
Energy window in kcal/mol for selecting conformers.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD, MOL: removeHydrogens,yes,sanitize,yes,strictParsing,yes
\&    
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-\-maxConfs\fR <number>  [default: 50]" 4
.IX Item "--maxConfs <number> [default: 50]"
Maximum number of conformations to generate for each molecule by conformation
generation methodology for initial 3D coordinates. A constrained minimization is
performed using the specified forcefield and the lowest energy conformation is written
to the output file.
.IP "\fB\-\-mcsParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mcsParams <Name,Value,...> [default: auto]"
Parameter values to use for identifying a maximum common substructure
(\s-1MCS\s0) in between a pair of reference and input molecules.In general, it is a
comma delimited list of parameter name and value pairs. The supported
parameter names along with their default values are shown below:
.Sp
.Vb 4
\&    atomCompare,CompareElements,bondCompare,CompareOrder,
\&    maximizeBonds,yes,matchValences,yes,matchChiralTag,no,
\&    minNumAtoms,1,minNumBonds,0,ringMatchesRingOnly,yes,
\&    completeRingsOnly,yes,threshold,1.0,timeOut,3600,seedSMARTS,none
.Ve
.Sp
Possible values for atomCompare: CompareAny, CompareElements,
CompareIsotopes. Possible values for bondCompare: CompareAny,
CompareOrder, CompareOrderExact.
.Sp
A brief description of \s-1MCS\s0 parameters taken from RDKit documentation is
as follows:
.Sp
.Vb 12
\&    atomCompare \- Controls match between two atoms
\&    bondCompare \- Controls match between two bonds
\&    maximizeBonds \- Maximize number of bonds instead of atoms
\&    matchValences \- Include atom valences in the MCS match
\&    matchChiralTag \- Include atom chirality in the MCS match
\&    minNumAtoms \- Minimum number of atoms in the MCS match
\&    minNumBonds \- Minimum number of bonds in the MCS match
\&    ringMatchesRingOnly \- Ring bonds only match other ring bonds
\&    completeRingsOnly \- Partial rings not allowed during the match
\&    threshold \- Fraction of the dataset that must contain the MCS
\&    seedSMARTS \- SMARTS string as the seed of the MCS
\&    timeout \- Timeout for the MCS calculation in seconds
.Ve
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for to
configure multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD: kekulize,no
.Ve
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-q, \-\-quiet\fR <yes or no>  [default: no]" 4
.IX Item "-q, --quiet <yes or no> [default: no]"
Use quiet mode. The warning and information messages will not be printed.
.IP "\fB\-r, \-\-reffile\fR <reffile>" 4
.IX Item "-r, --reffile <reffile>"
Reference input file name containing a 3D reference molecule. A common
core scaffold must be present in a pair of an input and reference molecules.
Otherwise, no constrained minimization is performed on the input molecule.
.IP "\fB\-\-removeHydrogens\fR <yes or no>  [default: Yes]" 4
.IX Item "--removeHydrogens <yes or no> [default: Yes]"
Remove hydrogens after minimization.
.IP "\fB\-s, \-\-scaffold\fR <auto or \s-1SMARTS\s0>  [default: auto]" 4
.IX Item "-s, --scaffold <auto or SMARTS> [default: auto]"
Common core scaffold between a pair of input and reference molecules used for
constrained minimization of molecules in input file. Possible values: Auto or a
valid \s-1SMARTS\s0 pattern. The common core scaffold is automatically detected
corresponding to the Maximum Common Substructure (\s-1MCS\s0) between a pair of
reference and input molecules. A valid \s-1SMARTS\s0 pattern may be optionally specified
for the common core scaffold.
.IP "\fB\-\-scaffoldRMSDOut\fR <yes or no>  [default: No]" 4
.IX Item "--scaffoldRMSDOut <yes or no> [default: No]"
Write out \s-1RMSD\s0 value for common core alignment between a pair of input and
reference molecules.
.IP "\fB\-u, \-\-useTethers\fR <yes or no>  [default: yes]" 4
.IX Item "-u, --useTethers <yes or no> [default: yes]"
Use tethers to optimize the final conformation by applying a series of extra forces
to align matching atoms to the positions of the core atoms. Otherwise, use simple
distance constraints during the optimization.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To generate conformers by performing constrained energy minimization for molecules
in a \s-1SMILES\s0 file against a reference 3D molecule in a \s-1SD\s0 file using a common core
scaffold between pairs of input and reference molecules identified using \s-1MCS,\s0
generating up to 50 conformations using \s-1ETKDG\s0 methodology followed by \s-1MMFF\s0
forcefield minimization within energy window of 20 kcal/mol and \s-1RMSD\s0 of greater
than 0.5 from the lowest energy conformation, and write out a \s-1SD\s0 file:
.PP
.Vb 2
\&    % RDKitGenerateConstrainedConformers.py  \-i SampleSeriesD3R.smi
\&      \-r SampleSeriesRef3D.sdf  \-o SampleOut.sdf
.Ve
.PP
To rerun the first example in a quiet mode and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitGenerateConstrainedConformers.py  \-q yes \-i SampleSeriesD3R.smi
\&      \-r SampleSeriesRef3D.sdf  \-o SampleOut.sdf
.Ve
.PP
To rerun the first example in multiprocessing mode on all available CPUs
without loading all data into memory and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitGenerateConstrainedConformers.py  \-\-mp yes \-i SampleSeriesD3R.smi
\&      \-r SampleSeriesRef3D.sdf  \-o SampleOut.sdf
.Ve
.PP
To run the first example in multiprocessing mode on all available CPUs
by loading all data into memory and write out a \s-1SD\s0 file, type:
.PP
.Vb 3
\&    % RDKitGenerateConstrainedConformers.py  \-\-mp yes \-\-mpParams
\&      "inputDataMode,InMemory" \-i SampleSeriesD3R.smi
\&      \-r SampleSeriesRef3D.sdf  \-o SampleOut.sdf
.Ve
.PP
To rerun the first example in multiprocessing mode on specific number of
CPUs and chunk size without loading all data into memory and write out a \s-1SD\s0 file,
type:
.PP
.Vb 3
\&    % RDKitGenerateConstrainedConformers.py  \-\-mp yes \-\-mpParams
\&      "inputDataMode,Lazy,numProcesses,4,chunkSize,8"
\&      \-i SampleSeriesD3R.smi \-r SampleSeriesRef3D.sdf  \-o SampleOut.sdf
.Ve
.PP
To rerun the first example using an explicit \s-1SMARTS\s0 string for a common core
scaffold and write out a \s-1SD\s0 file, type:
.PP
.Vb 3
\&    % RDKitGenerateConstrainedConformers.py  \-\-scaffold
\&      "c2cc(\-c3nc(N)ncc3)cn2" \-i SampleSeriesD3R.smi
\&      \-r SampleSeriesRef3D.sdf  \-o SampleOut.sdf
.Ve
.PP
To rerun the first example using molecules in a \s-1CSV SMILES\s0 file, \s-1SMILES\s0
strings in column 1, name in column2, and write out a \s-1SD\s0 file, type:
.PP
.Vb 4
\&    % RDKitGenerateConstrainedConformers.py  \-\-infileParams
\&      "smilesDelimiter,comma,smilesTitleLine,yes,smilesColumn,1,
\&      smilesNameColumn,2" \-i SampleSeriesD3R.csv \-r SampleSeriesRef3D.sdf 
\&      \-o SampleOut.sdf
.Ve
.PP
To generate constrained conformers for molecules in a \s-1SD\s0 file against a reference
3D molecule in a \s-1SD\s0 file using a common core scaffold between pairs of input and
reference molecules identified using \s-1MCS,\s0 generating up to 10 conformations
using \s-1SDG\s0 methodology followed by \s-1UFF\s0 forcefield minimization, conformations 
with in an energy window of 10 kcal/mol and \s-1RMSD\s0 of greater that 1, and write out
a \s-1SD\s0 file containing minimum energy structure along with energy and embed \s-1RMS\s0
values corresponding to each constrained molecule, type:
.PP
.Vb 4
\&    % RDKitGenerateConstrainedConformers.py  \-\-maxConfs 10  \-c SDG \-f UFF
\&      \-\-scaffoldRMSDOut yes \-\-energyOut yes \-\-energyRMSDCutoff 1.0
\&      \-\-energyWindow 10 \-i SampleSeriesD3R.sdf \-r SampleSeriesRef3D.sdf
\&     \-o SampleOut.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitCalculateRMSD.py, RDKitCalculateMolecularDescriptors.py, RDKitCompareMoleculeShapes.py,
RDKitConvertFileFormat.py, RDKitGenerateConformers.py, RDKitPerformConstrainedMinimization.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
