.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PyMOLCalculateProperties 1"
.TH PyMOLCalculateProperties 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PyMOLCalculateProperties.py \- Calculate physicochemical properties
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
PyMOLCalculateProperties.py  [\fB\-\-addHydrogens\fR <yes or no>]
[\fB\-\-chainIDs\fR <First, All or \s-1ID1,ID2...\s0>] [\fB\fB\-\-list\fB\fR] [\fB\-\-keepInorganics\fR <yes or no>]
[\fB\-\-keepLigands\fR <yes or no>] [\fB\-\-keepSolvents\fR <yes or no>]
[\fB\-\-mode\fR <All or Name1,Name2,Name3,...>]
[\fB\-\-overwrite\fR]  [\fB\-\-precision\fR <number>] [\fB\-\-quiet\fR <yes or no>]
[\fB\-w\fR <dir>] \fB\-i\fR <infile1,infile2,infile3...> \fB\-o\fR <outfile>
.PP
PyMOLCalculateProperties.py \fB\-l\fR | \fB\-\-list\fR
.PP
PyMOLCalculateProperties.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Calculate physicochemical properties for macromolecules. The properties may
be calculated for the complete complex or a specified list of chain IDs. Ligands,
inorganics, and solvents may be optionally excluded during the calculation
of properties.
.PP
The supported input  file format are: \s-1PDB \s0(.pdb), mmCIF (.cif)
.PP
The supported output file formats are:  \s-1CSV \s0(.csv), \s-1TSV \s0(.tsv, .txt)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-addHydrogens\fR <yes or no>  [default: yes]" 4
.IX Item "-a, --addHydrogens <yes or no> [default: yes]"
Add hydrogens before calculating physiochemical properties.
.IP "\fB\-c, \-\-chainIDs\fR <First, All or \s-1ID1,ID2...\s0>  [default: All]" 4
.IX Item "-c, --chainIDs <First, All or ID1,ID2...> [default: All]"
List of chain IDs to use for calculating physicochemical properties. Possible
values: First, All, or a comma delimited list of chain IDs. The default is to use
all chain IDs in input file.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infiles\fR <infile1,infile2,infile3...>" 4
.IX Item "-i, --infiles <infile1,infile2,infile3...>"
A comma delimited list of input files. The wildcards are also allowed
in file names.
.IP "\fB\-\-keepInorganics\fR <yes or no>  [default: yes]" 4
.IX Item "--keepInorganics <yes or no> [default: yes]"
Keep inorganic molecules during calculation of physiochemical properties.
The inorganic molecules are identified using inorganic selection operator
available in PyMOL.
.IP "\fB\-\-keepLigands\fR <yes or no>  [default: yes]" 4
.IX Item "--keepLigands <yes or no> [default: yes]"
Keep ligand molecules during calculation of physiochemical properties.
The ligand molecules are identified using organic selection operator
available in PyMOL.
.IP "\fB\-\-keepSolvents\fR <yes or no>  [default: yes]" 4
.IX Item "--keepSolvents <yes or no> [default: yes]"
Keep solvent molecules during calculation of physiochemical properties.
The solvent molecules are identified using solvent selection operator
available in PyMOL.
.IP "\fB\-l, \-\-list\fR" 4
.IX Item "-l, --list"
List available property names without performing any calculations.
.IP "\fB\-m, \-\-mode\fR <All or Name1,Name2,Name3,...>  [default: All]" 4
.IX Item "-m, --mode <All or Name1,Name2,Name3,...> [default: All]"
Comma delimited lists of physicochemical properties to calculate. Default:
 'All'. The following properties may be calculated for macromolecules:
.Sp
.Vb 2
\&    CenterOfMass,MolecularWeight,MolecularSurfaceArea
\&    SumOfFormalCharges,SumOfPartialCharges,SolventAccessibleSurfaceArea
.Ve
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name for writing out calculated values. Supported text file extensions:
csv, tsv or txt.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-p, \-\-precision\fR <number>  [default: 3]" 4
.IX Item "-p, --precision <number> [default: 3]"
Floating point precision for writing the calculated property values.
.IP "\fB\-q, \-\-quiet\fR <yes or no>  [default: yes]" 4
.IX Item "-q, --quiet <yes or no> [default: yes]"
Do not print information during the calculation of properties.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To calculate all available properties for all chains in input file along with all
ligands, inorganics and solvents after adding hydrogens and write out a \s-1CSV\s0
file containing calculated values and \s-1PDB\s0 IDs, type:
.PP
.Vb 1
\&    % PyMOLCalculateProperties.py  \-i Sample3.pdb \-o Sample3Out.csv
.Ve
.PP
To calculate specified properties for all chains in input file along with all
ligands, inorganics and solvents after adding hydrogens and write out a \s-1CSV\s0
file containing calculated values and \s-1PDB\s0 IDs, type:
.PP
.Vb 2
\&    % PyMOLCalculateProperties.py  \-m "MolecularWeight,CenterOfMass"
\&      \-i Sample3.pdb \-o Sample3Out.csv
.Ve
.PP
To calculate all available properties for chain E in input file without including
ligands, inorganics and solvents, and addition of hydrogens, and write out a
\&\s-1TSV\s0 file containing calculated values and \s-1PDB\s0 IDs, type:
.PP
.Vb 3
\&    % PyMOLCalculateProperties.py  \-\-addHydrogens no \-c E \-\-keepLigands
\&      no \-\-keepInorganics  no \-\-keepSolvents no \-i Sample3.pdb \-o
\&      Sample3Out.tsv
.Ve
.PP
To calculate all available properties for all chains in multiple files along with all
ligands, inorganics and solvents after adding hydrogens and write out a \s-1CSV\s0
file containing calculated values and \s-1PDB\s0 IDs, type:
.PP
.Vb 2
\&    % PyMOLCalculateProperties.py  \-i "Sample3.pdb,Sample4.pdb,Sample5.pdb"
\&      \-o SampleOut.csv
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
PyMOLCalculateRMSD.py, PyMOLSplitChainsAndLigands.py,
PyMOLVisualizeMacromolecules.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using PyMOL, a
molecular visualization system on an open source foundation originally
developed by Warren DeLano.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
