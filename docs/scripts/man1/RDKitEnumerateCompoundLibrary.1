.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitEnumerateCompoundLibrary 1"
.TH RDKitEnumerateCompoundLibrary 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitEnumerateCompoundLibrary.py \- Enumerate a virtual compound library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitEnumerateCompoundLibrary.py  [\fB\-\-compute2DCoords\fR <yes or no>] [\fB\-\-infileParams\fR <Name,Value,...>]
[\fB\-\-mode\fR <RxnByName or RxnBySMIRKS>] [\fB\-\-outfileParams\fR <Name,Value,...>] [\fB\-\-overwrite\fR]
[\fB\-\-prodMolNames\fR <UseReactants or Sequential>] [\fB\-\-rxnName\fR <text>]
[\fB\-\-rxnNamesFile\fR <FileName or auto>] [\fB\-\-smirksRxn\fR <text>] [\fB\-\-sanitize\fR <yes or no>]
[\fB\-w\fR <dir>] \fB\-i\fR  <ReactantFile1,...> \fB\-o\fR <outfile>
.PP
RDKitEnumerateCompoundLibrary.py [\fB\-\-rxnNamesFile\fR <FileName or auto>] \fB\-l\fR | \fB\-\-list\fR
.PP
RDKitEnumerateCompoundLibrary.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perform a combinatorial enumeration of a virtual library of molecules for a reaction specified
using a reaction name or \s-1SMIRKS\s0 pattern and reactant input files.
.PP
The \s-1SMIRKS\s0 patterns for supported reactions names [ Ref 134 ] are retrieved from file,
ReactionNamesAndSMIRKS.csv, available in MayaChemTools data directory. The current
list of supported reaction names is shown below:
.PP
\&'1,2,4_triazole_acetohydrazide', '1,2,4_triazole_carboxylic_acid_ester', 3_nitrile_pyridine,
Benzimidazole_derivatives_aldehyde, Benzimidazole_derivatives_carboxylic_acid_ester,
Benzofuran, Benzothiazole, Benzothiophene, Benzoxazole_aromatic_aldehyde,
Benzoxazole_carboxylic_acid, Buchwald_Hartwig, Decarboxylative_coupling, Fischer_indole,
Friedlaender_chinoline, Grignard_alcohol, Grignard_carbonyl, Heck_non_terminal_vinyl,
Heck_terminal_vinyl, Heteroaromatic_nuc_sub, Huisgen_Cu_catalyzed_1,4_subst,
Huisgen_disubst_alkyne, Huisgen_Ru_catalyzed_1,5_subst, Imidazole, Indole, Mitsunobu_imide,
Mitsunobu_phenole, Mitsunobu_sulfonamide, Mitsunobu_tetrazole_1, Mitsunobu_tetrazole_2,
Mitsunobu_tetrazole_3, Mitsunobu_tetrazole_4, N_arylation_heterocycles, Negishi,
Niementowski_quinazoline, Nucl_sub_aromatic_ortho_nitro, Nucl_sub_aromatic_para_nitro,
Oxadiazole, Paal_Knorr_pyrrole, Phthalazinone, Pictet_Spengler, Piperidine_indole,
Pyrazole, Reductive_amination, Schotten_Baumann_amide, Sonogashira, Spiro_chromanone,
Stille, Sulfon_amide, Suzuki, Tetrazole_connect_regioisomer_1, Tetrazole_connect_regioisomer_2,
Tetrazole_terminal, Thiazole, Thiourea, Triaryl_imidazole, Urea, Williamson_ether, Wittig
.PP
The supported input file formats are: \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi, .csv, .tsv, .txt)
.PP
The supported output file formats are:  \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-c, \-\-compute2DCoords\fR <yes or no>  [default: yes]" 4
.IX Item "-c, --compute2DCoords <yes or no> [default: yes]"
Compute 2D coordinates of product molecules before writing them out.
.IP "\fB\-i, \-\-infiles\fR <ReactantFile1, ReactantFile2...>" 4
.IX Item "-i, --infiles <ReactantFile1, ReactantFile2...>"
Comma delimited list of reactant file names for enumerating a compound library
using reaction \s-1SMIRKS.\s0 The number of reactant files must match number of
reaction components in reaction \s-1SMIRKS.\s0 All reactant input files must have
the same format.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD, MOL: removeHydrogens,yes,sanitize,yes,strictParsing,yes
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab. These parameters apply
to all reactant input files, which must have the same file format.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-l, \-\-list\fR" 4
.IX Item "-l, --list"
List available reaction names along with corresponding \s-1SMIRKS\s0 patterns without
performing any enumeration.
.IP "\fB\-m, \-\-mode\fR <RxnByName or RxnBySMIRKS>  [default: RxnByName]" 4
.IX Item "-m, --mode <RxnByName or RxnBySMIRKS> [default: RxnByName]"
Indicate whether a reaction is specified by a reaction name or a \s-1SMIRKS\s0 pattern.
Possible values: RxnByName or RxnBySMIRKS.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD: kekulize,no
\&    SMILES: kekulize,no,smilesDelimiter,space, smilesIsomeric,yes,
\&        smilesTitleLine,yes
.Ve
.IP "\fB\-p, \-\-prodMolNames\fR <UseReactants or Sequential>  [default: UseReactants]" 4
.IX Item "-p, --prodMolNames <UseReactants or Sequential> [default: UseReactants]"
Generate names of product molecules using reactant names or assign names in
a sequential order. Possible values: UseReactants or Sequential. Format of
molecule names: UseReactants \- <ReactName1>_<ReactName2>..._Prod<Num>;
Sequential \- Prod<Num>
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-r, \-\-rxnName\fR <text>" 4
.IX Item "-r, --rxnName <text>"
Name of a reaction to use for enumerating a compound library. This option
is only used during 'RxnByName' value of '\-m, \-\-mode' option.
.IP "\fB\-\-rxnNamesFile\fR <FileName or auto>  [default: auto]" 4
.IX Item "--rxnNamesFile <FileName or auto> [default: auto]"
Specify a file name containing data for names of reactions and \s-1SMIRKS\s0 patterns or
use default file, ReactionNamesAndSMIRKS.csv, available in MayaChemTools data
directory.
.Sp
Reactions \s-1SMIRKS\s0 file format: RxnName,RxnSMIRKS.
.Sp
The format of data in local reaction names file must match format of the reaction
\&\s-1SMIRKS\s0 file available in MayaChemTools data directory.
.IP "\fB\-s, \-\-smirksRxn\fR <text>" 4
.IX Item "-s, --smirksRxn <text>"
\&\s-1SMIRKS\s0 pattern of a reaction to use for enumerating a compound library. This
option is only used during 'RxnBySMIRKS' value of '\-m, \-\-mode' option.
.IP "\fB\-\-sanitize\fR <yes or no>  [default: yes]" 4
.IX Item "--sanitize <yes or no> [default: yes]"
Sanitize product molecules before writing them out.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To list all available reaction names along with their \s-1SMIRKS\s0 pattern, type:
.PP
.Vb 1
\&     % RDKitEnumerateCompoundLibrary.py \-l
.Ve
.PP
To perform a combinatorial enumeration of a virtual compound library corresponding
to named amide reaction, Schotten_Baumann_amide and write out a \s-1SMILES\s0 file
type:
.PP
.Vb 2
\&    % RDKitEnumerateCompoundLibrary.py \-r Schotten_Baumann_amide
\&      \-i \*(AqSampleAcids.smi,SampleAmines.smi\*(Aq \-o SampleOutCmpdLibrary.smi
.Ve
.PP
To perform a combinatorial enumeration of a virtual compound library corresponding
to an amide reaction specified using a \s-1SMIRKS\s0 pattern and write out a \s-1SD\s0 file containing
sanitized molecules, computed 2D coordinates, and generation of molecule names from
reactant names, type:
.PP
.Vb 3
\&    % RDKitEnumerateCompoundLibrary.py \-m RxnBySMIRKS
\&      \-s \*(Aq[O:2]=[C:1][OH].[N:3]>>[O:2]=[C:1][N:3]\*(Aq
\&      \-i \*(AqSampleAcids.smi,SampleAmines.smi\*(Aq \-o SampleOutCmpdLibrary.sdf
.Ve
.PP
To perform a combinatorial enumeration of a virtual compound library corresponding
to an amide reaction specified using a \s-1SMIRKS\s0 pattern  and write out a \s-1SD\s0 file containing
unsanitized molecules, without generating 2D coordinates, and a sequential generation
of molecule names, type:
.PP
.Vb 3
\&    % RDKitEnumerateCompoundLibrary.py \-m RxnBySMIRKS \-c no \-s no
\&      \-p Sequential \-s \*(Aq[O:2]=[C:1][OH].[N:3]>>[O:2]=[C:1][N:3]\*(Aq
\&      \-i \*(AqSampleAcids.smi,SampleAmines.smi\*(Aq \-o SampleOutCmpdLibrary.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitConvertFileFormat.py, RDKitFilterPAINS.py, RDKitSearchFunctionalGroups.py,
RDKitSearchSMARTS.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
