.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PyMOLCalculateRMSD 1"
.TH PyMOLCalculateRMSD 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PyMOLCalculateRMSD.py \- Calculate RMSD between macromolecules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
PyMOLCalculateRMSD.py [\fB\-\-alignMethod\fR <align, cealign, super>]
[\fB\-\-alignMode\fR <FirstChain or Complex>] [\fB\-\-mode\fR <OneToOne, AllToAll, FirstToAll>]
[\fB\-\-outMatrix\fR <yes or no>] [\fB\-\-overwrite\fR]
[\fB\-w\fR <dir>] \fB\-p\fR <probefile1,probefile2,probefile3...> \fB\-r\fR <reffile1,reffile2,reffile3...> \fB\-o\fR <outfile>
.PP
PyMOLCalculateRMSD.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Calculate Root Mean Square Distance (\s-1RMSD\s0) between a set of similar
macromolecules in reference and probe input files. The probe and reference
files are spatially aligned before the the calculation of \s-1RMSD\s0 values.
.PP
The supported input  file format are: \s-1PDB \s0(.pdb), mmCIF (.cif)
.PP
The supported output file formats are:  \s-1CSV \s0(.csv), \s-1TSV \s0(.tsv, .txt)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-alignMethod\fR <align, cealign, super>  [default: super]" 4
.IX Item "-a, --alignMethod <align, cealign, super> [default: super]"
Alignment methodology to use for aligning probe input files to
reference files.
.IP "\fB\-\-alignMode\fR <FirstChain or Complex>  [default: FirstChain]" 4
.IX Item "--alignMode <FirstChain or Complex> [default: FirstChain]"
Portion of probe and reference files to use for spatial alignment of
probe files against reference files.  Possible values: FirstChain or
Complex.
.Sp
The FirstChain mode allows alignment of the first chain in probe files
to the first chain in reference files along with moving the rest of the
complex to coordinate space of the reference files. The complete
complex in probe files is aligned to the complete complex in reference
files for the Complex mode.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-m, \-\-mode\fR <OneToOne, AllToAll, FirstToAll>  [default: OneToOne]" 4
.IX Item "-m, --mode <OneToOne, AllToAll, FirstToAll> [default: OneToOne]"
Specify how reference and probe input files are handled during the calculation
of \s-1RMSD\s0 between reference and probe files.  Possible values: OneToOne,
AllToAll and AllToFirst. For OneToOne mode, the number of reference input
files must be equal to the number of probe input files. The \s-1RMSD\s0 is
calculated for each pair of reference and probe file and written to the
output file. For AllToAll mode, the \s-1RMSD\s0 is calculated for each reference
input file against all probe input files. For FirstToAll mode, however, the \s-1RMSD\s0
is only calculated for the first reference input file against all probe files.
.IP "\fB\-p, \-\-probefiles\fR <probefile1,probefile2,probelfile3...>" 4
.IX Item "-p, --probefiles <probefile1,probefile2,probelfile3...>"
A comma delimited list of probe input files. The wildcards are also allowed
in file names.
.IP "\fB\-r, \-\-reffiles\fR <reffile1,reffile2,reffile3...>" 4
.IX Item "-r, --reffiles <reffile1,reffile2,reffile3...>"
A comma delimited list of reference input files. The wildcards are also allowed
in file names.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name for writing out \s-1RMSD\s0 values. Supported text file extensions:
csv, tsv or txt.
.IP "\fB\-\-outMatrix\fR <yes or no>  [default: yes]" 4
.IX Item "--outMatrix <yes or no> [default: yes]"
Output file in a matrix format during 'AllToAll' value for '\-m, \-\-mode' option.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To calculate \s-1RMSD\s0 between pair of macromolecules in reference and probe files
using only first chain in each file and write out a \s-1CSV\s0 file containing calculated \s-1RMSD\s0
values along with IDs, type:
.PP
.Vb 2
\&    % PyMOLCalculateRMSD.py  \-r "Sample3.pdb,Sample4.pdb,Sample5.pdb"
\&      \-p "Sample3.pdb,Sample4.pdb,Sample5.pdb" \-o SampleOut.csv
.Ve
.PP
To calculate \s-1RMSD\s0 between all macromolecules in reference and probe files using
complete complex and write out a \s-1CSV\s0 matrix file, type:
.PP
.Vb 3
\&    % PyMOLCalculateRMSD.py  \-m AllToAll \-\-alignMode Complex
\&       \-\-outMatrix Yes \-r "Sample3.pdb,Sample4.pdb,Sample5.pdb"
\&      \-p "Sample3.pdb,Sample4.pdb" \-o SampleOut.csv
.Ve
.PP
To calculate \s-1RMSD\s0 between macromolecule in first reference against all probe files
using only first chain in each file and write out a \s-1TSV\s0 file containing calculated \s-1RMSD\s0
values along with IDs, type:
.PP
.Vb 3
\&    % PyMOLCalculateRMSD.py  \-m FirstToAll
\&      \-r "Sample3.pdb,Sample4.pdb,Sample5.pdb"
\&      \-p "Sample3.pdb,Sample4.pdb,Sample5.pdb" \-o SampleOut.tsv
.Ve
.PP
To calculate \s-1RMSD\s0 between pair of macromolecules in reference and probe files
using only first chain in each file along with a specific alignment method and write
out a \s-1CSV\s0 file containing calculated \s-1RMSD\s0 values, type:
.PP
.Vb 3
\&    % PyMOLCalculateRMSD.py  \-\-alignMethod align
\&      \-r "Sample3.pdb,Sample4.pdb,Sample5.pdb"
\&      \-p "Sample3.pdb,Sample4.pdb,Sample5.pdb" \-o SampleOut.csv
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
PyMOLAlignChains.py, PyMOLSplitChainsAndLigands.py,
PyMOLVisualizeMacromolecules.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using PyMOL, a
molecular visualization system on an open source foundation originally
developed by Warren DeLano.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
