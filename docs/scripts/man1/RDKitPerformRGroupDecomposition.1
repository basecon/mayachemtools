.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitPerformRGroupDecomposition 1"
.TH RDKitPerformRGroupDecomposition 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitPerformRGroupDecomposition.py \- Perform R group decomposition analysis
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitPerformRGroupDecomposition.py [\fB\-\-coreScaffold\fR <ByMCS, BySMARTS or BySMILES>]
[\fB\-\-decompositionParams\fR <Name,Value,...>]
[\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-mcsParams\fR <Name,Value,...>]
[\fB\-\-outfileParams\fR <Name,Value,...>] [\fB\-\-overwrite\fR] [\fB\-\-quote\fR <yes or no>]
[\fB\-\-removeUnmatched\fR <yes or no>] [\fB\-\-smartsOrSmilesCoreScaffold\fR <text>]
[\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-o\fR <outfile>
.PP
RDKitPerformRGroupDecomposition.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perform R group decomposition for a set of molecules in a series containing
a common core scaffold. The core scaffold is identified by a \s-1SMARTS\s0 string,
\&\s-1SMILES\s0 string, or using maximum common substructure (\s-1MCS\s0) search.
Multiple core scaffolds may be specified using \s-1SMARTS\s0 or \s-1SMILES\s0 strings for
set of molecules corresponding to multiple series.
.PP
The core scaffolds along with appropriate R groups are written out as \s-1SMILES\s0
strings to a \s-1SD\s0 or text file. The unmatched molecules without any specified
core scaffold are written to a different output file.
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi,
\&.txt, .csv, .tsv)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd), \s-1CSV/TSV \s0(.csv, .tsv, .txt)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-c, \-\-coreScaffold\fR <ByMCS, BySMARTS or BySMILES>  [default: ByMCS]" 4
.IX Item "-c, --coreScaffold <ByMCS, BySMARTS or BySMILES> [default: ByMCS]"
Specify a core scaffold for a set of molecules in a series. The core scaffold
is identified by an explicit \s-1SMARTS\s0 string, \s-1SMILES\s0 string, or using maximum
common substructure (\s-1MCS\s0) search. Multiple core scaffolds may be specified
using \s-1SMARTS\s0 or \s-1SMILES\s0 strings for set of molecules corresponding to multiple
series.
.IP "\fB\-d, \-\-decompositionParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "-d, --decompositionParams <Name,Value,...> [default: auto]"
Parameter values to use during R group decomposition for a series of molecules.
In general, it is a comma delimited list of parameter name and value pairs. The
supported parameter names along with their default values are shown below:
.Sp
.Vb 3
\&    RGroupCoreAlignment,MCS, RGroupMatching,GreedyChunks,chunkSize,5,
\&    matchOnlyAtRGroups,no,removeHydrogenOnlyGroups,yes,
\&    removeHydrogensPostMatch,no
.Ve
.Sp
A brief description of each supported parameter taken from  RDKit documentation,
along with their possible values, is as follows.
.Sp
RGroupCoreAlignment \- Mapping of core labels:
.Sp
.Vb 2
\&    MCS \- Map core labels to each other using MCS
\&    None \- No mapping
.Ve
.Sp
RGroupMatching: Greedy, GreedyChunks, Exhaustive
.Sp
matchOnlyAtRGroups \- Allow R group decomposition only at specified R groups.
Possible values: yes, no.
.Sp
removeHydrogenOnlyGroups \- Remove all R groups that only have hydrogens.
Possible values: yes, no.
.Sp
removeHydrogensPostMatch \- Remove all hydrogens from the output molecules.
Possible values: yes, no.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading 
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD, MOL: removeHydrogens,yes,sanitize,yes,strictParsing,yes
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-m, \-\-mcsParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "-m, --mcsParams <Name,Value,...> [default: auto]"
Parameter values to use for identifying a maximum common substructure
(\s-1MCS\s0) in a series of molecules. In general, it is a comma delimited list of
parameter name and value pairs. The supported parameter names along with
their default values are shown below:
.Sp
.Vb 4
\&    atomCompare,CompareElements,bondCompare,CompareOrder,
\&    maximizeBonds,yes,matchValences,yes,matchChiralTag,no,
\&    minNumAtoms,1,minNumBonds,0,ringMatchesRingOnly,yes,
\&    completeRingsOnly,yes,threshold,1.0,timeOut,3600,seedSMARTS,none
.Ve
.Sp
Possible values for atomCompare: CompareAny, CompareElements,
CompareIsotopes. Possible values for bondCompare: CompareAny,
CompareOrder, CompareOrderExact.
.Sp
A brief description of \s-1MCS\s0 parameters taken from RDKit documentation is
as follows:
.Sp
.Vb 12
\&    atomCompare \- Controls match between two atoms
\&    bondCompare \- Controls match between two bonds
\&    maximizeBonds \- Maximize number of bonds instead of atoms
\&    matchValences \- Include atom valences in the MCS match
\&    matchChiralTag \- Include atom chirality in the MCS match
\&    minNumAtoms \- Minimum number of atoms in the MCS match
\&    minNumBonds \- Minimum number of bonds in the MCS match
\&    ringMatchesRingOnly \- Ring bonds only match other ring bonds
\&    completeRingsOnly \- Partial rings not allowed during the match
\&    threshold \- Fraction of the dataset that must contain the MCS
\&    seedSMARTS \- SMARTS string as the seed of the MCS
\&    timeout \- Timeout for the MCS calculation in seconds
.Ve
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 2
\&    SD: compute2DCoords,auto,kekulize,no
\&    SMILES: kekulize,no,smilesIsomeric,yes
.Ve
.Sp
Default value for compute2DCoords: yes for \s-1SMILES\s0 input file; no for all other
file types. The kekulize and smilesIsomeric parameters are also used during
generation of \s-1SMILES\s0 strings for \s-1CSV/TSV\s0 files.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-q, \-\-quote\fR <yes or no>  [default: auto]" 4
.IX Item "-q, --quote <yes or no> [default: auto]"
Quote \s-1SMILES\s0 strings and molecule names before writing them out to text
files. Possible values: yes or no. Default: yes for \s-1CSV \s0(.csv) text files; no for
\&\s-1TSV \s0(.tsv) and \s-1TXT \s0(.txt) text files.
.IP "\fB\-r, \-\-removeUnmatched\fR <yes or no>  [default: no]" 4
.IX Item "-r, --removeUnmatched <yes or no> [default: no]"
Remove unmatched molecules containing no specified core scaffold from the
output file and write them to a different output file.
.IP "\fB\-s, \-\-smartsOrSmilesCoreScaffold\fR <text>  [default: none]" 4
.IX Item "-s, --smartsOrSmilesCoreScaffold <text> [default: none]"
\&\s-1SMARTS\s0 or \s-1SMILES\s0 string to use for core scaffold during '\s-1SMARTS\s0' or '\s-1SMILES\s0'
value of '\-c, \-\-coreScaffold' option. Multiple core scaffolds may be specified using a
comma delimited set of \s-1SMARTS\s0 or \s-1SMILES\s0 strings.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To perform R group decomposition for a set of molecules in a series using \s-1MCS\s0
to identify a core scaffold and write out a \s-1CSV\s0 file containing R groups, type:
.PP
.Vb 2
\&    % RDKitPerformRGroupDecomposition.py \-i SampleSeriesD3R.smi
\&      \-o SampleSeriesD3ROut.csv
.Ve
.PP
To perform R group decomposition for a set of molecules in a series using a
specified core scaffold and write out a \s-1SD\s0 file containing R groups, type:
.PP
.Vb 3
\&    % RDKitPerformRGroupDecomposition.py  \-c BySMARTS
\&      \-s "Nc1nccc(\-c2cnc(CNCc3ccccc3)c2)n1" \-i SampleSeriesD3R.smi
\&      \-o SampleSeriesD3ROut.sdf
.Ve
.PP
To perform R group decomposition for a set of molecules in a series using \s-1MCS\s0
to identify a core scaffold and write out \s-1CSV\s0 files containing matched and
unmatched molecules without quoting values, type:
.PP
.Vb 2
\&    % RDKitPerformRGroupDecomposition.py \-c ByMCS \-r yes \-q no
\&      \-i SampleSeriesD3R.sdf \-o SampleSeriesD3ROut.csv
.Ve
.PP
To perform R group decomposition for a set of molecules in multiple series using
specified core scaffolds and write out a \s-1TSV\s0 file containing R groups, type:
.PP
.Vb 4
\&    % RDKitPerformRGroupDecomposition.py  \-c BySMARTS
\&      \-s "Nc1nccc(\-c2cnc(CNCc3ccccc3)c2)n1,[#6]\-[#6]1:[#6]:[#6]:[#6]:[#6]:
\&      [#6]:1" \-i SampleMultipleSeriesD3R.smi \-o
\&      SampleMultipleSeriesD3ROut.tsv
.Ve
.PP
To perform R group decomposition for a set of molecules in a \s-1CSV SMILES\s0 file,
\&\s-1SMILES\s0 strings in  olumn 1, name in column 2, and write out a \s-1CSV\s0 file containing
R groups, type:
.PP
.Vb 4
\&    % RDKitPerformRGroupDecomposition.py \-\-infileParams 
\&      "smilesDelimiter,comma,smilesTitleLine,yes,smilesColumn,1,
\&      smilesNameColumn,2" \-\-outfileParams "compute2DCoords,yes"
\&      \-i SampleSeriesD3R.smi \-o SampleSeriesD3ROut.csv
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitConvertFileFormat.py, RDKitSearchFunctionalGroups.py, RDKitSearchSMARTS.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
