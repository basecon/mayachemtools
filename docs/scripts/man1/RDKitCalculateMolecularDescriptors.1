.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitCalculateMolecularDescriptors 1"
.TH RDKitCalculateMolecularDescriptors 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitCalculateMolecularDescriptors.py \- Calculate 2D/3D molecular descriptors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitCalculateMolecularDescriptors.py [\fB\-\-autocorr2DExclude\fR <yes or no>] [\fB\-\-fragmentCount\fR <yes or no>]
[\fB\-\-descriptorNames\fR <Name1,Name2,...>] [\fB\-\-infileParams\fR <Name,Value,...>]
[\fB\-\-mode\fR <2D, 3D, All...>] [\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name.Value,...>]
[\fB\-\-outfileParams\fR <Name,Value,...>] [\fB\-\-overwrite\fR] [\fB\-\-precision\fR <number>]
[\fB\-\-smilesOut\fR <yes or no>] [\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-o\fR <outfile>
.PP
RDKitCalculateMolecularDescriptors.py \fB\-l\fR | \fB\-\-list\fR
.PP
RDKitCalculateMolecularDescriptors.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Calculate 2D/3D molecular descriptors for molecules and write them out to a \s-1SD\s0 or
\&\s-1CSV/TSV\s0 text file.
.PP
The complete list of currently available molecular descriptors may be obtained by
using '\-l, \-\-list' option. The names of valid 2D, fragment count, and 3D molecular
descriptors are shown below:
.PP
2D descriptors: Autocorr2D, BalabanJ, BertzCT, Chi0, Chi1, Chi0n \- Chi4n, Chi0v \- Chi4v,
EState_VSA1 \- EState_VSA11, ExactMolWt, FpDensityMorgan1, FpDensityMorgan2, FpDensityMorgan3,
FractionCSP3, HallKierAlpha, HeavyAtomCount, HeavyAtomMolWt, Ipc, Kappa1 \- Kappa3,
LabuteASA, MaxAbsEStateIndex, MaxAbsPartialCharge, MaxEStateIndex, MaxPartialCharge,
MinAbsEStateIndex, MinAbsPartialCharge, MinEStateIndex, MinPartialCharge, MolLogP,
MolMR, MolWt, NHOHCount, NOCount, NumAliphaticCarbocycles, NumAliphaticHeterocycles,
NumAliphaticRings, NumAromaticCarbocycles, NumAromaticHeterocycles, NumAromaticRings,
NumHAcceptors, NumHDonors, NumHeteroatoms, NumRadicalElectrons, NumRotatableBonds,
NumSaturatedCarbocycles, NumSaturatedHeterocycles, NumSaturatedRings, NumValenceElectrons,
\&\s-1PEOE_VSA1 \- PEOE_VSA14, \s0 RingCount, \s-1SMR_VSA1 \- SMR_VSA10,\s0 SlogP_VSA1 \- SlogP_VSA12,
\&\s-1TPSA,\s0 VSA_EState1 \- VSA_EState10, qed
.PP
FragmentCount 2D descriptors: fr_Al_COO, fr_Al_OH, fr_Al_OH_noTert, fr_ArN, fr_Ar_COO,
fr_Ar_N, fr_Ar_NH, fr_Ar_OH, fr_COO, fr_COO2, fr_C_O, fr_C_O_noCOO, fr_C_S, fr_HOCCN,
fr_Imine, fr_NH0, fr_NH1, fr_NH2, fr_N_O, fr_Ndealkylation1, fr_Ndealkylation2, fr_Nhpyrrole,
fr_SH, fr_aldehyde, fr_alkyl_carbamate, fr_alkyl_halide, fr_allylic_oxid, fr_amide, fr_amidine,
fr_aniline, fr_aryl_methyl, fr_azide, fr_azo, fr_barbitur, fr_benzene, fr_benzodiazepine,
fr_bicyclic, fr_diazo, fr_dihydropyridine, fr_epoxide, fr_ester, fr_ether, fr_furan, fr_guanido,
fr_halogen, fr_hdrzine, fr_hdrzone, fr_imidazole, fr_imide, fr_isocyan, fr_isothiocyan, fr_ketone,
fr_ketone_Topliss, fr_lactam, fr_lactone, fr_methoxy, fr_morpholine, fr_nitrile, fr_nitro,
fr_nitro_arom, fr_nitro_arom_nonortho, fr_nitroso, fr_oxazole, fr_oxime, fr_para_hydroxylation,
fr_phenol, fr_phenol_noOrthoHbond, fr_phos_acid, fr_phos_ester, fr_piperdine, fr_piperzine,
fr_priamide, fr_prisulfonamd, fr_pyridine, fr_quatN, fr_sulfide, fr_sulfonamd, fr_sulfone,
fr_term_acetylene, fr_tetrazole, fr_thiazole, fr_thiocyan, fr_thiophene, fr_unbrch_alkane, fr_urea
.PP
3D descriptors: Asphericity, Autocorr3D, Eccentricity, \s-1GETAWAY,\s0 InertialShapeFactor, \s-1MORSE,
NPR1, NPR2, PMI1, PMI2, PMI3, RDF,\s0 RadiusOfGyration, SpherocityIndex, \s-1WHIM\s0
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi,
\&.txt, .csv, .tsv)
.PP
The supported output file formats are: \s-1SD\s0 File (.sdf, .sd), \s-1CSV/TSV \s0(.csv, .tsv, .txt)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-autocorr2DExclude\fR <yes or no>  [default: yes]" 4
.IX Item "-a, --autocorr2DExclude <yes or no> [default: yes]"
Exclude Autocorr2D descriptor from the calculation of 2D descriptors.
.IP "\fB\-f, \-\-fragmentCount\fR <yes or no>  [default: yes]" 4
.IX Item "-f, --fragmentCount <yes or no> [default: yes]"
Include 2D fragment count descriptors during the calculation. These descriptors are
counted using \s-1SMARTS\s0 patterns specified in FragmentDescriptors.csv file distributed
with RDKit. This option is only used during '2D' or 'All' value of '\-m, \-\-mode' option.
.IP "\fB\-d, \-\-descriptorNames\fR <Name1,Name2,...>  [default: none]" 4
.IX Item "-d, --descriptorNames <Name1,Name2,...> [default: none]"
A comma delimited list of supported molecular descriptor names to calculate.
This option is only used during 'Specify' value of '\-m, \-\-mode' option.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD, MOL: removeHydrogens,yes,sanitize,yes,strictParsing,yes
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-l, \-\-list\fR" 4
.IX Item "-l, --list"
List molecular descriptors without performing any calculations.
.IP "\fB\-m, \-\-mode\fR <2D, 3D, All, FragmentCountOnly, or Specify>  [default: 2D]" 4
.IX Item "-m, --mode <2D, 3D, All, FragmentCountOnly, or Specify> [default: 2D]"
Type of molecular descriptors to calculate. Possible values: 2D, 3D,
All or Specify. The name of molecular descriptors must be specified using
\&'\-d, \-\-descriptorNames' for 'Specify'. 2D descriptors also include 1D descriptors.
The structure  of molecules must contain 3D coordinates for the  calculation
of 3D descriptors.
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for to
configure multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD: compute2DCoords,auto,kekulize,no
.Ve
.Sp
Default value for compute2DCoords: yes for \s-1SMILES\s0 input file; no for all other
file types.
.IP "\fB\-p, \-\-precision\fR <number>  [default: 3]" 4
.IX Item "-p, --precision <number> [default: 3]"
Floating point precision for writing the calculated descriptor values.
.IP "\fB\-s, \-\-smilesOut\fR <yes or no>  [default: no]" 4
.IX Item "-s, --smilesOut <yes or no> [default: no]"
Write out \s-1SMILES\s0 string to \s-1CSV/TSV\s0 text output file.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To compute all available 2D descriptors except Autocorr2D descriptor and
write out a \s-1CSV\s0 file, type:
.PP
.Vb 1
\&    % RDKitCalculateMolecularDescriptors.py  \-i Sample.smi \-o SampleOut.csv
.Ve
.PP
To compute all available 2D descriptors except Autocorr2D descriptor in
multiprocessing mode on all available CPUs without loading all data into
memory, and write out a \s-1CSV\s0 file, type:
.PP
.Vb 2
\&    % RDKitCalculateMolecularDescriptors.py  \-\-mp yes \-i Sample.smi
\&      \-o SampleOut.csv
.Ve
.PP
To compute all available 2D descriptors except Autocorr2D descriptor in
multiprocessing mode on all available CPUs by loading all data into memory,
and write out a \s-1CSV\s0 file, type:
.PP
.Vb 2
\&    % RDKitCalculateMolecularDescriptors.py  \-\-mp yes \-\-mpParams
\&      "inputDataMode,InMemory" \-i Sample.smi \-o SampleOut.csv
.Ve
.PP
To compute all available 2D descriptors except Autocorr2D descriptor in
multiprocessing mode on specific number of CPUs and chunk size without
loading all data into memory, and write out a \s-1SDF\s0 file, type:
.PP
.Vb 3
\&    % RDKitCalculateMolecularDescriptors.py  \-\-mp yes \-\-mpParams
\&      "inputDataMode,Lazy,numProcesses,4,chunkSize,8" \-i Sample.smi
\&      \-o SampleOut.sdf
.Ve
.PP
To compute all available 2D descriptors including Autocorr2D descriptor and
excluding fragment count descriptors, and write out a \s-1TSV\s0 file, type:
.PP
.Vb 2
\&    % RDKitCalculateMolecularDescriptors.py  \-m 2D \-a no \-f no
\&      \-i Sample.smi \-o SampleOut.tsv
.Ve
.PP
To compute all available 3D descriptors and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitCalculateMolecularDescriptors.py  \-m 3D \-i Sample3D.sdf
\&      \-o Sample3DOut.sdf
.Ve
.PP
To compute only fragment count 2D descriptors and write out a \s-1SD\s0
file file, type:
.PP
.Vb 2
\&    % RDKitCalculateMolecularDescriptors.py  \-m FragmentCountOnly
\&      \-i Sample.sdf \-o SampleOut.sdf
.Ve
.PP
To compute all available 2D and 3D descriptors including fragment count and
Autocorr2D and write out a \s-1CSV\s0 file, type:
.PP
.Vb 2
\&    % RDKitCalculateMolecularDescriptors.py  \-m All \-a no \-i Sample.sdf
\&      \-o SampleOut.csv
.Ve
.PP
To compute a specific set of 2D and 3D descriptors and write out a
write out a \s-1TSV\s0 file, type:
.PP
.Vb 3
\&    % RDKitCalculateMolecularDescriptors.py  \-m specify
\&      \-d \*(AqMolWt,MolLogP,NHOHCount, NOCount,RadiusOfGyration\*(Aq
\&      \-i Sample3D.sdf \-o SampleOut.csv
.Ve
.PP
To compute all available 2D descriptors except Autocorr2D descriptor for 
molecules in a \s-1CSV SMILES\s0 file, \s-1SMILES\s0 strings in column 1, name in
column 2, and write out a \s-1SD\s0 file without calculation of 2D coordinates, type:
.PP
.Vb 4
\&    % RDKitCalculateMolecularDescriptors.py \-\-infileParams
\&      "smilesDelimiter,comma,smilesTitleLine,yes,smilesColumn,1,
\&      smilesNameColumn,2" \-\-outfileParams "compute2DCoords,no"
\&      \-i SampleSMILES.csv \-o SampleOut.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitCalculateRMSD.py, RDKitCompareMoleculeShapes.py, RDKitConvertFileFormat.py,
RDKitGenerateConformers.py, RDKitPerformMinimization.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
