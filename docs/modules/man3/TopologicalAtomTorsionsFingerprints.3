.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TopologicalAtomTorsionsFingerprints 1"
.TH TopologicalAtomTorsionsFingerprints 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TopologicalAtomTorsionsFingerprints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Fingerprints::TopologicalAtomTorsionsFingerprints;
.PP
use Fingerprints::TopologicalAtomTorsionsFingerprints qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBTopologicalAtomTorsionsFingerprints\fR class provides the following methods:
.PP
new, GenerateFingerprints, GetAtomTorsionsIDs, GetDescription,
SetAtomIdentifierType, SetAtomicInvariantsToUse, SetFunctionalClassesToUse,
StringifyTopologicalAtomTorsionsFingerprints
.PP
\&\fBTopologicalAtomTorsionsFingerprints\fR is derived from \fBFingerprints\fR class which in turn
is  derived from \fBObjectProperty\fR base class that provides methods not explicitly defined
in \fBTopologicalAtomTorsionsFingerprints\fR, \fBFingerprints\fR or \fBObjectProperty\fR classes using Perl's
\&\s-1AUTOLOAD\s0 functionality. These methods are generated on-the-fly for a specified object property:
.PP
.Vb 3
\&    Set<PropertyName>(<PropertyValue>);
\&    $PropertyValue = Get<PropertyName>();
\&    Delete<PropertyName>();
.Ve
.PP
The current release of MayaChemTools supports generation of \fBTopologicalAtomTorsionsFingerprints\fR
corresponding to following \fBAtomtomIdentifierTypes\fR:
.PP
.Vb 3
\&    AtomicInvariantsAtomTypes, DREIDINGAtomTypes, EStateAtomTypes,
\&    FunctionalClassAtomTypes, MMFF94AtomTypes, SLogPAtomTypes,
\&    SYBYLAtomTypes, TPSAAtomTypes, UFFAtomTypes
.Ve
.PP
Based on the values specified for \fBAtomIdentifierType\fR along with other specified
parameters such as \fBAtomicInvariantsToUse\fR and \fBFunctionalClassesToUse\fR, initial
atom types are assigned to all non-hydrogen  in a molecule. All unique atom torsions
are identified and an atom torsion identifier is generated; the format of atom torsion identifier is:
.PP
.Vb 1
\&    <AtomType1>\-<AtomType2>\-<AtomType3>\-<AtomType4>
\&
\&    AtomType1, AtomType2, AtomType3, AtomTyp4: Assigned atom types
\&
\&    where AtomType1 <= AtomType2 <= AtomType3 <= AtomType4
.Ve
.PP
The atom torsion identifiers for all unique atom torsions corresponding to non-hydrogen atoms constitute
topological atom torsions fingerprints of the molecule.
.PP
The current release of MayaChemTools generates the following types of topological atom torsions
fingerprints vector strings:
.PP
.Vb 5
\&    FingerprintsVector;TopologicalAtomTorsions:AtomicInvariantsAtomTypes;3
\&    3;NumericalValues;IDsAndValuesString;C.X1.BO1.H3\-C.X3.BO3.H1\-C.X3.BO4\-
\&    C.X3.BO4 C.X1.BO1.H3\-C.X3.BO3.H1\-C.X3.BO4\-N.X3.BO3 C.X2.BO2.H2\-C.X2.BO
\&    2.H2\-C.X3.BO3.H1\-C.X2.BO2.H2 C.X2.BO2.H2\-C.X2.BO2.H2\-C.X3.BO3.H1\-O...;
\&    2 2 1 1 2 2 1 1 3 4 4 8 4 2 2 6 2 2 1 2 1 1 2 1 1 2 6 2 4 2 1 3 1
\&
\&    FingerprintsVector;TopologicalAtomTorsions:AtomicInvariantsAtomTypes;3
\&    3;NumericalValues;IDsAndValuesPairsString;C.X1.BO1.H3\-C.X3.BO3.H1\-C.X3
\&    .BO4\-C.X3.BO4 2 C.X1.BO1.H3\-C.X3.BO3.H1\-C.X3.BO4\-N.X3.BO3 2 C.X2.BO2.H
\&    2\-C.X2.BO2.H2\-C.X3.BO3.H1\-C.X2.BO2.H2 1 C.X2.BO2.H2\-C.X2.BO2.H2\-C.X3.B
\&    O3.H1\-O.X1.BO1.H1 1 C.X2.BO2.H2\-C.X2.BO2.H2\-N.X3.BO3\-C.X3.BO4 2 C.X2.B
\&    O2.H2\-C.X3.BO3.H1\-C.X2.BO2.H2\-C.X3.BO3.H1 2 C.X2.BO2.H2\-C.X3.BO3.H1...
\&
\&    FingerprintsVector;TopologicalAtomTorsions:DREIDINGAtomTypes;27;Numeri
\&    calValues;IDsAndValuesString;C_2\-C_3\-C_3\-C_3 C_2\-C_3\-C_3\-O_3 C_2\-C_R\-C
\&    _R\-C_3 C_2\-C_R\-C_R\-C_R C_2\-C_R\-C_R\-N_R C_2\-N_3\-C_R\-C_R C_3\-C_3\-C_2\-O_2
\&    C_3\-C_3\-C_2\-O_3 C_3\-C_3\-C_3\-C_3 C_3\-C_3\-C_3\-N_R C_3\-C_3\-C_3\-O_3 C_...;
\&    1 1 1 2 1 2 1 1 3 1 3 2 2 2 1 1 1 3 1 2 2 32 2 2 5 3 1
\&
\&    FingerprintsVector;TopologicalAtomTorsions:EStateAtomTypes;36;Numerica
\&    lValues;IDsAndValuesString;aaCH\-aaCH\-aaCH\-aaCH aaCH\-aaCH\-aaCH\-aasC aaC
\&    H\-aaCH\-aasC\-aaCH aaCH\-aaCH\-aasC\-aasC aaCH\-aaCH\-aasC\-sF aaCH\-aaCH\-aasC\-
\&    ssNH aaCH\-aasC\-aasC\-aasC aaCH\-aasC\-aasC\-aasN aaCH\-aasC\-ssNH\-dssC a...;
\&    4 4 8 4 2 2 6 2 2 2 4 3 2 1 3 3 2 2 2 1 2 1 1 1 2 1 1 1 1 1 1 1 2 1 1 2
\&
\&    FingerprintsVector;TopologicalAtomTorsions:FunctionalClassAtomTypes;26
\&    ;NumericalValues;IDsAndValuesString;Ar\-Ar\-Ar\-Ar Ar\-Ar\-Ar\-Ar.HBA Ar\-Ar\-
\&    Ar\-HBD Ar\-Ar\-Ar\-Hal Ar\-Ar\-Ar\-None Ar\-Ar\-Ar.HBA\-Ar Ar\-Ar\-Ar.HBA\-None Ar
\&    \-Ar\-HBD\-None Ar\-Ar\-None\-HBA Ar\-Ar\-None\-HBD Ar\-Ar\-None\-None Ar\-Ar.H...;
\&    32 5 2 2 3 3 3 2 2 2 2 1 2 1 1 1 2 1 1 1 1 3 1 1 1 3
\&
\&    FingerprintsVector;TopologicalAtomTorsions:MMFF94AtomTypes;43;Numerica
\&    lValues;IDsAndValuesString;C5A\-C5B\-C5B\-C5A C5A\-C5B\-C5B\-C=ON C5A\-C5B\-C5
\&    B\-CB C5A\-C5B\-C=ON\-NC=O C5A\-C5B\-C=ON\-O=CN C5A\-C5B\-CB\-CB C5A\-CB\-CB\-CB C5
\&    A\-N5\-C5A\-C5B C5A\-N5\-C5A\-CB C5A\-N5\-C5A\-CR C5A\-N5\-CR\-CR C5B\-C5A\-CB\-C...;
\&    1 1 1 1 1 2 2 2 1 1 2 2 2 2 1 1 2 1 1 2 1 2 1 1 1 2 1 1 1 2 18 2 2 1 1
\&    1 1 2 1 1 3 1 3
\&
\&    FingerprintsVector;TopologicalAtomTorsions:SLogPAtomTypes;49;Numerical
\&    Values;IDsAndValuesPairsString;C1\-C10\-N11\-C20 1 C1\-C10\-N11\-C21 1 C1\-C1
\&    1\-C21\-C21 2 C1\-C11\-C21\-N11 2 C1\-CS\-C1\-C10 1 C1\-CS\-C1\-C5 1 C1\-CS\-C1\-CS
\&    2 C10\-C1\-CS\-O2 1 C10\-N11\-C20\-C20 2 C10\-N11\-C21\-C11 1 C10\-N11\-C21\-C21 1
\&    C11\-C21\-C21\-C20 1 C11\-C21\-C21\-C5 1 C11\-C21\-N11\-C20 1 C14\-C18\-C18\-C20
\&    2 C18\-C14\-C18\-C18 2 C18\-C18\-C14\-F 2 C18\-C18\-C18\-C18 4 C18\-C18\-C18\-C...
\&
\&    FingerprintsVector;TopologicalAtomTorsions:SYBYLAtomTypes;26;Numerical
\&    Values;IDsAndValuesPairsString;C.2\-C.3\-C.3\-C.3 1 C.2\-C.3\-C.3\-O.3 1 C.2
\&    \-C.ar\-C.ar\-C.3 1 C.2\-C.ar\-C.ar\-C.ar 2 C.2\-C.ar\-C.ar\-N.ar 1 C.2\-N.am\-C.
\&    ar\-C.ar 2 C.3\-C.3\-C.2\-O.co2 2 C.3\-C.3\-C.3\-C.3 3 C.3\-C.3\-C.3\-N.ar 1 C.3
\&    \-C.3\-C.3\-O.3 3 C.3\-C.3\-C.ar\-C.ar 2 C.3\-C.3\-C.ar\-N.ar 2 C.3\-C.3\-N.ar\-C.
\&    ar 2 C.3\-C.ar\-C.ar\-C.ar 1 C.3\-C.ar\-N.ar\-C.3 1 C.3\-C.ar\-N.ar\-C.ar 1 ...
\&
\&    FingerprintsVector;TopologicalAtomTorsions:TPSAAtomTypes;8;NumericalVa
\&    lues;IDsAndValuesPairsString;N21\-None\-None\-None 9 N7\-None\-None\-None 4
\&    None\-N21\-None\-None 10 None\-N7\-None\-None 3 None\-N7\-None\-O3 1 None\-None\-
\&    None\-None 44 None\-None\-None\-O3 3 None\-None\-None\-O4 5
\&
\&    FingerprintsVector;TopologicalAtomTorsions:UFFAtomTypes;27;NumericalVa
\&    lues;IDsAndValuesPairsString;C_2\-C_3\-C_3\-C_3 1 C_2\-C_3\-C_3\-O_3 1 C_2\-C
\&    _R\-C_R\-C_3 1 C_2\-C_R\-C_R\-C_R 2 C_2\-C_R\-C_R\-N_R 1 C_2\-N_3\-C_R\-C_R 2 C_3
\&    \-C_3\-C_2\-O_2 1 C_3\-C_3\-C_2\-O_3 1 C_3\-C_3\-C_3\-C_3 3 C_3\-C_3\-C_3\-N_R 1 C
\&    _3\-C_3\-C_3\-O_3 3 C_3\-C_3\-C_R\-C_R 2 C_3\-C_3\-C_R\-N_R 2 C_3\-C_3\-N_R\-C_R 2
\&     C_3\-C_R\-C_R\-C_R 1 C_3\-C_R\-N_R\-C_3 1 C_3\-C_R\-N_R\-C_R 1 C_3\-N_R\-C_R\-...
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 2
\&    $NewTopologicalAtomTorsionsFingerprints = new TopologicalAtomTorsionsFingerprints(
\&                                                   %NamesAndValues);
.Ve
.Sp
Using specified \fITopologicalAtomTorsionsFingerprints\fR property names and values hash, \fBnew\fR
method creates a new object and returns a reference to newly created \fBTopologicalAtomTorsionsFingerprints\fR
object. By default, the following properties are initialized:
.Sp
.Vb 5
\&    Molecule = \*(Aq\*(Aq
\&    Type = \*(AqTopologicalAtomTorsions\*(Aq
\&    AtomIdentifierType = \*(Aq\*(Aq
\&    AtomicInvariantsToUse = [\*(AqAS\*(Aq, \*(AqX\*(Aq, \*(AqBO\*(Aq, \*(AqH\*(Aq, \*(AqFC\*(Aq]
\&    FunctionalClassesToUse = [\*(AqHBD\*(Aq, \*(AqHBA\*(Aq, \*(AqPI\*(Aq, \*(AqNI\*(Aq, \*(AqAr\*(Aq, \*(AqHal\*(Aq]
.Ve
.Sp
Examples:
.Sp
.Vb 4
\&    $TopologicalAtomTorsionsFingerprints = new TopologicalAtomTorsionsFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqAtomIdentifierType\*(Aq =>
\&                                              \*(AqAtomicInvariantsAtomTypes\*(Aq);
\&
\&    $TopologicalAtomTorsionsFingerprints = new TopologicalAtomTorsionsFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqAtomIdentifierType\*(Aq =>
\&                                              \*(AqAtomicInvariantsAtomTypes\*(Aq,
\&                              \*(AqAtomicInvariantsToUse\*(Aq =>
\&                                              [\*(AqAS\*(Aq, \*(AqX\*(Aq, \*(AqBO\*(Aq, \*(AqH\*(Aq, \*(AqFC\*(Aq] );
\&
\&    $TopologicalAtomTorsionsFingerprints = new TopologicalAtomTorsionsFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqAtomIdentifierType\*(Aq =>
\&                                              \*(AqDREIDINGAtomTypes\*(Aq);
\&
\&    $TopologicalAtomTorsionsFingerprints = new TopologicalAtomTorsionsFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqAtomIdentifierType\*(Aq =>
\&                                              \*(AqSYBYLAtomTypes\*(Aq);
\&
\&    $TopologicalAtomTorsionsFingerprints = new TopologicalAtomTorsionsFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqAtomIdentifierType\*(Aq =>
\&                                              \*(AqSLogPAtomTypes\*(Aq);
\&
\&    $TopologicalAtomTorsionsFingerprints = new TopologicalAtomTorsionsFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqAtomIdentifierType\*(Aq =>
\&                                              \*(AqFunctionalClassAtomTypes\*(Aq,
\&                              \*(AqFunctionalClassesToUse\*(Aq =>
\&                                              [\*(AqHBD\*(Aq, \*(AqHBA\*(Aq, \*(AqPI\*(Aq, \*(AqNI\*(Aq, \*(AqAr\*(Aq, \*(AqHal\*(Aq] );
\&
\&
\&    $TopologicalAtomTorsionsFingerprints\->GenerateFingerprints();
\&    print "$TopologicalAtomTorsionsFingerprints\en";
.Ve
.IP "\fBGetDescription\fR" 4
.IX Item "GetDescription"
.Vb 1
\&    $Description = $TopologicalAtomTorsionsFingerprints\->GetDescription();
.Ve
.Sp
Returns a string containing description of topological atom torsions fingerprints.
.IP "\fBGenerateFingerprints\fR" 4
.IX Item "GenerateFingerprints"
.Vb 1
\&    $TopologicalAtomTorsionsFingerprints\->GenerateFingerprints();
.Ve
.Sp
Generates topological atom torsions fingerprints and returns \fITopologicalAtomTorsionsFingerprints\fR.
.IP "\fBGetAtomTorsionsIDs\fR" 4
.IX Item "GetAtomTorsionsIDs"
.Vb 2
\&    $AtomPairIDsRef = $TopologicalAtomTorsionsFingerprints\->GetAtomTorsionsIDs();
\&    @AtomPairIDs = $TopologicalAtomTorsionsFingerprints\->GetAtomTorsionsIDs();
.Ve
.Sp
Returns atom torsion IDs corresponding to atom torsion count values in topological atom torsions
fingerprints vector as an array or reference to an array.
.IP "\fBSetAtomIdentifierType\fR" 4
.IX Item "SetAtomIdentifierType"
.Vb 1
\&    $TopologicalAtomTorsionsFingerprints\->SetAtomIdentifierType($IdentifierType);
.Ve
.Sp
Sets atom \fIIdentifierType\fR to use during atom torsions fingerprints generation and
returns \fITopologicalAtomTorsionsFingerprints\fR.
.Sp
Possible values: \fIAtomicInvariantsAtomTypes, DREIDINGAtomTypes, EStateAtomTypes,
FunctionalClassAtomTypes, MMFF94AtomTypes, SLogPAtomTypes, SYBYLAtomTypes,
TPSAAtomTypes, UFFAtomTypes\fR.
.IP "\fBSetAtomicInvariantsToUse\fR" 4
.IX Item "SetAtomicInvariantsToUse"
.Vb 2
\&    $TopologicalAtomTorsionsFingerprints\->SetAtomicInvariantsToUse($ValuesRef);
\&    $TopologicalAtomTorsionsFingerprints\->SetAtomicInvariantsToUse(@Values);
.Ve
.Sp
Sets atomic invariants to use during \fIAtomicInvariantsAtomTypes\fR value of \fIAtomIdentifierType\fR
for topological atom torsions fingerprints generation and returns \fITopologicalAtomTorsionsFingerprints\fR.
.Sp
Possible values for atomic invariants are: \fI\s-1AS, X, BO,  LBO, SB, DB, TB,
H,\s0 Ar, \s-1RA, FC, MN, SM\s0\fR. Default value: \fI\s-1AS,X,BO,H,FC\s0\fR.
.Sp
The atomic invariants abbreviations correspond to:
.Sp
.Vb 1
\&    AS = Atom symbol corresponding to element symbol
\&
\&    X<n>   = Number of non\-hydrogen atom neighbors or heavy atoms
\&    BO<n> = Sum of bond orders to non\-hydrogen atom neighbors or heavy atoms
\&    LBO<n> = Largest bond order of non\-hydrogen atom neighbors or heavy atoms
\&    SB<n> = Number of single bonds to non\-hydrogen atom neighbors or heavy atoms
\&    DB<n> = Number of double bonds to non\-hydrogen atom neighbors or heavy atoms
\&    TB<n> = Number of triple bonds to non\-hydrogen atom neighbors or heavy atoms
\&    H<n>   = Number of implicit and explicit hydrogens for atom
\&    Ar     = Aromatic annotation indicating whether atom is aromatic
\&    RA     = Ring atom annotation indicating whether atom is a ring
\&    FC<+n/\-n> = Formal charge assigned to atom
\&    MN<n> = Mass number indicating isotope other than most abundant isotope
\&    SM<n> = Spin multiplicity of atom. Possible values: 1 (singlet), 2 (doublet) or
\&            3 (triplet)
.Ve
.Sp
Atom type generated by AtomTypes::AtomicInvariantsAtomTypes class corresponds to:
.Sp
.Vb 1
\&    AS.X<n>.BO<n>.LBO<n>.<SB><n>.<DB><n>.<TB><n>.H<n>.Ar.RA.FC<+n/\-n>.MN<n>.SM<n>
.Ve
.Sp
Except for \s-1AS\s0 which is a required atomic invariant in atom types, all other atomic invariants are
optional. Atom type specification doesn't include atomic invariants with zero or undefined values.
.Sp
In addition to usage of abbreviations for specifying atomic invariants, the following descriptive words
are also allowed:
.Sp
.Vb 12
\&    X : NumOfNonHydrogenAtomNeighbors or NumOfHeavyAtomNeighbors
\&    BO : SumOfBondOrdersToNonHydrogenAtoms or SumOfBondOrdersToHeavyAtoms
\&    LBO : LargestBondOrderToNonHydrogenAtoms or LargestBondOrderToHeavyAtoms
\&    SB :  NumOfSingleBondsToNonHydrogenAtoms or NumOfSingleBondsToHeavyAtoms
\&    DB : NumOfDoubleBondsToNonHydrogenAtoms or NumOfDoubleBondsToHeavyAtoms
\&    TB : NumOfTripleBondsToNonHydrogenAtoms or NumOfTripleBondsToHeavyAtoms
\&    H :  NumOfImplicitAndExplicitHydrogens
\&    Ar : Aromatic
\&    RA : RingAtom
\&    FC : FormalCharge
\&    MN : MassNumber
\&    SM : SpinMultiplicity
.Ve
.Sp
\&\fIAtomTypes::AtomicInvariantsAtomTypes\fR module is used to assign atomic invariant
atom types.
.IP "\fBSetFunctionalClassesToUse\fR" 4
.IX Item "SetFunctionalClassesToUse"
.Vb 2
\&    $TopologicalTorsionsFingerprints\->SetFunctionalClassesToUse($ValuesRef);
\&    $TopologicalTorsionsFingerprints\->SetFunctionalClassesToUse(@Values);
.Ve
.Sp
Sets functional classes invariants to use during \fIFunctionalClassAtomTypes\fR value of \fIAtomIdentifierType\fR
for topological atom torsions fingerprints generation and returns \fITopologicalAtomTorsionsFingerprints\fR.
.Sp
Possible values for atom functional classes are: \fIAr, \s-1CA, H, HBA, HBD,\s0 Hal, \s-1NI, PI, RA\s0\fR.
Default value [ Ref 24 ]: \fI\s-1HBD,HBA,PI,NI\s0,Ar,Hal\fR.
.Sp
The functional class abbreviations correspond to:
.Sp
.Vb 9
\&    HBD: HydrogenBondDonor
\&    HBA: HydrogenBondAcceptor
\&    PI :  PositivelyIonizable
\&    NI : NegativelyIonizable
\&    Ar : Aromatic
\&    Hal : Halogen
\&    H : Hydrophobic
\&    RA : RingAtom
\&    CA : ChainAtom
\&
\& Functional class atom type specification for an atom corresponds to:
\&
\&    Ar.CA.H.HBA.HBD.Hal.NI.PI.RA or None
.Ve
.Sp
\&\fIAtomTypes::FunctionalClassAtomTypes\fR module is used to assign functional class atom
types. It uses following definitions [ Ref 60\-61, Ref 65\-66 ]:
.Sp
.Vb 4
\&    HydrogenBondDonor: NH, NH2, OH
\&    HydrogenBondAcceptor: N[!H], O
\&    PositivelyIonizable: +, NH2
\&    NegativelyIonizable: \-, C(=O)OH, S(=O)OH, P(=O)OH
.Ve
.IP "\fBStringifyTopologicalAtomTorsionsFingerprints\fR" 4
.IX Item "StringifyTopologicalAtomTorsionsFingerprints"
.Vb 2
\&    $String = $TopologicalAtomTorsionsFingerprints\->
\&                  StringifyTopologicalAtomTorsionsFingerprints();
.Ve
.Sp
Returns a string containing information about \fITopologicalAtomTorsionsFingerprints\fR object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Fingerprints.pm, FingerprintsStringUtil.pm, AtomNeighborhoodsFingerprints.pm,
AtomTypesFingerprints.pm, EStateIndiciesFingerprints.pm, ExtendedConnectivityFingerprints.pm,
MACCSKeys.pm, PathLengthFingerprints.pm, TopologicalAtomPairsFingerprints.pm,
TopologicalAtomTripletsFingerprints.pm, TopologicalPharmacophoreAtomPairsFingerprints.pm,
TopologicalPharmacophoreAtomTripletsFingerprints.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
