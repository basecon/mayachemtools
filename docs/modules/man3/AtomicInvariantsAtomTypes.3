.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AtomicInvariantsAtomTypes 1"
.TH AtomicInvariantsAtomTypes 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AtomicInvariantsAtomTypes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use AtomTypes::AtomicInvariantsAtomTypes;
.PP
use AtomTypes::AtomicInvariantsAtomTypes qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBAtomicInvariantsAtomTypes\fR class provides the following methods:
.PP
new, AssignAtomTypes, GetAtomicInvariantsOrder, GetAvailableAtomicInvariants,
IsAtomicInvariantAvailable, SetAtomicInvariantsToUse, StringifyAtomicInvariantsAtomTypes
.PP
The following functions are available:
.PP
GetAvailableAtomicInvariants, IsAtomicInvariantAvailable
.PP
\&\fBAtomicInvariantsAtomTypes\fR is derived from \fBAtomTypes\fR class which in turn
is  derived from \fBObjectProperty\fR base class that provides methods not explicitly defined
in \fBAtomicInvariantsAtomTypes\fR, \fBAtomTypes\fR or \fBObjectProperty\fR classes using Perl's
\&\s-1AUTOLOAD\s0 functionality. These methods are generated on-the-fly for a specified object property:
.PP
.Vb 3
\&    Set<PropertyName>(<PropertyValue>);
\&    $PropertyValue = Get<PropertyName>();
\&    Delete<PropertyName>();
.Ve
.PP
Possible values for atomic invariants are: \fI\s-1AS, X, BO,  LBO, SB, DB, TB,
H,\s0 Ar, \s-1RA, FC, MN, SM\s0\fR. Default atom invariants values: \fI\s-1AS,X,BO,H,FC\s0\fR.
.PP
The atomic invariants abbreviations correspond to:
.PP
.Vb 1
\&    AS = Atom symbol corresponding to element symbol
\&
\&    X<n>   = Number of non\-hydrogen atom neighbors or heavy atoms
\&    BO<n> = Sum of bond orders to non\-hydrogen atom neighbors or heavy atoms
\&    LBO<n> = Largest bond order of non\-hydrogen atom neighbors or heavy atoms
\&    SB<n> = Number of single bonds to non\-hydrogen atom neighbors or heavy atoms
\&    DB<n> = Number of double bonds to non\-hydrogen atom neighbors or heavy atoms
\&    TB<n> = Number of triple bonds to non\-hydrogen atom neighbors or heavy atoms
\&    H<n>   = Number of implicit and explicit hydrogens for atom
\&    Ar     = Aromatic annotation indicating whether atom is aromatic
\&    RA     = Ring atom annotation indicating whether atom is a ring
\&    FC<+n/\-n> = Formal charge assigned to atom
\&    MN<n> = Mass number indicating isotope other than most abundant isotope
\&    SM<n> = Spin multiplicity of atom. Possible values: 1 (singlet), 2 (doublet) or
\&            3 (triplet)
.Ve
.PP
Atom type generated by AtomTypes::AtomTypes::AtomicInvariantsAtomTypes class corresponds to:
.PP
.Vb 1
\&    AS.X<n>.BO<n>.LBO<n>.<SB><n>.<DB><n>.<TB><n>.H<n>.Ar.RA.FC<+n/\-n>.MN<n>.SM<n>
.Ve
.PP
Except for \s-1AS\s0 which is a required atomic invariant in atom types, all other atomic invariants are
optional. Atom type specification doesn't include atomic invariants with zero or undefined values.
.PP
In addition to usage of abbreviations for specifying atomic invariants, the following descriptive words
are also allowed:
.PP
.Vb 12
\&    X : NumOfNonHydrogenAtomNeighbors or NumOfHeavyAtomNeighbors
\&    BO : SumOfBondOrdersToNonHydrogenAtoms or SumOfBondOrdersToHeavyAtoms
\&    LBO : LargestBondOrderToNonHydrogenAtoms or LargestBondOrderToHeavyAtoms
\&    SB :  NumOfSingleBondsToNonHydrogenAtoms or NumOfSingleBondsToHeavyAtoms
\&    DB : NumOfDoubleBondsToNonHydrogenAtoms or NumOfDoubleBondsToHeavyAtoms
\&    TB : NumOfTripleBondsToNonHydrogenAtoms or NumOfTripleBondsToHeavyAtoms
\&    H :  NumOfImplicitAndExplicitHydrogens
\&    Ar : Aromatic
\&    RA : RingAtom
\&    FC : FormalCharge
\&    MN : MassNumber
\&    SM : SpinMultiplicity
\&
\& Notes:
\&
\&    . AtomicInvariants with zero or undefined values are not shown.
\&    . LBO with value of 1 is not shown. And absence of LBO in AtomTypes
\&      implies the largest bond order value is one.
\&    . SB, DB and TB with values of zero are not shown.
\&    . The difference in BO and X values corresponds to numbed of pi electrons [ Ref 57 ].
.Ve
.PP
Examples of atomic invariant atom types:
.PP
.Vb 8
\&    . O.X1.BO1.H1 \- Hydroxyl oxygen in carboxylate with attached hydrogen
\&      and no explicit charge
\&    . O.X1.BO1.FC\-1 \- Hydroxyl ozygen in carboxylate with explicit negative
\&      charge
\&    . O.X1.BO2 \- Carbonyl oxygen in carboxylate with double bond to carbon
\&    . O.X2.BO2 \- Hydroxyl ozygen in carboxylate attached to carbonyl carbon
\&      and another heavy atom
\&    . C.X2.BO3.H1.Ar \- Aromatic carbon
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 2
\&    $NewAtomicInvariantsAtomTypes = new AtomTypes::AtomicInvariantsAtomTypes(
\&                                                   %NamesAndValues);
.Ve
.Sp
Using specified \fIAtomicInvariantsAtomTypes\fR property names and values hash, \fBnew\fR
method creates a new object and returns a reference to newly created \fBAtomicInvariantsAtomTypes\fR
object. By default, the following properties are initialized:
.Sp
.Vb 4
\&    Molecule = \*(Aq\*(Aq
\&    Type = \*(AqAtomicInvariants\*(Aq
\&    IgnoreHydrogens = 0
\&    AtomicInvariantsToUse = AS,X,BO,H,FC
.Ve
.Sp
Examples:
.Sp
.Vb 5
\&    $AtomicInvariantsAtomTypes = new AtomTypes::AtomicInvariantsAtomTypes(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqIgnoreHydrogens\*(Aq => 0,
\&                              \*(AqAtomicInvariantsToUse\*(Aq =>
\&                                         [\*(AqAS\*(Aq, \*(AqX\*(Aq, \*(AqBO\*(Aq, \*(AqH\*(Aq, \*(AqFC\*(Aq]);
.Ve
.IP "\fBAssignAtomTypes\fR" 4
.IX Item "AssignAtomTypes"
.Vb 1
\&    $AtomicInvariantsAtomTypes\->AssignAtomTypes();
.Ve
.Sp
Assigns atomic invariant atom types to all the atoms in a molecule and returns
\&\fIAtomicInvariantsAtomTypes\fR.
.IP "\fBGetAtomicInvariantsOrder\fR" 4
.IX Item "GetAtomicInvariantsOrder"
.Vb 2
\&    @AtomicInvariantsOrder = $AtomicInvariantsAtomTypes\->
\&                             GetAtomicInvariantsOrder();
.Ve
.Sp
Returns an array obtaining order of atomic invariants used to generate atom types.
.IP "\fBGetAvailableAtomicInvariants\fR" 4
.IX Item "GetAvailableAtomicInvariants"
.Vb 2
\&    %AvailableAtomicInvariants = $AtomicInvariantsAtomTypes\->
\&                                 GetAvailableAtomicInvariants();
.Ve
.Sp
Returns available atomic invariants as a hash containing available atomic invariants
and their description as key/value pairs.
.IP "\fBIsAtomTypesAssignmentSuccessful\fR" 4
.IX Item "IsAtomTypesAssignmentSuccessful"
.Vb 1
\&    $Status = $AtomTypes\->IsAtomTypesAssignmentSuccessful();
.Ve
.Sp
Returns 1 or 0 based on whether atom types assignment was successfully performed.
This method overrides the same method available in the base class AtomTypes.pm used
to derived this class.
.IP "\fBIsAtomicInvariantAvailable\fR" 4
.IX Item "IsAtomicInvariantAvailable"
.Vb 4
\&    $Status = $AtomicInvariantsAtomTypes\->
\&              IsAtomicInvariantAvailable($AtomicInvariant);
\&    $Status = AtomTypes::AtomicInvariantsAtomTypes::
\&              IsAtomicInvariantAvailable($AtomicInvariant);
.Ve
.Sp
Returns 1 or 0 based on whether \fIAtomicInvariant\fR is valid.
.IP "\fBSetAtomicInvariantsToUse\fR" 4
.IX Item "SetAtomicInvariantsToUse"
.Vb 2
\&    $AtomicInvariantsAtomTypes\->SetAtomicInvariantsToUse($ValuesRef);
\&    $AtomicInvariantsAtomTypes\->SetAtomicInvariantsToUse(@Values);
.Ve
.Sp
Sets atomic invariants to use for generating and assigning atom types and returns
\&\fIAtomicInvariantsAtomTypes\fR.
.IP "\fBStringifyAtomicInvariantsAtomTypes\fR" 4
.IX Item "StringifyAtomicInvariantsAtomTypes"
.Vb 1
\&    $String = $AtomicInvariantsAtomTypes\->StringifyAtomicInvariantsAtomTypes();
.Ve
.Sp
Returns a string containing information about \fIAtomicInvariantsAtomTypes\fR object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AtomTypes.pm, DREIDINGAtomTypes.pm, EStateAtomTypes.pm,
FunctionalClassAtomTypes.pm, MMFF94AtomTypes.pm, SLogPAtomTypes.pm,
SYBYLAtomTypes.pm, TPSAAtomTypes.pm, UFFAtomTypes.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
