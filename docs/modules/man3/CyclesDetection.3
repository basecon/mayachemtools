.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CyclesDetection 1"
.TH CyclesDetection 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CyclesDetection
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Graph::CyclesDetection;
.PP
use Graph::CyclesDetection qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBCyclesDetection\fR class provides the following methods:
.PP
new, Copy, DetectCycles, DetectCyclesUsingCollapsingPathGraphMethodology,
GetAllCyclicPaths, GetIndependentCyclicPaths, StringifyCyclesDetection
.PP
Cycles in a \fBGraph\fR are detected using collapsing path graph [Ref 31]
methodology.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 1
\&    $NewCyclesDetection = new Graph::CyclesDetection($Graph);
.Ve
.Sp
Using specified \fIGraph\fR, \fBnew\fR method creates a new \fBCyclesDetection\fR object and returns
newly created \fBCyclesDetection\fR object.
.IP "\fBCopy\fR" 4
.IX Item "Copy"
.Vb 1
\&    $NewCyclesDetection = $CyclesDetection\->Copy();
.Ve
.Sp
Copies \fICyclesDetection\fR and its associated data using \fBStorable::dclone\fR and returns a new
\&\fBCyclesDetection\fR object.
.IP "\fBDetectCycles\fR" 4
.IX Item "DetectCycles"
.Vb 1
\&    $CyclesDetection\->DetectCycles();
.Ve
.Sp
Detects all cycles in a graph and returns \fICyclesDetection\fR.
.IP "\fBDetectCyclesUsingCollapsingPathGraphMethodology\fR" 4
.IX Item "DetectCyclesUsingCollapsingPathGraphMethodology"
.Vb 1
\&    $CyclesDetection\->DetectCyclesUsingCollapsingPathGraphMethodology();
.Ve
.Sp
Detects all cycles in a graph using collapsing path graph [Ref 31] methodology
and returns \fICyclesDetection\fR.
.IP "\fBGetAllCyclicPaths\fR" 4
.IX Item "GetAllCyclicPaths"
.Vb 2
\&    @AllCyclicPaths = $CyclesDetection\->GetAllCyclicPaths();
\&    $NumOfAllCyclicPaths = $CyclesDetection\->GetAllCyclicPaths();
.Ve
.Sp
Returns an array containing references to all cyclic paths identified during cycles
detection. In scalar text, number of cycles is returned.
.IP "\fBGetIndependentCyclicPaths\fR" 4
.IX Item "GetIndependentCyclicPaths"
.Vb 2
\&    @IndependentCyclicPaths = $CyclesDetection\->GetAllCyclicPaths();
\&    $NumOfIndependentCyclicPaths = $CyclesDetection\->GetAllCyclicPaths();
.Ve
.Sp
Returns an array containing references to independent cyclic paths identified during cycles
detection. In scalar text, number of cycles is returned.
.Sp
A set of independent cycles identified during cycles detection doesn't correspond to the basis set of
rings or smallest set of smallest rings (\s-1SSSR\s0) [ Refs 29\-30 ]; instead, set of cycles indentified
as independent cycles simply correpond to cycles which contain no other cycle as their
subcycles and can't be described as a linear combination of smaller cycles. And it also happens
to contain all the rings in basis set of rings and \s-1SSSR.\s0 In other words, it's a superset of a basis set
of cycles and \s-1SSSR.\s0 For example, six four membered cycles are indentified for cubane, which is one
more than the basis set of cycles.
.IP "\fBStringifyCyclesDetection\fR" 4
.IX Item "StringifyCyclesDetection"
.Vb 1
\&    $String = $CyclesDetection\->StringifyCyclesDetection();
.Ve
.Sp
Returns a string containing information about \fICyclesDetection\fR object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Graph.pm, Path.pm, PathGraph.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
