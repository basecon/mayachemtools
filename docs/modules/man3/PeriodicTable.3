.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PeriodicTable 1"
.TH PeriodicTable 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PeriodicTable
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use PeriodicTable;
.PP
use PeriodicTable qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBPeriodicTable\fR module provides the following functions:
.PP
GetElementMostAbundantNaturalIsotopeData,
GetElementMostAbundantNaturalIsotopeMass,
GetElementMostAbundantNaturalIsotopeMassNumber, GetElementNaturalIsotopeAbundance,
GetElementNaturalIsotopeCount, GetElementNaturalIsotopeMass,
GetElementNaturalIsotopesData, GetElementPropertiesData,
GetElementPropertiesNames, GetElementPropertiesNamesAndUnits,
GetElementPropertyUnits, GetElements, GetElementsByAmericanStyleGroupLabel,
GetElementsByEuropeanStyleGroupLabel, GetElementsByGroupName,
GetElementsByGroupNumber, GetElementsByPeriodNumber,
GetIUPACGroupNumberFromAmericanStyleGroupLabel,
GetIUPACGroupNumberFromEuropeanStyleGroupLabel, IsElement,
IsElementNaturalIsotopeMassNumber, IsElementProperty
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBGetElements\fR" 4
.IX Item "GetElements"
.Vb 2
\&    @ElementSymbols = GetElements();
\&    $ElementSymbolsRef = GetElements();
.Ve
.Sp
Returns an array or a reference to an array of known element symbols
.IP "\fBGetElementsByGroupName\fR" 4
.IX Item "GetElementsByGroupName"
.Vb 2
\&    @ElementSymbols = GetElementsByGroupName($GroupName);
\&    $ElementSymbolsRef = GetElementsByGroupName($GroupName);
.Ve
.Sp
Returns an array or a reference to an array of element symbols for a specified \fIGroupName\fR.
Supported \fIGroupName\fR values are: \fIAlkali metals, Alkaline earth metals, Coinage metals, Pnictogens,
Chalcogens, Halogens, Noble gases\fR; Additionally, usage of \fILanthanides\fR (Lanthanoids)
and \fIActinides\fR (Actinoids) is also supported.
.IP "\fBGetElementsByGroupNumber\fR" 4
.IX Item "GetElementsByGroupNumber"
.Vb 2
\&    @ElementSymbols = GetElementsByGroupNumber($GroupNumber);
\&    $ElementSymbolsRef = GetElementsByGroupNumber($GroupNumber);
.Ve
.Sp
Returns an array or a reference to an array of element symbols for a specified \fIGroupNumber\fR
.IP "\fBGetElementsByAmericanStyleGroupLabel\fR" 4
.IX Item "GetElementsByAmericanStyleGroupLabel"
.Vb 2
\&    @ElementSymbols = GetElementsByAmericanStyleGroupLabel($GroupLabel);
\&    $ElementSymbolsRef = GetElementsByAmericanStyleGroupLabel($GroupLabel);
.Ve
.Sp
Returns an array or a reference to an array of element symbols for a specified American
style \fIGroupLabel\fR. Valid values for Amercian style group labels: \fI\s-1IA\s0 to \s-1VIIIA, IB\s0 to \s-1VIIIB, VIII\s0\fR.
.IP "\fBGetElementsByEuropeanStyleGroupLabel\fR" 4
.IX Item "GetElementsByEuropeanStyleGroupLabel"
.Vb 2
\&    @ElementSymbols = GetElementsByEuropeanStyleGroupLabel($GroupLabel);
\&    $ElementSymbolsRef = GetElementsByEuropeanStyleGroupLabel($GroupLabel);
.Ve
.Sp
Returns an array or a reference to an array of element symbols for a specified European
style \fIGroupLabel\fR. Valid values for European style group labels: \fI\s-1IA\s0 to \s-1VIIIA, IB\s0 to \s-1VIIIB, VIII\s0\fR.
.IP "\fBGetElementsByPeriodNumber\fR" 4
.IX Item "GetElementsByPeriodNumber"
.Vb 2
\&    @ElementSymbols = GetElementsByPeriodNumber($PeriodNumber);
\&    $ElementSymbolsRef = GetElementsByPeriodNumber($PeriodNumber);
.Ve
.Sp
Returns an array or a reference to an array of element symbols for a specified \fIPeriodNumber\fR.
.IP "\fBGetElementMostAbundantNaturalIsotopeData\fR" 4
.IX Item "GetElementMostAbundantNaturalIsotopeData"
.Vb 4
\&    @IsotopeData = GetElementMostAbundantNaturalIsotopeData(
\&                   $ElementID);
\&    $IsotopeDataRef = GetElementMostAbundantNaturalIsotopeData(
\&                   $ElementID);
.Ve
.Sp
Returns an array or reference to an array containing data for most abundant isotope of
an element specfied by element symbol or atomic number. Isotope data arrays contain these
values: \fIAtomicNumber, IsotopeSymbol, MassNumber, RelativeAtomicMass, and NaturalAbundance\fR.
.IP "\fBGetElementMostAbundantNaturalIsotopeMassNumber\fR" 4
.IX Item "GetElementMostAbundantNaturalIsotopeMassNumber"
.Vb 1
\&    $MassNumber = GetElementMostAbundantNaturalIsotopeMassNumber($ElementID);
.Ve
.Sp
Returns mass number of most abundant natural isotope of an element specfied by element
symbol or atomic number
.IP "\fBGetElementNaturalIsotopeCount\fR" 4
.IX Item "GetElementNaturalIsotopeCount"
.Vb 1
\&    $IsotopeCount = GetElementNaturalIsotopeCount($ElementID);
.Ve
.Sp
Returns natural isotope count for an element specfied by element symbol or
atomic number
.IP "\fBGetElementNaturalIsotopesData\fR" 4
.IX Item "GetElementNaturalIsotopesData"
.Vb 2
\&    $DataHashRef = GetElementNaturalIsotopesData($ElementID,
\&                   [$MassNumber]);
.Ve
.Sp
Reurns a reference to a hash containingall available isotope data for an element specified
using element symbol or aromic number; an optional mass number indicates retrieve data
for a specific isotope
.IP "\fBGetElementNaturalIsotopeAbundance\fR" 4
.IX Item "GetElementNaturalIsotopeAbundance"
.Vb 2
\&    $Abundance = GetElementNaturalIsotopeAbundance($ElementID,
\&                 $MassNumber);
.Ve
.Sp
Returns percent abundance of natural isotope for an element with specfic mass
number.
.IP "\fBGetElementMostAbundantNaturalIsotopeMass\fR" 4
.IX Item "GetElementMostAbundantNaturalIsotopeMass"
.Vb 2
\&    $RelativeAtomicMass = GetElementMostAbundantNaturalIsotopeMass(
\&                          $ElementID);
.Ve
.Sp
Returns relative atomic mass of most abundant isotope for an element specified using
element symbol or aromic number.
.IP "\fBGetElementNaturalIsotopeMass\fR" 4
.IX Item "GetElementNaturalIsotopeMass"
.Vb 2
\&    $RelativeAtomicMass = GetElementNaturalIsotopeMass($ElementID,
\&                          $MassNumber);
.Ve
.Sp
Returns relative atomic mass of an element with specfic mass number.
.IP "\fBGetElementPropertiesData\fR" 4
.IX Item "GetElementPropertiesData"
.Vb 1
\&    $PropertyDataHashRef = GetElementPropertiesData($ElementID);
.Ve
.Sp
Returns a reference to a hash containing all available properties data for an element
specified using element symbol or atomic number.
.IP "\fBGetElementPropertyName\fR" 4
.IX Item "GetElementPropertyName"
.Vb 1
\&    $PropertyValue = GetElement<PropertyName>($ElementID);
.Ve
.Sp
Returns value of an element for a element specified using element symbol or atomic number.
.Sp
These functions are not defined in this modules; these are implemented on-the-fly using
Perl's \s-1AUTOLOAD\s0 funcionality.
.Sp
Here is the list of known element \fIproperty names\fR: AllenElectronegativity,
AllredRochowElectronegativity, AtomicNumber, AtomicRadiusCalculated,
AtomicRadiusEmpirical, AtomicWeight, Block, BoilingPoint, BondLength,
BrinellHardness, BulkModulus, Classification, CoefficientOfLinearExpansion, Color,
CommonValences, LowestCommonValence, HighestCommonValence,
CommonOxidationNumbers, LowestCommonOxidationNumber, HighestCommonOxidationNumber,
CovalentRadiusEmpirical, CriticalTemperature, DensityOfSolid, DiscoveredAt, DiscoveredBy,
DiscoveredWhen, ElectricalResistivity, ElectronAffinity, ElementName, ElementSymbol, EnthalpyOfAtmization,
EnthalpyOfFusion, EnthalpyOfVaporization, FirstIonizationEnergy, GroundStateConfiguration, GroundStateLevel,
GroupName, GroupNumber, NaturalIsotopeData, MeltingPoint, MineralHardness, MolarVolume,
MullikenJaffeElectronegativity, OriginOfName, PaulingElectronegativity, PeriodNumber, PoissonsRatio,
Reflectivity, RefractiveIndex, RigidityModulus, SandersonElectronegativity, StandardState,
SuperconductionTemperature, ThermalConductivity, VanderWaalsRadius, VelocityOfSound, VickersHardness,
YoungsModulus.
.IP "\fBGetElementPropertiesNames\fR" 4
.IX Item "GetElementPropertiesNames"
.Vb 2
\&    @PropertyNames = GetElementPropertiesNames([$Mode]);
\&    $PropertyNamesRef = GetElementPropertiesNames([$Mode]);
.Ve
.Sp
Returns names of all available element properties. Optional mode parameter controls
grouping of property names; Possible values: \fIByGroup or Alphabetical\fR. Default:
\&\fIByGroup\fR.
.IP "\fBGetElementPropertiesNamesAndUnits\fR" 4
.IX Item "GetElementPropertiesNamesAndUnits"
.Vb 1
\&    $NameUnitsHashRef = GetElementPropertiesNamesAndUnits();
.Ve
.Sp
Returns a reference to a hash of property names and units of all available element
properties. Names with no units contains empty strings.
.IP "\fBGetElementPropertyUnits\fR" 4
.IX Item "GetElementPropertyUnits"
.Vb 1
\&    $Units = GetElementPropertyUnits($PropertyName);
.Ve
.Sp
Returns units for a specific element property name. An empty string is returned for
a property with no units.
.IP "\fBGetIUPACGroupNumberFromAmericanStyleGroupLabel\fR" 4
.IX Item "GetIUPACGroupNumberFromAmericanStyleGroupLabel"
.Vb 2
\&    $GroupNumber = GetIUPACGroupNumberFromAmericanStyleGroupLabel(
\&                   $GroupLabel);
.Ve
.Sp
Returns \s-1IUPAC\s0 group numbers of a specific American style group label. A comma delimited
string is returned for group \s-1VIII\s0 or \s-1VIIIB.\s0
.IP "\fBGetIUPACGroupNumberFromEuropeanStyleGroupLabel\fR" 4
.IX Item "GetIUPACGroupNumberFromEuropeanStyleGroupLabel"
.Vb 2
\&    $GroupNumber = GetIUPACGroupNumberFromEuropeanStyleGroupLabel(
\&                   $GroupLabel);
.Ve
.Sp
Returns \s-1IUPAC\s0 group numbers of a specific European style group label. A comma delimited
string is returned for group \s-1VIII\s0 or \s-1VIIIA.\s0
.IP "\fBIsElement\fR" 4
.IX Item "IsElement"
.Vb 1
\&    $Status = IsElement($ElementID);
.Ve
.Sp
Returns 1 or 0 based on whether it's a known element symbol or atomic number.
.IP "\fBIsElementNaturalIsotopeMassNumber\fR" 4
.IX Item "IsElementNaturalIsotopeMassNumber"
.Vb 1
\&    $Status = IsElementNaturalIsotopeMassNumber($ElementID, $MassNumber);
.Ve
.Sp
Returns 1 or 0 based on whether it's a valid mass number for an element symbol
or atomic number.
.IP "\fBIsElementProperty\fR" 4
.IX Item "IsElementProperty"
.Vb 1
\&    $Status = IsElementProperty($PropertyName);
.Ve
.Sp
Returns 1 or 0 based on whether it's a valid property name.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AminoAcids.pm, NucleicAcids.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
