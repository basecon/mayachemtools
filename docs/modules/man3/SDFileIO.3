.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SDFileIO 1"
.TH SDFileIO 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SDFileIO
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use FileIO::SDFileIO;
.PP
use FileIO::SDFileIO qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSDFIleIO\fR class provides the following methods:
.PP
new, GenerateMoleculeString, IsSDFile, ParseMoleculeString, ReadMolecule,
ReadMoleculeString, WriteMolecule
.PP
The following methods can also be used as functions:
.PP
GenerateMoleculeString, IsSDFile, ParseMoleculeString
.PP
Data specific to \fBSDFileIO\fR class not directly used by \fBMolecule\fR, \fBAtom\fR and
\&\fBBond\fR objects \- data label/value pairs, atom SteroParity and so on \- is associated to
and retrieved from approptiate objects using following methods:
.PP
.Vb 2
\&    SetMDL<PropertyName>
\&    GetMDL<PropertyName>.
.Ve
.PP
\&\s-1SD\s0 data label and values are attached to \fBMolecule\fR object as a refernece to a hash
using SetDataFieldLabelAndValues and can be retrieved using GetDataFieldLabelAndValues
method.
.PP
\&\fBSDFileIO\fR class is derived from \fIFileIO\fR class and uses its methods to support
generic file related functionality.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 1
\&    $NewSDFileIO = new FileIO::SDFileIO(%NamesAndValues);
.Ve
.Sp
Using specified \fISDFileIO\fR property names and values hash, \fBnew\fR method creates a new object
and returns a reference to newly created \fBSDFileIO\fR object.
.IP "\fBGenerateMoleculeString\fR" 4
.IX Item "GenerateMoleculeString"
.Vb 2
\&    $MoleculeString = $SDFileIO\->GenerateMoleculeString($Molecule);
\&    $MoleculeString = FileIO::SDFileIO::GenerateMoleculeString($Molecule);
.Ve
.Sp
Returns a \fBMoleculeString\fR in \s-1SD\s0 format corresponding to \fIMolecule\fR.
.IP "\fBIsSDFile\fR" 4
.IX Item "IsSDFile"
.Vb 2
\&    $Status = $SDFileIO\->IsSDFile($FileName);
\&    $Status = FileIO::SDFileIO::IsSDFile($FileName);
.Ve
.Sp
Returns 1 or 0 based on whether \fIFileName\fR is a \s-1SD\s0 file.
.IP "\fBParseMoleculeString\fR" 4
.IX Item "ParseMoleculeString"
.Vb 2
\&    $Molecule = $SDFileIO\->ParseMoleculeString($MoleculeString);
\&    $Molecule = FileIO::SDFileIO::ParseMoleculeString($MoleculeString);
.Ve
.Sp
Parses \fIMoleculeString\fR and returns a \fBMolecule\fR object. \s-1SD\s0 data field label and value pairs
are associated to \fBMolecule\fR object as a reference to a hash using:
.Sp
.Vb 1
\&    $Molecule\->SetDataFieldLabelAndValues(\e%DataLabelsAndValues)
.Ve
.Sp
The reference to hash can be retrieved by:
.Sp
.Vb 4
\&    $DataLabelsAndValues = $Molecule\->GetDataFieldLabelAndValues();
\&    for $DataLabel (sort keys %{$DataLabelsAndValues}) {
\&        $DataValue = $DataLabelsAndValues\->{$DataLabel};
\&    }
.Ve
.IP "\fBReadMolecule\fR" 4
.IX Item "ReadMolecule"
.Vb 1
\&    $Molecule = $SDFileIO\->ReadMolecule($FileHandle);
.Ve
.Sp
Reads data for the next compound in a file using already opened \fIFileHandle\fR, creates,
and returns a \fBMolecule\fR object.
.IP "\fBReadMoleculeString\fR" 4
.IX Item "ReadMoleculeString"
.Vb 1
\&    $MoleculeString = $SDFileIO\->ReadMoleculeString($FileHandle);
.Ve
.Sp
Reads data for the next compound in a file using already opened \fIFileHandle\fR and
returns a \fBMoleculeString\fR corresponding to compound structure and other associated
data.
.IP "\fBWriteMolecule\fR" 4
.IX Item "WriteMolecule"
.Vb 1
\&    $SDFileIO\->WriteMolecule($Molecule);
.Ve
.Sp
Writes \fIMolecule\fR data to a file in MDLMol format and returns \fBSDFileIO\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MoleculeFileIO.pm, MDLMolFileIO.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
