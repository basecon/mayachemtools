.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SimpleCalcParser 1"
.TH SimpleCalcParser 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parsers::SimpleCalcParser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Parsers::SimpleCalcParser ;
.PP
use Parsers::SimpleCalcParser qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBParsers::SimpleCalcParser\fR class provides the following methods:
.PP
new, yyclearin, yyerrok, yyerror, yyparse
.PP
\&\fBParsers::SimpleCalcParse.yy\fR parser grammer definition file implements a simple
calculator and is provided to highlight usage of lexer capability available through
\&\fBParsers::SimpleCalcYYLexer\fR, which in turn uses \fBParsers::YYLexer\fR and
\&\fBParsers::Lexer\fR classes to procide underlying lexer functionality.
.PP
The parser package and token table files, \fBParsers::SimpleCalcParser.pm\fR and
\&\fBSimpleCalcParser.tab.ph\fR, are automatically generated from parser grammar definition
file, \fBParsers::SimpleCalcParser.yy\fR, using byacc available through perl\-byacc1.8 modified
with perl5\-byacc\-patches\-0.5 for generation of object oriented parser:
.PP
.Vb 2
\&    byacc \-l \-P \-d \-b SimpleCalcParser SimpleCalcParser.yy
\&    mv SimpleCalcParser.tab.pl SimpleCalcParser.pm
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 4
\&    $SimpleCalcParser = new Parsers::SimpleCalcParser($YYLex,
\&                                \e&Parsers::SimpleCalcParser::yyerror);
\&    $SimpleCalcParser = new Parsers::SimpleCalcParser($YYLex,
\&                                \e&Parsers::SimpleCalcParser::yyerror, $Debug);
.Ve
.Sp
Using specified \fIYYLex\fR \fIYYError\fR functions, \fBnew\fR method generates a new
\&\fBSimpleCalcParser\fR and returns a reference to newly created \fBSimpleCalcYYParser\fR object.
.Sp
Examples:
.Sp
.Vb 4
\&    # Input string...
\&    $InputText = "3 + 4 +6\enx=3\eny=5\enx+y\enx+z\en";
\&    $YYLexer = new Parsers::SimpleCalcYYLexer($InputText);
\&    $YYLex = $YYLexer\->GetYYLex();
\&
\&    $Debug = 0;
\&    $SimpleCalcParser = new Parsers::SimpleCalcParser($YYLex,
\&                               \e&Parsers::SimpleCalcParser::yyerror, $Debug);
\&    $Value = $SimpleCalcParser\->yyparse();
\&    print "Value = " . (defined($Value) ? "$Value" : "Undefined") . "\en";
\&
\&    # Input file...
\&    $InputFile = "TestSimpleCalcParser.txt";
\&    open INPUTFILE, "$InputFile" or die "Couldn\*(Aqt open $InputFile: $!\en";
\&
\&    $YYLexer = new Parsers::SimpleCalcYYLexer(\e*INPUTFILE);
\&    $YYLex = $YYLexer\->GetYYLex();
\&
\&    $Debug = 0;
\&    $SimpleCalcParser = new Parsers::SimpleCalcParser($YYLex,
\&                               \e&Parsers::SimpleCalcParser::yyerror, $Debug);
\&    $Value = $SimpleCalcParser\->yyparse();
\&    print "Value = " . (defined($Value) ? "$Value" : "Undefined") . "\en";
\&
\&    close INPUTFILE;
\&
\&    # Input iterator...
\&    $InputFile = "TestSimpleCalcParser.txt";
\&    open INPUTFILE, "$InputFile" or die "Couldn\*(Aqt open $InputFile: $!\en";
\&    $InputIterator = sub { return <INPUTFILE>; };
\&
\&    $YYLexer = new Parsers::SimpleCalcYYLexer($InputIterator);
\&    $YYLex = $YYLexer\->GetYYLex();
\&
\&    $Debug = 0;
\&    $SimpleCalcParser = new Parsers::SimpleCalcParser($YYLex,
\&                               \e&Parsers::SimpleCalcParser::yyerror, $Debug);
\&    $Value = $SimpleCalcParser\->yyparse();
\&    print "Value = " . (defined($Value) ? "$Value" : "Undefined") . "\en";
\&
\&    close INPUTFILE;
.Ve
.IP "\fByyclearin\fR" 4
.IX Item "yyclearin"
.Vb 1
\&    $SimpleCalcParser\->yyclearin();
.Ve
.Sp
\&\fByyclearin\fR method clears any previous look-ahead token after encountering a syntax error
during parsing. It can be used after \fByyerrok\fR in a grammer rule with the reserved word
\&\fBerror\fR.
.IP "\fByyerrok\fR" 4
.IX Item "yyerrok"
.Vb 1
\&    $SimpleCalcParser\->yyerrok();
.Ve
.Sp
\&\fByyerrok\fR method is used with the reserved word \fBerror\fR in grammer rule to indcate
error recovery is complete after encountering a syntax error during parsing.
.IP "\fByyerror\fR" 4
.IX Item "yyerror"
.Vb 1
\&    $SimpleCalcParser\->yyerror();
.Ve
.Sp
\&\fByyerror\fR function is provided for the caller to use during initialization of a parser. It
is used by \fByyparse\fR to print any error messages encountered during parsing of the
input.
.IP "\fByyparse\fR" 4
.IX Item "yyparse"
.Vb 1
\&    $Value = $SimpleCalcParser\->yyparse();
.Ve
.Sp
Returns \fIValue\fR after parsing all the input from a input stream using specified
grammer rules.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Lexer.pm, YYLexer.pm, SimpleCalcYYLexer.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
