.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "EStateAtomTypes 1"
.TH EStateAtomTypes 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
EStateAtomTypes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use AtomTypes::EStateAtomTypes;
.PP
use AtomTypes::EStateAtomTypes qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBEStateAtomTypes\fR class provides the following methods:
.PP
new, AssignAtomTypes, GetAllPossibleEStateAtomTypes,
GetAllPossibleEStateNonHydrogenAtomTypes, GetEStateAtomTypesData,
StringifyEStateAtomTypes
.PP
The following functions are available:
.PP
GetAllPossibleEStateAtomTypes,
GetAllPossibleEStateNonHydrogenAtomTypes, GetEStateAtomTypesData
.PP
\&\fBEStateAtomTypes\fR is derived from \fBAtomTypes\fR class which in turn
is  derived from \fBObjectProperty\fR base class that provides methods not explicitly defined
in \fBEStateAtomTypes\fR, \fBAtomTypes\fR or \fBObjectProperty\fR classes using Perl's
\&\s-1AUTOLOAD\s0 functionality. These methods are generated on-the-fly for a specified object property:
.PP
.Vb 3
\&    Set<PropertyName>(<PropertyValue>);
\&    $PropertyValue = Get<PropertyName>();
\&    Delete<PropertyName>();
.Ve
.PP
The data file EStateAtomTypes.csv distributed with MayaChemTools release contains
all possible electrotopological state (E\-state) [ Ref 75\-78 ] atom types.
.PP
E\-state atom types for various different atom groups [Appendix Table 1 in Ref 76, Appendix \s-1III\s0
in Ref 77 ] are defined using central atom environments indicating its topological and valence state
along with bonded hydrogens.
.PP
The current release of MayaChemTools implements an extended E\-state atom assignment
methodology which is able to assign atom types to any valid non-hydrogen atom in any
atom group instead of a fixed set of E\-state atom types [ Ref 77].
.PP
Let:
.PP
.Vb 1
\&    As = Atom symbol corresponding to element symbol
\&
\&    H<n>   = Number of implicit and explicit hydrogens for atom
\&
\&    s = Single bond to non\-hydrogen atoms attached to atom
\&    s<x> = Symbol s repeated x times to indicate multiple single bonds
\&
\&    d = Double bond to non\-hydrogen atoms attached to atom
\&    d<x> = Symbol d repeated x times to indicate multiple double bonds
\&
\&    t = Triple bond to non\-hydrogen atoms attached to atom
\&    t<x> = Symbol t repeated x times to indicate multiple triple bonds
\&
\&    a = Aromatic to bond non\-hydrogen atoms attached to atom
\&    t<x> = Symbol a repeated x times to indicate multiple aromatic bonds
\&
\&    p = Plus or positive formal charge
\&    m = Minus or negative formal charge
.Ve
.PP
Then, E\-state atom type specification for non-hydrogen or heavy atoms corresponds to:
.PP
.Vb 1
\&    t<x>d<x>a<x>s<x>AsH<n>p or t<x>d<x>a<x>s<x>AsH<n>m
\&
\& Notes:
\&
\&    o p and n with values of 0 are not shown.
\&    o s, d, t, and a bond symbol with values of zero are not shown.
\&    o s and d bonds which are also aromatic don\*(Aqt contribute to the count
\&      of single and double bonds; instead, aromatic bond count reflect these
\&      bonds.
.Ve
.PP
Hydrogen E\-state [ Ref 76\-77 ] atom type definitions are:
.PP
HGroup         AtomType
.PP
.Vb 2
\&    \-OH        HsOH
\&    \-SH        HsSH
\&
\&    \-NH2       HsNH2
\&    >NH        HssNH
\&    =NH        HdNH
\&    :NH:       HaaNH
\&    \-NH3+      HsNH3p
\&    >NH2+     HssNH2p
\&    >NH\-+      HsssNHp
\&
\&    #CH        HtCH
\&    =CH2       HdCH2 \- H attached to a terminal vinyl group
\&    =CH\-       HdsCH \- H attached a non\-terminal vinyl group
\&    :CH:       HaaCH
\&
\&    >CHF       HCHF
\&    \-CH2F      HCH2F
\&    >CHCl      HCHCl
\&    \-CH2Cl     HCH2Cl
\&
\&    CHn (saturated)      HCsats \- H attached to sp3 carbon attached
\&                                  to saturated carbon(s)
\&    CHn (unsatd.)        HCsatu \- H attached to sp3 carbon attached
\&                                  to unsaturated carbon(s)
\&
\&    CHn (aromatic)       Havin \-  H attached to a non\-terminal vinyl
\&                                  group, =CH\-, attached to an aromatic carbon
\&
\&    CHn        Hother    \- H attached to any other type of C, N, O or S
\&    AHn        Hmisc     \- H not attached to C, N, O or  S
\&
\& Notes:
\&
\&    o \- : Single bond; = : Double bond; # : Triple bond
\&    o Hother atom type capture Hydrogen atom groups not explicitly defined.
\&    o HGroup doesn\*(Aqt explicitly corresponds to functional groups
\&    o \-OH group could be a hydroxyl group or part of carboxylic acid group and so on
\&    o \-NH2 group could be primary amine or part of an amide group and so on
.Ve
.PP
Examples of E\-state atom types for non-hydrogen or heavy atoms:
.PP
.Vb 1
\&    sCH3, dCH2, dsCH, ddC, aasC, sNH2 and so on
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 1
\&    $NewEStateAtomTypes = new AtomTypes::EStateAtomTypes(%NamesAndValues);
.Ve
.Sp
Using specified \fIEStateAtomTypes\fR property names and values hash, \fBnew\fR
method creates a new object and returns a reference to newly created \fBEStateAtomTypes\fR
object. By default, the following properties are initialized:
.Sp
.Vb 3
\&    Molecule = \*(Aq\*(Aq
\&    Type = \*(AqEState\*(Aq
\&    IgnoreHydrogens = 0
.Ve
.Sp
Examples:
.Sp
.Vb 3
\&    $EStateAtomTypes = new AtomTypes::EStateAtomTypes(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqIgnoreHydrogens\*(Aq => 0);
.Ve
.IP "\fBAssignAtomTypes\fR" 4
.IX Item "AssignAtomTypes"
.Vb 1
\&    $EStateAtomTypes\->AssignAtomTypes();
.Ve
.Sp
Assigns E\-state atom types to all the atoms in a molecule and returns
\&\fIEStateAtomTypes\fR.
.IP "\fBGetAllPossibleEStateAtomTypes\fR" 4
.IX Item "GetAllPossibleEStateAtomTypes"
.Vb 4
\&    $AllAtomTypesDataRef = $EStateAtomTypes\->
\&                           GetAllPossibleEStateAtomTypes();
\&    $AllAtomTypesDataRef = AtomTypes::EStateAtomTypes::
\&                           GetAllPossibleEStateAtomTypes();
.Ve
.Sp
Returns all possible EState atom types corresponding to hydrogen and non-hydrogen
atoms as an array reference.
.IP "\fBGetAllPossibleEStateNonHydrogenAtomTypes\fR" 4
.IX Item "GetAllPossibleEStateNonHydrogenAtomTypes"
.Vb 4
\&    $AtomTypesDataRef = $EStateAtomTypes\->
\&                        GetAllPossibleEStateNonHydrogenAtomTypes();
\&    $AtomTypesDataRef = AtomTypes::EStateAtomTypes::
\&                        GetAllPossibleEStateNonHydrogenAtomTypes();
.Ve
.Sp
Returns all possible EState atom types corresponding to non-hydrogen atoms as
an array reference.
.IP "\fBGetEStateAtomTypesData\fR" 4
.IX Item "GetEStateAtomTypesData"
.Vb 3
\&    $AtomTypesDataMapRef = $EStateAtomTypes\->GetEStateAtomTypesData();
\&    $AtomTypesDataMapRef = AtomTypes::EStateAtomTypes::
\&                           GetEStateAtomTypesData();
.Ve
.Sp
Returns EState atom types and associated data loaded from EState data file as
a reference to hash with the following hash data format:
.Sp
.Vb 7
\&    @{$EStateAtomTypesDataMap{AtomTypes}} \- Array of all possible atom
\&                              types for all atoms
\&    @{$EStateAtomTypesDataMap{NonHydrogenAtomTypes}} \- Array of all
\&                              possible atom types for non\-hydrogen atoms
\&    @{$EStateAtomTypesDataMap\->{ColLabels}} \- Array of column labels
\&    %{$EStateAtomTypesDataMap\->{DataCol<Num>}} \- Hash keys pair:
\&                                                 DataCol<Num>, AtomType
.Ve
.IP "\fBStringifyEStateAtomTypes\fR" 4
.IX Item "StringifyEStateAtomTypes"
.Vb 1
\&    $String = $EStateAtomTypes\->StringifyEStateAtomTypes();
.Ve
.Sp
Returns a string containing information about \fIEStateAtomTypes\fR object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AtomTypes.pm, AtomicInvariantsAtomTypes.pm, DREIDINGAtomTypes.pm,
FunctionalClassAtomTypes.pm, MMFF94AtomTypes.pm, SLogPAtomTypes.pm,
SYBYLAtomTypes.pm, TPSAAtomTypes.pm, UFFAtomTypes.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
