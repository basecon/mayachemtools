.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SLogPAtomTypes 1"
.TH SLogPAtomTypes 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SLogPAtomTypes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use AtomTypes::SLogPAtomTypes;
.PP
use AtomTypes::SLogPAtomTypes qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSLogPAtomTypes\fR class provides the following methods:
.PP
new, AssignAtomTypes, GetAllPossibleSLogPAtomTypes,
GetAllPossibleSLogPNonHydrogenAtomTypes, GetSLogPAtomTypesData,
StringifySLogPAtomTypes
.PP
The following functions are available:
.PP
GetAllPossibleSLogPAtomTypes,
GetAllPossibleSLogPNonHydrogenAtomTypes, GetSLogPAtomTypesData
.PP
\&\fBSLogPAtomTypes\fR is derived from \fBAtomTypes\fR class which in turn
is  derived from \fBObjectProperty\fR base class that provides methods not explicitly defined
in \fBSLogPAtomTypes\fR, \fBAtomTypes\fR or \fBObjectProperty\fR classes using Perl's
\&\s-1AUTOLOAD\s0 functionality. These methods are generated on-the-fly for a specified object property:
.PP
.Vb 3
\&    Set<PropertyName>(<PropertyValue>);
\&    $PropertyValue = Get<PropertyName>();
\&    Delete<PropertyName>();
.Ve
.PP
The data file SLogPAomTypes.csv distributed with MayaChemTools release contains
all possible SLogP [ Ref 89 ] atom types.
.PP
Examples of SLogP atom types:
.PP
.Vb 1
\&    C1, C2, C3, N1, N2, O1, O2 and so on
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 1
\&    $NewSLogPAtomTypes = new AtomTypes::SLogPAtomTypes(%NamesAndValues);
.Ve
.Sp
Using specified \fISLogPAtomTypes\fR property names and values hash, \fBnew\fR
method creates a new object and returns a reference to newly created \fBSLogPAtomTypes\fR
object. By default, the following properties are initialized:
.Sp
.Vb 3
\&    Molecule = \*(Aq\*(Aq
\&    Type = \*(AqSLogP\*(Aq
\&    IgnoreHydrogens = 0
.Ve
.Sp
Examples:
.Sp
.Vb 3
\&    $SLogPAtomTypes = new AtomTypes::SLogPAtomTypes(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqIgnoreHydrogens\*(Aq => 0);
.Ve
.IP "\fBAssignAtomTypes\fR" 4
.IX Item "AssignAtomTypes"
.Vb 1
\&    $SLogPAtomTypes\->AssignAtomTypes();
.Ve
.Sp
Assigns SLogP atom types to all the atoms in a molecule and returns
\&\fISLogPAtomTypes\fR.
.IP "\fBGetAllPossibleSLogPAtomTypes\fR" 4
.IX Item "GetAllPossibleSLogPAtomTypes"
.Vb 4
\&    $AllAtomTypesDataRef = $SLogPAtomTypes\->
\&                           GetAllPossibleSLogPAtomTypes();
\&    $AllAtomTypesDataRef = AtomTypes::SLogPAtomTypes::
\&                           GetAllPossibleSLogPAtomTypes();
.Ve
.Sp
Returns all possible SLogP atom types corresponding to hydrogen and non-hydrogen
atoms as an array reference.
.IP "\fBGetAllPossibleSLogPNonHydrogenAtomTypes\fR" 4
.IX Item "GetAllPossibleSLogPNonHydrogenAtomTypes"
.Vb 4
\&    $AtomTypesDataRef = $SLogPAtomTypes\->
\&                        GetAllPossibleSLogPNonHydrogenAtomTypes();
\&    $AtomTypesDataRef = AtomTypes::SLogPAtomTypes::
\&                        GetAllPossibleSLogPNonHydrogenAtomTypes();
.Ve
.Sp
Returns all possible SLogP atom types corresponding to non-hydrogen atoms as
an array reference.
.IP "\fBGetSLogPAtomTypesData\fR" 4
.IX Item "GetSLogPAtomTypesData"
.Vb 2
\&    $AtomTypesDataMapRef = $SLogPAtomTypes\->GetSLogPAtomTypesData();
\&    $AtomTypesDataMapRef = AtomTypes::SLogPAtomTypes::GetSLogPAtomTypesData();
.Ve
.Sp
Returns SLogP atom types and associated data loaded from SLogP data file as
a reference to hash with the following hash data format:
.Sp
.Vb 7
\&    @{$SLogPAtomTypesDataMap{AtomTypes}} \- Array of all possible atom
\&                              types for all atoms
\&    @{$SLogPAtomTypesDataMap{NonHydrogenAtomTypes}} \- Array of all
\&                              possible atom types for non\-hydrogen atoms
\&    @{$SLogPAtomTypesDataMap\->{ColLabels}} \- Array of column labels
\&    %{$SLogPAtomTypesDataMap\->{DataCol<Num>}} \- Hash keys pair:
\&                                                DataCol<Num>, AtomType
.Ve
.IP "\fBStringifySLogPAtomTypes\fR" 4
.IX Item "StringifySLogPAtomTypes"
.Vb 1
\&    $String = $SLogPAtomTypes\->StringifySLogPAtomTypes();
.Ve
.Sp
Returns a string containing information about \fISLogPAtomTypes\fR object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AtomTypes.pm, AtomicInvariantsAtomTypes.pm, DREIDINGAtomTypes.pm,
EStateAtomTypes.pm, FunctionalClassAtomTypes.pm, MMFF94AtomTypes.pm,
SYBYLAtomTypes.pm, TPSAAtomTypes.pm, UFFAtomTypes.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
