.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitPerformTorsionScan 1"
.TH RDKitPerformTorsionScan 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitPerformTorsionScan.py \- Perform torsion scan
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitPerformTorsionScan.py [\fB\-\-addHydrogens\fR <yes or no>] [\fB\-\-conformerGenerator\fR <\s-1SDG, ETDG, KDG, ETKDG\s0>]
[\fB\-\-forceField\fR <\s-1UFF,\s0 or \s-1MMFF\s0>] [\fB\-\-forceFieldMMFFVariant\fR <\s-1MMFF94\s0 or MMFF94s>]
[\fB\-\-enforceChirality\fR <yes or no>] [\fB\-\-infile3D\fR <yes or no>] [\fB\-\-infileParams\fR <Name,Value,...>]
[\fB\-\-modeMols\fR  <First or All>] [\fB\-\-modeTorsions\fR  <First or All> ] [\fB\-\-maxConfs\fR <number>]
[\fB\-\-maxConfsTorsion\fR <number>] [\fB\-\-maxIters\fR <number>] [\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name.Value,...>]
[\fB\-\-outfileMolName\fR  <yes or no>] [\fB\-\-outfileParams\fR <Name,Value,...>] [\fB\-\-outPlotParams\fR <Name,Value,...>]
[\fB\-\-outPlotTitleTorsionSpec\fR <yes or no>] [\fB\-\-overwrite\fR]  [\fB\-\-quiet\fR <yes or no>] [\fB\-\-removeHydrogens\fR <yes or no>]
[\fB\-\-randomSeed\fR <number>] [\fB\-\-torsionMaxMatches\fR <number>] [\fB\-\-torsionMinimize\fR <yes or no>]
[\fB\-\-torsionRange\fR <Start,Stop,Step>] [\fB\-\-useChirality\fR <yes or no>] [\fB\-\-useTethers\fR  <yes or no>]
[\fB\-w\fR <dir>] \fB\-t\fR <torsions> \fB\-i\fR <infile>  \fB\-o\fR <outfile>
.PP
RDKitPerformTorsionScan.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perform torsion scan for molecules around torsion angles specified using
\&\s-1SMILES/SMARTS\s0 patterns. A molecule is optionally minimized before performing
a torsion scan. A set of initial 3D structures are generated for a molecule
by scanning the torsion angle across the specified range and updating the 3D
coordinates of the molecule. A conformation ensemble is optionally generated
for each 3D structure representing a specific torsion angle. The conformation
with the lowest energy is selected to represent the torsion angle. An option
is available to skip the generation of the conformation ensemble and simply
calculate the energy for the initial 3D structure for a specific torsion angle
.PP
The torsions are specified using \s-1SMILES\s0 or \s-1SMARTS\s0 patterns. A substructure match
is performed to select torsion atoms in a molecule. The \s-1SMILES\s0 pattern match must
correspond to four torsion atoms. The \s-1SMARTS\s0 patterns containing atom indices may
match  more than four atoms. The atoms indices, however, must match exactly four
torsion atoms. For example: [s:1][c:2]([aX2,cH1])!@[\s-1CX3:3\s0](O)=[O:4] for thiophene
esters and carboxylates as specified in Torsion Library (TorLib) [Ref 146].
.PP
A set of four output files is generated for each torsion match in each
molecule. The names of the output files are generated using the root of
the specified output file. They may either contain sequential molecule
numbers or molecule names as shown below:
.PP
.Vb 4
\&    <OutfileRoot>_Mol<Num>.sdf
\&    <OutfileRoot>_Mol<Num>_Torsion<Num>_Match<Num>.sdf
\&    <OutfileRoot>_Mol<Num>_Torsion<Num>_Match<Num>_Energies.csv
\&    <OutfileRoot>_Mol<Num>_Torsion<Num>_Match<Num>_Plot.<ImgExt>
\&    
\&    or
\&    
\&    <OutfileRoot>_<MolName>.sdf
\&    <OutfileRoot>_<MolName>_Torsion<Num>_Match<Num>.sdf
\&    <OutfileRoot>_<MolName>_Torsion<Num>_Match<Num>_Energies.csv
\&    <OutfileRoot>_<MolName>_Torsion<Num>_Match<Num>_Plot.<ImgExt>
.Ve
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd), .csv, .tsv .txt)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-addHydrogens\fR <yes or no>  [default: yes]" 4
.IX Item "-a, --addHydrogens <yes or no> [default: yes]"
Add hydrogens before minimization.
.IP "\fB\-c, \-\-conformerGenerator\fR <\s-1SDG, ETDG, KDG, ETKDG\s0>  [default: \s-1ETKDG\s0]" 4
.IX Item "-c, --conformerGenerator <SDG, ETDG, KDG, ETKDG> [default: ETKDG]"
Conformation generation methodology for generating initial 3D structure
of a molecule and conformation ensemble representing a specific torsion
angle. No conformation ensemble is generated for 'No' value of
\&'\-\-torsionMinimize' option.
.Sp
Possible values: Standard Distance Geometry, (\s-1SDG\s0), Experimental Torsion-angle
preference with Distance Geometry (\s-1ETDG\s0), basic Knowledge-terms with Distance
Geometry (\s-1KDG\s0),  and Experimental Torsion-angle preference along with basic
Knowledge-terms with Distance Geometry (\s-1ETKDG\s0) [Ref 129] .
.IP "\fB\-f, \-\-forceField\fR <\s-1UFF, MMFF\s0>  [default: \s-1MMFF\s0]" 4
.IX Item "-f, --forceField <UFF, MMFF> [default: MMFF]"
Forcefield method to use for  energy minimization of initial 3D structure
of a molecule and conformation ensemble representing a specific torsion.
No conformation ensemble is generated during for 'No' value of '\-\-torsionMinimze'
option and constrained energy minimization is not performed. Possible values:
Universal Force Field (\s-1UFF\s0) [ Ref 81 ] or Merck Molecular Mechanics Force
Field [ Ref 83\-87 ] .
.IP "\fB\-\-forceFieldMMFFVariant\fR <\s-1MMFF94\s0 or MMFF94s>  [default: \s-1MMFF94\s0]" 4
.IX Item "--forceFieldMMFFVariant <MMFF94 or MMFF94s> [default: MMFF94]"
Variant of \s-1MMFF\s0 forcefield to use for energy minimization.
.IP "\fB\-\-enforceChirality\fR <yes or no>  [default: Yes]" 4
.IX Item "--enforceChirality <yes or no> [default: Yes]"
Enforce chirality for defined chiral centers during generation of conformers.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infile3D\fR <yes or no>  [default: no]" 4
.IX Item "--infile3D <yes or no> [default: no]"
Skip generation and minimization of initial 3D structures for molecules in
input file containing 3D coordinates.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD, MOL: removeHydrogens,yes,sanitize,yes,strictParsing,yes
\&    
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-\-modeMols\fR <First or All>  [default: First]" 4
.IX Item "--modeMols <First or All> [default: First]"
Perform torsion scan for the first molecule or all molecules in input
file.
.IP "\fB\-\-modeTorsions\fR <First or All>  [default: First]" 4
.IX Item "--modeTorsions <First or All> [default: First]"
Perform torsion scan for the first or all specified torsion pattern in
molecules up to a maximum number of matches for each torsion
specification as indicated by '\-\-torsionMaxMatches' option.
.IP "\fB\-\-maxConfs\fR <number>  [default: 250]" 4
.IX Item "--maxConfs <number> [default: 250]"
Maximum number of conformations to generate for initial 3D structure of a
molecule. The lowest energy conformation is written to the output file.
.IP "\fB\-\-maxConfsTorsion\fR <number>  [default: 50]" 4
.IX Item "--maxConfsTorsion <number> [default: 50]"
Maximum number of conformations to generate for conformation ensemble
representing a specific torsion. A constrained minimization is performed
using the coordinates of the specified torsion and the lowest energy
conformation is written to the output file.
.IP "\fB\-\-maxIters\fR <number>  [default: 500]" 4
.IX Item "--maxIters <number> [default: 500]"
Maximum number of iterations to perform for a molecule during minimization
to generation initial 3D structures. This option is ignored during 'yes' value
of  '\-\-infile3D' option.
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for to
configure multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name. The output file root is used for generating the names
of the output files corresponding to structures, energies, and plots during
the torsion scan.
.IP "\fB\-\-outfileMolName\fR <yes or no>  [default: no]" 4
.IX Item "--outfileMolName <yes or no> [default: no]"
Append molecule name to output file root during the generation of the names
for output files. The default is to use <MolNum>. The non alphabetical
characters in molecule names are replaced by underscores.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD: kekulize,no
.Ve
.IP "\fB\-\-outPlotParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outPlotParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for generating
plots using Seaborn module. The supported parameter names along with their
default values are shown below:
.Sp
.Vb 4
\&    type,linepoint,outExt,svg,width,10,height,5.6,
\&    title,auto,xlabel,auto,ylabel,auto,titleWeight,bold,labelWeight,bold
\&    style,darkgrid,palette,deep,font,sans\-serif,fontScale,1,
\&    context,notebook
.Ve
.Sp
Possible values:
.Sp
.Vb 9
\&    type: linepoint, scatter, or line. Both points and lines are drawn
\&        for linepoint plot type.
\&    outExt: Any valid format supported by Python module Matplotlib.
\&        For example: PDF (.pdf), PNG (.png), PS (.ps), SVG (.svg)
\&    titleWeight, labelWeight: Font weight for title and axes labels.
\&        Any valid value.
\&    style: darkgrid, whitegrid, dark, white, ticks
\&    palette: deep, muted, pastel, dark, bright, colorblind
\&    font: Any valid font name
\&
\& \-\-outPlotTitleTorsionSpec <yes or no>  [default: yes]
\&Append torsion specification to the title of the torsion plot.
.Ve
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-q, \-\-quiet\fR <yes or no>  [default: no]" 4
.IX Item "-q, --quiet <yes or no> [default: no]"
Use quiet mode. The warning and information messages will not be printed.
.IP "\fB\-\-randomSeed\fR <number>  [default: auto]" 4
.IX Item "--randomSeed <number> [default: auto]"
Seed for the random number generator for generating initial 3D coordinates.
Default is to use a random seed.
.IP "\fB\-\-removeHydrogens\fR <yes or no>  [default: Yes]" 4
.IX Item "--removeHydrogens <yes or no> [default: Yes]"
Remove hydrogens after minimization.
.IP "\fB\-t, \-\-torsions\fR <\s-1SMILES/SMARTS,...,...\s0>" 4
.IX Item "-t, --torsions <SMILES/SMARTS,...,...>"
\&\s-1SMILES/SMARTS\s0 patterns corresponding to torsion specifications. It's a 
comma delimited list of valid \s-1SMILES/SMART\s0 patterns.
.Sp
A substructure match is performed to select torsion atoms in a molecule.
The \s-1SMILES\s0 pattern match must correspond to four torsion atoms. The
\&\s-1SMARTS\s0 patterns contain atom indices may match  more than four atoms.
The atoms indices, however, must match exactly four torsion atoms. For example:
[s:1][c:2]([aX2,cH1])!@[\s-1CX3:3\s0](O)=[O:4] for thiophene esters and carboxylates
as specified in Torsion Library (TorLib) [Ref 146].
.IP "\fB\-\-torsionMaxMatches\fR <number>  [default: 5]" 4
.IX Item "--torsionMaxMatches <number> [default: 5]"
Maximum number of torsions to match for each torsion specification in a
molecule.
.IP "\fB\-\-torsionMinimize\fR <yes or no>  [default: no]" 4
.IX Item "--torsionMinimize <yes or no> [default: no]"
Perform constrained energy minimization on a conformation ensemble
for  a specific torsion angle and select the lowest energy conformation
representing the torsion angle.
.IP "\fB\-\-torsionRange\fR <Start,Stop,Step>  [default: 0,360,5]" 4
.IX Item "--torsionRange <Start,Stop,Step> [default: 0,360,5]"
Start, stop, and step size angles in degrees for a torsion scan. In addition,
you may specify values using start and stop angles from \-180 to 180.
.IP "\fB\-\-useChirality\fR <yes or no>  [default: no]" 4
.IX Item "--useChirality <yes or no> [default: no]"
Use chirrality during substructure matches for identification of torsions.
 \-\-useTethers <yes or no>  [default: yes]
Use tethers to optimize the final conformation by applying a series of extra forces
to align matching atoms to the positions of the core atoms. Otherwise, use simple
distance constraints during the optimization.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To perform a torsion scan on first molecule in a \s-1SMILES\s0 file using a minimum
energy structure of the molecule selected from an ensemble of conformations,
skipping generation of conformation ensembles for specific torsion angles and
constrained energy minimization of the ensemble, generate output files
corresponding to structure, energy and torsion plot, type:
.PP
.Vb 2
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC" \-i SampleSeriesD3R.smi 
\&      \-o SampleOut.sdf
.Ve
.PP
To run the previous example on all molecules in a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC" \-\-modeMols All
\&      \-i SampleSeriesD3R.sdf \-o SampleOut.sdf
.Ve
.PP
To perform a torsion scan on first molecule in a \s-1SMILES\s0 file using a minimum
energy structure of the molecule selected from an ensemble of conformations,
generation of conformation ensembles for specific torsion angles and constrained
energy minimization of the ensemble, generate output files corresponding to
structure, energy and torsion plot, type:
.PP
.Vb 2
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC" \-\-torsionMinimize Yes
\&       \-i SampleSeriesD3R.smi \-o SampleOut.sdf
.Ve
.PP
To run the previous example on all molecules in a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC" \-\-modeMols All
\&       \-\-torsionMinimize Yes \-i SampleSeriesD3R.sdf \-o SampleOut.sdf
.Ve
.PP
To run the previous example in multiprocessing mode on all available CPUs
without loading all data into memory and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC" \-i SampleSeriesD3R.smi 
\&      \-o SampleOut.sdf \-\-modeMols All \-\-torsionMinimize Yes \-\-mp yes
.Ve
.PP
To run the previous example in multiprocessing mode on all available CPUs
by loading all data into memory and write out a \s-1SD\s0 file, type:
.PP
.Vb 3
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC" \-i SampleSeriesD3R.smi 
\&      \-o SampleOut.sdf \-\-modeMols All \-\-torsionMinimize Yes \-\-mp yes
\&      \-\-mpParams "inputDataMode,InMemory"
.Ve
.PP
To run the previous example in multiprocessing mode on specific number of
CPUs and chunk size without loading all data into memory and write out a \s-1SD\s0 file,
type:
.PP
.Vb 3
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC" \-i SampleSeriesD3R.smi 
\&      \-o SampleOut.sdf \-\-modeMols All \-\-torsionMinimize Yes \-\-mp yes
\&      \-\-mpParams "inputDataMode,Lazy,numProcesses,4,chunkSize,8"
.Ve
.PP
To perform a torsion scan on first molecule in a \s-1SD\s0 file containing 3D coordinates,
skipping generation of conformation ensembles for specific torsion angles and
constrained energy minimization of the ensemble, generate output files
corresponding to structure, energy and torsion plot, type:
.PP
.Vb 2
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC"  \-\-infile3D yes
\&      \-i SampleSeriesD3R3D.sdf \-o SampleOut.sdf
.Ve
.PP
To perform a torsion scan using multiple torsion specifications on all molecules in
a \s-1SD\s0 file containing 3D coordinates, generation of conformation ensembles for specific
torsion angles and constrained energy minimization of the ensemble, generate output files
corresponding to structure, energy and torsion plot, type:
.PP
.Vb 3
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC,[O:1]=[C:2](c)[N:3][C:4]"
\&      \-\-infile3D yes \-\-modeMols All  \-\-modeTorsions All
\&      \-\-torsionMinimize Yes \-i SampleSeriesD3R3D.sdf \-o SampleOut.sdf
.Ve
.PP
To run the previous example using a specific torsion scan range, type:
.PP
.Vb 3
\&    % RDKitPerformTorsionScan.py  \-t "O=CNC,[O:1]=[C:2](c)[N:3][C:4]"
\&      \-\-infile3D yes \-\-modeMols All \-\-modeTorsions All \-\-torsionMinimize
\&      Yes \-\-torsionRange 0,360,10 \-i SampleSeriesD3R.smi \-o SampleOut.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitCalculateRMSD.py, RDKitCalculateMolecularDescriptors.py, RDKitCompareMoleculeShapes.py,
RDKitConvertFileFormat.py, RDKitPerformConstrainedMinimization.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
