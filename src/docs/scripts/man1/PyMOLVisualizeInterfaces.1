.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PyMOLVisualizeInterfaces 1"
.TH PyMOLVisualizeInterfaces 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PyMOLVisualizeInterfaces.py \- Visualize macromolecular interfaces
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
PyMOLVisualizeInterfaces.py [\fB\-\-allowEmptyObjects\fR <yes or no>] [\fB\-\-chainIDs\fR <ChainID1 or ChainID1,ChainID2>]
[\fB\-\-interfaceLabelColor\fR <text>] [ \fB\-\-interfaceContactsCutoff\fR <number>]
[\fB\-\-interfaceHydrophobicContacts\fR <yes or no>] [\fB\-\-interfaceHydrophobicContactsColor\fR <text>]
[\fB\-\-interfacePolarContacts\fR <yes or no>] [\fB\-\-interfacePolarContactsColor\fR <text>]
[\fB\-\-interfaceResidueTypes\fR <yes or no>] [\fB\-\-interfaceSurface\fR <yes or no>]
[\fB\-\-interfaceSurfaceElectrostatics\fR <yes or no>] [\fB\-\-labelFontID\fR <number>]
[\fB\-\-ligandIDs\fR <Largest, All, None or \s-1ID1,ID2...\s0>] [\fB\-\-method\fR <text>] [\fB\-\-methodCutoff\fR <number>]
[\fB\-\-PMLOut\fR <yes or no>] [\fB\-\-residueTypes\fR <Type,Color,ResNames,...>] [\fB\-\-surfaceChain\fR <yes or no>]
[\fB\-\-surfaceChainElectrostatics\fR <yes or no>] [\fB\-\-surfaceChainComplex\fR <yes or no>]
[\fB\-\-surfaceComplex\fR <yes or no>] [\fB\-\-surfaceColors\fR <ColorName1,ColorName2>]
[\fB\-\-surfaceColorPalette\fR <RedToWhite or WhiteToGreen>]
[\fB\-\-surfaceAtomTypesColors\fR <ColorType,ColorSpec,...>] [\fB\-\-surfaceTransparency\fR <number>]
[\fB\-\-overwrite\fR] [\fB\-w\fR <dir>] \fB\-i\fR <infile1,...> \fB\-o\fR <outfile>
.PP
PyMOLVisualizeInterfaces.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generate PyMOL visualization files for viewing interfaces between macromolecules
including proteins and nucleic acids. The interfaces may be generated between
pairs of chains in a single file or across two different files.
.PP
The supported input file format are: \s-1PDB \s0(.pdb), \s-1CIF \s0(.cif)
.PP
The supported output file formats are: PyMOL script file (.pml), PyMOL session
file (.pse)
.PP
A variety of PyMOL groups and objects may be  created for visualization of
macromolecular interfaces. These groups and objects correspond to complexes,
surfaces, chains, ligands, and interfaces. A complete hierarchy of all possible
PyMOL groups and objects is shown below:
.PP
.Vb 10
\&    <PDBFileRoot>
\&        .Complex
\&            .Complex
\&            .Surface
\&        .Chain<ID>
\&            .Complex
\&                .Complex
\&                .Surface
\&            .Chain
\&                .Chain
\&                .NonInterface
\&                    .Chain
\&                    .Surface
\&                        .Surface
\&                        .Hydrophobicity
\&                        .Hydrophobicity_Charge
\&                        .Vacuum_Electrostatics
\&                            .Contact_Potentials
\&                            .Map
\&                            .Legend
\&                            .Volume
\&            .Solvent
\&            .Inorganic
\&            .Ligand<ID>
\&                .Ligand
\&                    .Ligand
\&                    .BallAndStick
\&            .Ligand<ID>
\&                .Ligand
\&                    ... ... ...
\&        .Chain<ID>
\&            ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&        .Chain<ID>
\&            ... ... ...
\&    <PDBFileRoot>
\&        .Complex
\&            ... ... ...
\&        .Chain<ID>
\&            ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&        .Chain<ID>
\&            ... ... ...
\&    <Interfaces>
\&        .Chain<IDs1>_Chain<IDs2>
\&            .Polar_Contacts
\&            .Hydrophobic_Contacts
\&            .Chain<ID> or Chain<ID>_<PDBFileRoot>
\&                .Chain
\&                .Residues
\&                    .Aromatic
\&                        .Residues
\&                        .Surface
\&                    .Hydrophobic
\&                        .Residues
\&                        .Surface
\&                    .Polar
\&                        .Residues
\&                        .Surface
\&                    .Positively_Charged
\&                        .Residues
\&                        .Surface
\&                    .Negatively_Charged
\&                        .Residues
\&                        .Surface
\&                    .Other
\&                        .Residues
\&                        .Surface
\&                .Surface
\&                    .Surface
\&                    .Hydrophobicity
\&                    .Hydrophobicity_Charge
\&                    .Vacuum_Electrostatics
\&                        .Contact_Potentials
\&                        .Map
\&                        .Legend
\&                        .Volume
\&            .Chain<ID> or <PDBFileRoot>_Chain<ID>
\&                .Chain
\&                .Residues
\&                    ... ... ...
\&                .Surface
\&                    ... ... ...
\&        .Chain<IDs>_Chain<IDs>
\&            .Polar_Contacts
\&            .Hydrophobic_Contacts
\&            .Chain<ID> or Chain<ID>_<PDBFileRoot>
\&                .Chain
\&                .Residues
\&                    ... ... ...
\&                .Surface
\&                    ... ... ...
\&            .Chain<ID> or Chain<ID>_<PDBFileRoot>
\&                .Chain
\&                .Residues
\&                    ... ... ...
\&                .Surface
\&                    ... ... ...
.Ve
.PP
The hydrophobic and electrostatic surfaces are not created for complete complex
and chain complex in input file(s) by default. A word to the wise: The creation of
surface objects may slow down loading of \s-1PML\s0 file and generation of \s-1PSE\s0 file, based
on the size of input complexes. The generation of \s-1PSE\s0 file may also fail.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-allowEmptyObjects\fR <yes or no>  [default: no]" 4
.IX Item "--allowEmptyObjects <yes or no> [default: no]"
Allow creation of empty PyMOL objects corresponding to interface,
solvent, and inorganic atom selections across chains and ligands in
input file(s). By default, the empty objects are marked for deletion.
.IP "\fB\-c, \-\-chainIDs\fR <ChainID1,ChainD2,...>  [default: Auto]" 4
.IX Item "-c, --chainIDs <ChainID1,ChainD2,...> [default: Auto]"
Pairwise comma delimited list of chain IDs for the identification of
macromolecular interfaces. All chain IDs must be present in the
same file for a single input file. Otherwise, the first and second
chain \s-1ID\s0(s) in a pair belong to the first and second input file.
.Sp
The default values for interface chain IDs depend on the number
of input files as shown below:
.Sp
One input file: First two chains
Two input files: First chain in each input file
.Sp
Each chain may contain multiple chain IDs delimited by a plus sign. For
example, A+B,C+D chain pair specifies interface between chain complexes
A+B and C+D in first input file or across two input files.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infiles\fR <infile or infile1,infile2>" 4
.IX Item "-i, --infiles <infile or infile1,infile2>"
Name of an input file or a comma delmited list of names for two input
files.
.IP "\fB\-\-interfaceLabelColor\fR <text>  [default: magenta]" 4
.IX Item "--interfaceLabelColor <text> [default: magenta]"
Color for drawing residue or atom level labels for residues in an interface.
The specified value must be valid color. No validation is performed.
.IP "\fB\-\-interfaceContactsCutoff\fR <number>  [default: 4.0]" 4
.IX Item "--interfaceContactsCutoff <number> [default: 4.0]"
Distance in Angstroms for identifying polar and hyrdophobic contacts
between atoms in interface reisudes.
.IP "\fB\-\-interfaceHydrophobicContacts\fR <yes or no>  [default: yes]" 4
.IX Item "--interfaceHydrophobicContacts <yes or no> [default: yes]"
Hydrophobic contacts between residues in an interface. The hydrophobic
contacts are shown between pairs of carbon atoms not connected to
hydrogen bond donor or acceptors atoms as identified by PyMOL.
.IP "\fB\-\-interfaceHydrophobicContactsColor\fR <text>  [default: purpleblue]" 4
.IX Item "--interfaceHydrophobicContactsColor <text> [default: purpleblue]"
Color for drawing hydrophobic contacts between residues in an interface.
The specified value must be valid color. No validation is performed.
.IP "\fB\-\-interfacePolarContacts\fR <yes or no>  [default: yes]" 4
.IX Item "--interfacePolarContacts <yes or no> [default: yes]"
Polar contacts between residues in an interface.
.IP "\fB\-\-interfacePolarContactsColor\fR <text>  [default: orange]" 4
.IX Item "--interfacePolarContactsColor <text> [default: orange]"
Color for drawing polar contacts between residues in an interface.
The specified value must be valid color. No validation is performed.
.IP "\fB\-\-interfaceResidueTypes\fR <yes or no>  [default: auto]" 4
.IX Item "--interfaceResidueTypes <yes or no> [default: auto]"
Interface residue types. The residue groups are generated using residue types,
colors, and names specified by '\-\-residueTypes' option. It is only valid for
amino acids.  By default, the residue type groups are automatically created
for interfaces containing amino acids and skipped for chains only containing
nucleic acids.
.IP "\fB\-\-interfaceSurface\fR <yes or no>  [default: auto]" 4
.IX Item "--interfaceSurface <yes or no> [default: auto]"
Surfaces around interface residues colored by hydrophobicity alone and
both hydrophobicity and charge. The hydrophobicity surface is colored
at residue level using Eisenberg hydrophobicity scale for residues and color
gradient specified by '\-\-surfaceColorPalette' option. The  hydrophobicity and
charge surface is colored [ Ref 140 ] at atom level using colors specified for
groups of atoms by '\-\-surfaceAtomTypesColors' option. This scheme allows
simultaneous mapping of hyrophobicity and charge values on the surfaces.
.Sp
This option is only valid for amino acids. By default, both surfaces are
automatically created for pockets containing amino acids and skipped for
pockets containing only nucleic acids.
.Sp
In addition, generic surfaces colored by '\-\-surfaceColors' are always created
for interface residues containing amino acids and nucleic acids.
.IP "\fB\-\-interfaceSurfaceElectrostatics\fR <yes or no>  [default: no]" 4
.IX Item "--interfaceSurfaceElectrostatics <yes or no> [default: no]"
Vacuum electrostatics contact potential surface around interface residues.
A word to the wise from PyMOL documentation: The computed protein
contact potentials are only qualitatively useful, due to short cutoffs,
truncation, and lack of solvent \*(L"screening\*(R".
.Sp
This option is only valid for amino acids. By default, the electrostatics surface
is automatically created for chains containing amino acids and skipped for chains
containing only nucleic acids.
.IP "\fB\-\-labelFontID\fR <number>  [default: 7]" 4
.IX Item "--labelFontID <number> [default: 7]"
Font \s-1ID\s0 for drawing labels. Default: 7 (Sans Bold). Valid values: 5 to 16.
The specified value must be a valid PyMOL font \s-1ID.\s0 No validation is
performed. The complete lists of valid font IDs is available at:
pymolwiki.org/index.php/Label_font_id. Examples: 5 \- Sans;
7 \- Sans Bold; 9 \- Serif; 10 \- Serif Bold.
.IP "\fB\-l, \-\-ligandIDs\fR <Largest, All, None or \s-1ID1,ID2...\s0>  [default: All]" 4
.IX Item "-l, --ligandIDs <Largest, All, None or ID1,ID2...> [default: All]"
List of ligand IDs to show in chains during visualization of interfaces. Possible
values: Largest, All, None, or a comma delimited list of ligand IDs. The
default is to show all ligands present in chains involved in interfaces.
.Sp
Ligands are identified using organic selection operator available in PyMOL.
It'll also  identify buffer molecules as ligands. The largest ligand contains
the highest number of heavy atoms.
.IP "\fB\-m, \-\-method\fR <text>  [default: BySASAChange]" 4
.IX Item "-m, --method <text> [default: BySASAChange]"
Methodology for the identification of interface residues between a pair
of chains in an input file. The interface residues may be identified by
change in solvent accessible surface area (\s-1SASA\s0) for a residue between
a chain and chains complex, distance between heavy atoms
in two chains, or distance between CAlpha atoms. Possible values:
BySASAChange, ByHeavyAtomsDistance, or ByCAlphaAtomsDistance.
.IP "\fB\-\-methodCutoff\fR <number>  [default: auto]" 4
.IX Item "--methodCutoff <number> [default: auto]"
Cutoff value used by different methodologies during the identification of
interface residues between a pair of chains. The default values are
shown below:
.Sp
.Vb 3
\&    BySASAChange: 1.0; Units: Angstrom**2 [ Ref 141 ]
\&    ByHeavyAtomsDistance: 5.0; Units: Angstrom [ Ref 142 ]
\&    ByCAlphaAtomsDistance: 8.0; Units: Angstrom [ Ref 143 ]
.Ve
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-p, \-\-PMLOut\fR <yes or no>  [default: yes]" 4
.IX Item "-p, --PMLOut <yes or no> [default: yes]"
Save \s-1PML\s0 file during generation of \s-1PSE\s0 file.
.IP "\fB\-r, \-\-residueTypes\fR <Type,Color,ResNames,...>  [default: auto]" 4
.IX Item "-r, --residueTypes <Type,Color,ResNames,...> [default: auto]"
Residue types, colors, and names to generate for residue groups during
and '\-\-residueTypesChain' option. It is only valid for amino acids.
.Sp
It is a triplet of comma delimited list of amino acid residues type, residues
color, and a space delimited list three letter residue names.
.Sp
The default values for residue type, color, and name triplets  are shown
below:
.Sp
.Vb 5
\&    Aromatic,brightorange,HIS PHE TRP TYR,
\&    Hydrophobic,orange,ALA GLY VAL LEU ILE PRO MET,
\&    Polar,palegreen,ASN GLN SER THR CYS,
\&    Positively_Charged,marine,ARG LYS,
\&    Negatively_Charged,red,ASP GLU
.Ve
.Sp
The color name must be a valid PyMOL name. No validation is performed.
An amino acid name may appear across multiple residue types. All other
residues are grouped under 'Other'.
.IP "\fB\-\-surfaceChain\fR <yes or no>  [default: auto]" 4
.IX Item "--surfaceChain <yes or no> [default: auto]"
Surfaces around non-interface residues in individual  chain colored by
hydrophobicity alone and both hydrophobicity and charge. The hydrophobicity
surface is colored at residue level using Eisenberg hydrophobicity scale for residues
and color gradient specified by '\-\-surfaceColorPalette' option. The  hydrophobicity
and charge surface is colored [ Ref 140 ] at atom level using colors specified for
groups of atoms by '\-\-surfaceAtomTypesColors' option. This scheme allows
simultaneous mapping of hyrophobicity and charge values on the surfaces.
.Sp
This option is only valid for amino acids. By default, both surfaces are
automatically created for chains containing amino acids and skipped for
chains containing only nucleic acids.
.Sp
In addition, generic surfaces colored by '\-\-surfaceColors' are always created
for non-interface residues containing amino acids and nucleic acids.
.IP "\fB\-\-surfaceChainElectrostatics\fR <yes or no>  [default: no]" 4
.IX Item "--surfaceChainElectrostatics <yes or no> [default: no]"
Vacuum electrostatics contact potential surface and volume around non-interface
residues in individual chain. A word to the wise from PyMOL documentation: The
computed protein contact potentials are only qualitatively useful, due to short cutoffs,
truncation, and lack of solvent \*(L"screening\*(R".
.Sp
This option is only valid for amino acids. By default, the electrostatics surface
and volume are automatically created for chains containing amino acids and
skipped for chains containing only nucleic acids.
.IP "\fB\-\-surfaceChainComplex\fR <yes or no>  [default: no]" 4
.IX Item "--surfaceChainComplex <yes or no> [default: no]"
Hydrophobic surface around chain complex. The  surface is colored by
hydrophobicity. It is only valid for amino acids.
.IP "\fB\-\-surfaceComplex\fR <yes or no>  [default: no]" 4
.IX Item "--surfaceComplex <yes or no> [default: no]"
Hydrophobic surface around complete complex. The  surface is colored by
hydrophobicity. It is only valid for amino acids.
.IP "\fB\-\-surfaceColors\fR <ColorName1,ColorName2>  [default: salmon,lightblue]" 4
.IX Item "--surfaceColors <ColorName1,ColorName2> [default: salmon,lightblue]"
Color names for surfaces around interface residues and non-interface
residues in chains. These colors are not used for surfaces colored by
hydrophobicity and charge. The color names must be valid PyMOL names.
.IP "\fB\-\-surfaceColorPalette\fR <RedToWhite or WhiteToGreen>  [default: RedToWhite]" 4
.IX Item "--surfaceColorPalette <RedToWhite or WhiteToGreen> [default: RedToWhite]"
Color palette for hydrophobic surfaces around chains and interface residues
in proteins. Possible values: RedToWhite or WhiteToGreen from most
hydrophobic amino acid to least hydrophobic. The colors values for amino
acids are taken from color_h script available as part of the Script Library at
PyMOL Wiki.
.IP "\fB\-\-surfaceAtomTypesColors\fR <ColorType,ColorSpec,...>  [default: auto]" 4
.IX Item "--surfaceAtomTypesColors <ColorType,ColorSpec,...> [default: auto]"
Atom colors for generating surfaces colored by hyrophobicity and charge
around chains and interface residues in proteins. It's a pairwise comma
delimited list of atom color type and color specification for goups of atoms.
.Sp
The default values for color types [ Ref 140 ] along wth color specifications
are shown below:
.Sp
.Vb 4
\&    HydrophobicAtomsColor, yellow,
\&    NegativelyChargedAtomsColor, red,
\&    PositivelyChargedAtomsColor, blue,
\&    OtherAtomsColor, gray90
.Ve
.Sp
The color names must be valid PyMOL names.
.Sp
The color values may also be specified as space delimited \s-1RGB\s0 triplets:
.Sp
.Vb 4
\&    HydrophobicAtomsColor, 0.95 0.78 0.0,
\&    NegativelyChargedAtomsColor, 1.0 0.4 0.4,
\&    PositivelyChargedAtomsColor, 0.2 0.5 0.8,
\&    OtherAtomsColor, 0.95 0.95 0.95
.Ve
.IP "\fB\-\-surfaceTransparency\fR <number>  [default: 0.25]" 4
.IX Item "--surfaceTransparency <number> [default: 0.25]"
Surface transparency for molecular surfaces.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To visualize interface residues between the first two chains in a \s-1PDB\s0 file,
using default methodology to identify interfaces, and and generate a \s-1PML\s0
file, type:
.PP
.Vb 1
\&    % PyMOLVisualizeInterfaces.py \-i Sample8.pdb \-o Sample8.pml
.Ve
.PP
To visualize interface residues between a pair of specific chains in a \s-1PDB\s0
file using a specific methodology and cutoff value to identify interfaces, and
generate a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeInterfaces.py \-m BySASAChange \-\-methodCutoff 1.0
\&    \-c "A,B" \-i Sample8.pdb \-o Sample8.pml
.Ve
.PP
To visualize interface residues between multiple pairs of specified chains in
a \s-1PDB\s0 file using a specific methodology and cutoff value to identify interfaces,
and generate a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeInterfaces.py \-m ByHeavyAtomsDistance
\&    \-\-methodCutoff 5.0 \-c "A,B,B,D" \-i Sample8.pdb \-o Sample8.pml
.Ve
.PP
To visualize interface residues between a pair of specified chains, each member
containing multiple chains, a \s-1PDB\s0 file using a specific methodology and cutoff
value to identify interfaces, and generate a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeInterfaces.py \-m ByCAlphaAtomsDistance
\&    \-\-methodCutoff 8.0 \-c "A+C,B+D" \-i Sample8.pdb \-o Sample8.pml
.Ve
.PP
To visualize interface residues between a pair of specific chains across two \s-1PDB\s0
files using a specific methodology and cutoff value to identify interfaces, and
generate a \s-1PML\s0 file, type:
.PP
.Vb 3
\&    % PyMOLVisualizeInterfaces.py \-m BySASAChange \-\-methodCutoff 1.0 
\&    \-c "A,B" \-i Sample8Part1.pdb,Sample8Part2.pdb
\&    \-o Sample8.pml
.Ve
.PP
To visualize interface residues between multiple pairs of specified chains across
two \s-1PDB\s0 files using a specific methodology and cutoff value to identify interfaces,
and generate a \s-1PML\s0 file, type:
.PP
.Vb 3
\&    % PyMOLVisualizeInterfaces.py \-m ByHeavyAtomsDistance
\&    \-\-methodCutoff 5.0  \-c "A,B,C,B" \-i Sample8Part1.pdb,Sample8Part2.pdb
\&    \-o Sample8.pml
.Ve
.PP
To visualize interface residues between a pair of specified chains, each member
containing multiple chains, across two \s-1PDB\s0 files using a specific methodology
and cutoff value to identify interfaces, and generate a \s-1PML\s0 file, type:
.PP
.Vb 3
\&    % PyMOLVisualizeInterfaces.py \-m ByCAlphaAtomsDistance
\&    \-\-methodCutoff 8.0  \-c "A+C,B+D" \-i "Sample8Part1.pdb,Sample8Part2.pdb"
\&    \-o Sample8.pml
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DownloadPDBFiles.pl,  PyMOLVisualizeCryoEMDensity.py,
PyMOLVisualizeElectronDensity.py, PyMOLVisualizeMacromolecules.py,
PyMOLVisualizeSurfaceAndBuriedResidues.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using PyMOL, a
molecular visualization system on an open source foundation originally
developed by Warren DeLano.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
