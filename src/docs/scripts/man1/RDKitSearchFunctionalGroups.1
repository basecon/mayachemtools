.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitSearchFunctionalGroups 1"
.TH RDKitSearchFunctionalGroups 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitSearchFunctionalGroups.py \- Search for functional groups using SMARTS patterns
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitSearchFunctionalGroups.py  [\fB\-\-combineMatches\fR <yes or no>] [\fB\-\-combineOperator\fR <and or or>]
[\fB\-\-groupNamesFile\fR <FileName or auto>] [\fB\-\-infileParams\fR <Name,Value,...>]
[\fB\-\-mode\fR <retrieve or count>] [\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name.Value,...>]
[\fB\-\-negate\fR <yes or no>] [\fB\-\-outfileParams\fR <Name,Value,...>] [\fB\-\-overwrite\fR]
[\fB\-\-useChirality\fR <yes or no>] [\fB\-w\fR <dir>] [\fB\-o\fR <outfile>] \fB\-i\fR <infile> \fB\-f\fR <Name1,Name2,Name3... or All>
.PP
RDKitSearchFunctionalGroups.py [\fB\-\-groupNamesFile\fR <FileName or auto>] \fB\-l\fR | \fB\-\-list\fR
.PP
RDKitSearchFunctionalGroups.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perform a substructure search in an input file using \s-1SMARTS\s0 patterns for functional
groups and write out the matched molecules to an output file or simply count the
number of matches.
.PP
The \s-1SMARTS\s0 patterns for specified functional group(s) are retrieved from file,
Functional_Group_Hierarchy.txt, available in RDKit data directory.
.PP
The names of valid functional groups and hierarchies  are dynamically retrieved from the
functional groups hierarchy file and are shown below:
.PP
.Vb 10
\&    AcidChloride, AcidChloride.Aromatic, AcidChloride.Aliphatic
\&    Alcohol, Alcohol.Aromatic, Alcohol.Aliphatic
\&    Aldehyde, Aldehyde.Aromatic, Aldehyde.Aliphatic
\&    Amine, Amine.Primary, Amine.Primary.Aromatic, Amine.Primary.Aliphatic,
\&    Amine.Secondary, Amine.Secondary.Aromatic, Amine.Secondary.Aliphatic
\&    Amine.Tertiary, Amine.Tertiary.Aromatic, Amine.Tertiary.Aliphatic
\&    Amine.Aromatic, Amine.Aliphatic, Amine.Cyclic
\&    Azide, Azide.Aromatic, Azide.Aliphatic
\&    BoronicAcid, BoronicAcid.Aromatic, BoronicAcid.Aliphatic
\&    CarboxylicAcid, CarboxylicAcid.Aromatic, CarboxylicAcid.Aliphatic,
\&    CarboxylicAcid.AlphaAmino
\&    Halogen, Halogen.Aromatic, Halogen.Aliphatic
\&    Halogen.NotFluorine, Halogen.NotFluorine.Aliphatic,
\&    Halogen.NotFluorine.Aromatic
\&    Halogen.Bromine, Halogen.Bromine.Aliphatic, Halogen.Bromine.Aromatic,
\&    Halogen.Bromine.BromoKetone
\&    Isocyanate, Isocyanate.Aromatic, Isocyanate.Aliphatic
\&    Nitro, Nitro.Aromatic, Nitro.Aliphatic,
\&    SulfonylChloride, SulfonylChloride.Aromatic, SulfonylChloride.Aliphatic
\&    TerminalAlkyne
.Ve
.PP
The supported input file formats are: \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi, .csv, .tsv, .txt)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-c, \-\-combineMatches\fR <yes or no>  [default: yes]" 4
.IX Item "-c, --combineMatches <yes or no> [default: yes]"
Combine search results for matching \s-1SMARTS\s0 patterns of specified functional groups
against a molecule. Possible values: yes or no.
.Sp
The matched molecules are written to a single output file for \*(L"yes\*(R" value. Otherwise,
multiple output files are generated, one for each functional group. The names of  
these files correspond to a combination of the basename of the specified output file
and the name of the functional group.
.Sp
No output files are generated during \*(L"count\*(R" value of \*(L"\-m, \-\-mode\*(R" option.
.IP "\fB\-\-combineOperator\fR <and or or>  [default: and]" 4
.IX Item "--combineOperator <and or or> [default: and]"
Logical operator to use for combining match results corresponding to specified
functional group names before writing out a single file. This option is ignored
during \*(L"No\*(R" value of  \*(L"\-c, \-\-combineMatches\*(R" option.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-g, \-\-groupNamesFile\fR <FileName or auto>  [default: auto]" 4
.IX Item "-g, --groupNamesFile <FileName or auto> [default: auto]"
Specify a file name containing data for functional groups hierarchy or use functional
group hierarchy file, Functional_Group_Hierarchy.txt, available in RDKit data directory.
.Sp
RDKit data format: Name<tab>Smarts<tab>Label<tab>RemovalReaction (optional)
.Sp
The format of data in local functional group hierarchy must match format of the
data in functional group file available in RDKit data directory.
.IP "\fB\-f, \-\-functionalGroups\fR <Name1,Name2,Name3... or All>  [default: none]" 4
.IX Item "-f, --functionalGroups <Name1,Name2,Name3... or All> [default: none]"
Functional group names for performing substructure \s-1SMARTS\s0 search. Possible values:
Comma delimited list of valid functional group names or All. The current set of valid
functional group names are listed in the description section.
.Sp
The match results for multiple functional group names are combined using 'and'
operator before writing them out to single file. No merging of match results takes
place during generation of individual result files corresponding to fictional group
names.
.Sp
The functional group name may be started with an exclamation mark to negate
the match result for that fictional group.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD, MOL: removeHydrogens,yes,sanitize,yes,strictParsing,yes
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-l, \-\-list\fR" 4
.IX Item "-l, --list"
List functional groups information without performing any search.
.IP "\fB\-m, \-\-mode\fR <retrieve or count>  [default: retrieve]" 4
.IX Item "-m, --mode <retrieve or count> [default: retrieve]"
Specify whether to retrieve and write out matched molecules to an output
file or simply count the number of matches.
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for to
configure multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD: compute2DCoords,auto,kekulize,no
\&    SMILES: kekulize,no,smilesDelimiter,space, smilesIsomeric,yes,
\&        smilesTitleLine,yes,smilesMolName,yes,smilesMolProps,no
.Ve
.Sp
Default value for compute2DCoords: yes for \s-1SMILES\s0 input file; no for all other
file types.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-u, \-\-useChirality\fR <yes or no>  [default: no]" 4
.IX Item "-u, --useChirality <yes or no> [default: no]"
Use stereochemistry information for \s-1SMARTS\s0 search.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To list names of all available functional groups along with their \s-1SMARTS\s0
patterns, type:
.PP
.Vb 1
\&    % RDKitSearchFunctionalGroups.py \-l
.Ve
.PP
To retrieve molecules containing amine functional group and write out a
\&\s-1SMILES\s0 file, type:
.PP
.Vb 1
\&    % RDKitSearchFunctionalGroups.py \-f Amine \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To retrieve molecules containing amine functional group, perform search in
multiprocessing mode on all  available CPUs without loading all data into
memory, and write out a \s-1SMILES\s0 file, type:
.PP
.Vb 2
\&    % RDKitSearchFunctionalGroups.py \-\-mp yes \-f Amine \-i Sample.smi
\&      \-o SampleOut.smi
.Ve
.PP
To retrieve molecules containing amine functional group, perform search in
multiprocessing mode on all  available CPUs by loading all data into memory,
and write out a \s-1SMILES\s0 file, type:
.PP
.Vb 2
\&    % RDKitSearchFunctionalGroups.py \-\-mp yes \-\-mpParams "inputDataMode,
\&      InMemory" \-f Amine \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To retrieve molecules containing amine functional group, perform search in
multiprocessing mode on specific number of CPUs and chunksize without loading
all data into memory, and write out a \s-1SMILES\s0 file, type:
.PP
.Vb 3
\&    % RDKitSearchFunctionalGroups.py \-\-mp yes \-\-mpParams "inputDataMode,
\&      lazy,numProcesses,4,chunkSize,8" \-f Amine \-i Sample.smi \-o
\&      SampleOut.smi
.Ve
.PP
To retrieve molecules containing amine functional group but not halogens and carboxylic
acid functional groups and write out a \s-1SMILES\s0 file, type:
.PP
.Vb 2
\&    % RDKitSearchFunctionalGroups.py \-f \*(AqAmine,!Halogen,!CarboxylicAcid\*(Aq
\&      \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To retrieve molecules containing amine, halogens or carboxylic  acid functional groups
and write out a \s-1SMILES\s0 file, type:
.PP
.Vb 2
\&    % RDKitSearchFunctionalGroups.py \-f \*(AqAmine,Halogen,CarboxylicAcid\*(Aq
\&      \-\-combineOperator or \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To retrieve molecules containing amine and carboxylic acid functional groups defined in
a local functional groups hierarchy file and write out individual \s-1SD\s0 files for each
funcitonal group, type:
.PP
.Vb 2
\&    % RDKitSearchFunctionalGroups.py \-f \*(AqAmine,CarboxylicAcid\*(Aq \-i Sample.sdf 
\&      \-g Custom_Functional_Group_Hierarchy.txt \-\-combineMatches No \-o SampleOut.sdf
.Ve
.PP
To count number of all functional groups in molecules without writing out an output
files, type:
.PP
.Vb 1
\&    % RDKitSearchFunctionalGroups.py \-m count \-f All \-\-combineMatches no \-i Sample.smi
.Ve
.PP
To retrieve molecule not containing aromatic alcohol and aromatic halogen functional
group along with the use of chirality during substructure search and write out individual
\&\s-1SMILES\s0 files for each functional group, type:
.PP
.Vb 2
\&    % RDKitSearchFunctionalGroups.py \-\-combineMatches no \-u yes
\&       \-f \*(Aq!Alcohol.Aromatic,!Halogen.Aromatic\*(Aq \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To retrieve molecule containing amine functional group from a \s-1CSV SMILES\s0 file,
\&\s-1SMILES\s0 strings in column 1, name in column 2, and write out a \s-1SD\s0 file, type:
.PP
.Vb 4
\&    % RDKitSearchFunctionalGroups.py \-f Amine \-\-infileParams
\&      "smilesDelimiter,comma,smilesTitleLine,yes,smilesColumn,1,
\&      smilesNameColumn,2" \-\-outfileParams "compute2DCoords,yes"
\&      \-i SampleSMILES.csv \-o SampleOut.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitConvertFileFormat.py, RDKitFilterPAINS.py, RDKitSearchSMARTS.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
