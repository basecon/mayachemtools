.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PyMOLVisualizeCavities 1"
.TH PyMOLVisualizeCavities 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PyMOLVisualizeCavities.py \- Visualize cavities and pockets in macromolecules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
PyMOLVisualizeCavities.py [\fB\-\-align\fR <yes or no>] [\fB\-\-alignMethod\fR <align, cealign, super>]
[\fB\-\-alignMode\fR <FirstChain or Complex>] [\fB\-\-alignRefFile\fR <filename>]
[\fB\-\-allowEmptyObjects\fR <yes or no>] [\fB\-\-cavityCulled\fR <Yes or No>]
[\fB\-\-cavityCullSize\fR <number>] [\fB\-\-cavityCutoff\fR <number>] [\fB\-\-cavityRadius\fR <number>]
[\fB\-\-chainIDs\fR <First, All or \s-1ID1,ID2...\s0>] [\fB\-\-labelFontID\fR <number>]
[\fB\-\-ligandIDs\fR <Largest, All or \s-1ID1,ID2...\s0> ] [\fB\-\-PMLOut\fR <yes or no>]
[\fB\-\-residueTypes\fR <Type,Color,ResNames,...>] [\fB\-\-residueTypesChain\fR <yes or no>]
[\fB\-\-surfaceChain\fR <yes or no>] [\fB\-\-surfaceChainElectrostatics\fR <yes or no>]
[\fB\-\-surfaceChainComplex\fR <yes or no>] [\fB\-\-surfaceComplex\fR <yes or no>]
[\fB\-\-surfaceAtomTypesColors\fR <ColorType,ColorSpec,...>]
[\fB\-\-surfaceColors\fR <ColorName1,ColorName2>] [\fB\-\-surfaceColorPalette\fR <RedToWhite or WhiteToGreen>]
[\fB\-\-surfaceTransparency\fR <number>] [\fB\-\-overwrite\fR] [\fB\-w\fR <dir>] \fB\-i\fR <infile1,infile2,infile3...> \fB\-o\fR <outfile>
.PP
PyMOLVisualizeCavities.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generate PyMOL visualization files for viewing cavities and pockets in
macromolecules including proteins and nucleic acids.
.PP
The supported input file format are: \s-1PDB \s0(.pdb), \s-1CIF \s0(.cif)
.PP
The supported output file formats are: PyMOL script file (.pml), PyMOL session
file (.pse)
.PP
A variety of PyMOL groups and objects may be  created for visualization of
cavities and pockets in macromolecules. These groups and objects correspond
to complexes, surfaces, chains, ligands, inorganics, cavities, and pockets.
A complete hierarchy of all possible PyMOL groups and objects is shown below:
.PP
.Vb 10
\&    <PDBFileRoot>
\&        .Complex
\&            .Complex
\&            .Surface
\&        .Chain<ID>
\&            .Complex
\&                .Complex
\&                .Surface
\&            .Chain
\&                .Chain
\&                .Residues
\&                    .Aromatic
\&                        .Residues
\&                        .Surface
\&                    .Hydrophobic
\&                        .Residues
\&                        .Surface
\&                    .Polar
\&                        .Residues
\&                        .Surface
\&                    .Positively_Charged
\&                        .Residues
\&                        .Surface
\&                    .Negatively_Charged
\&                        .Residues
\&                        .Surface
\&                    .Other
\&                        .Residues
\&                        .Surface
\&                .Cavities
\&                    .Surface
\&                    .Hydrophobicity
\&                    .Hydrophobicity_Charge
\&                    .Vacuum_Electrostatics
\&                        .Contact_Potentials
\&                        .Map
\&                        .Legend
\&                .Surface
\&                    .Surface
\&                    .Hydrophobicity
\&                    .Hydrophobicity_Charge
\&                    .Vacuum_Electrostatics
\&                        .Contact_Potentials
\&                        .Map
\&                        .Legend
\&            .Solvent
\&            .Inorganic
\&            .Ligand<ID>
\&                .Ligand
\&                    .Ligand
\&                    .BallAndStick
\&            .Ligand<ID>
\&                .Ligand
\&                    ... ... ...
\&        .Chain<ID>
\&            ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&        .Chain<ID>
\&            ... ... ...
\&    <PDBFileRoot>
\&        .Complex
\&            ... ... ...
\&        .Chain<ID>
\&            ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&        .Chain<ID>
\&            ... ... ...
.Ve
.PP
The hydrophobic and electrostatic surfaces are not created for complete complex
and chain complex in input file(s) by default. A word to the wise: The creation of
surface objects may slow down loading of \s-1PML\s0 file and generation of \s-1PSE\s0 file, based
on the size of input complexes. The generation of \s-1PSE\s0 file may also fail.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-align\fR <yes or no>  [default: no]" 4
.IX Item "-a, --align <yes or no> [default: no]"
Align input files to a reference file before visualization.
.IP "\fB\-\-alignMethod\fR <align, cealign, super>  [default: super]" 4
.IX Item "--alignMethod <align, cealign, super> [default: super]"
Alignment methodology to use for aligning input files to a
reference file.
.IP "\fB\-\-alignMode\fR <FirstChain or Complex>  [default: FirstChain]" 4
.IX Item "--alignMode <FirstChain or Complex> [default: FirstChain]"
Portion of input and reference files to use for spatial alignment of
input files against reference file.  Possible values: FirstChain or
Complex.
.Sp
The FirstChain mode allows alignment of the first chain in each input
file to the first chain in the reference file along with moving the rest
of the complex to coordinate space of the reference file. The complete
complex in each input file is aligned to the complete complex in reference
file for the Complex mode.
.IP "\fB\-\-alignRefFile\fR <filename>  [default: FirstInputFile]" 4
.IX Item "--alignRefFile <filename> [default: FirstInputFile]"
Reference input file name. The default is to use the first input file
name specified using '\-i, \-\-infiles' option.
.IP "\fB\-\-allowEmptyObjects\fR <yes or no>  [default: no]" 4
.IX Item "--allowEmptyObjects <yes or no> [default: no]"
Allow creation of empty PyMOL objects corresponding to solvent and
inorganic atom selections across chains and ligands in input file(s). By
default, the empty objects are marked for deletion.
.IP "\fB\-\-cavityCulled\fR <Yes or No>  [default: Yes]" 4
.IX Item "--cavityCulled <Yes or No> [default: Yes]"
Cull cavities and pockets. The cavities and pockets are culled by default.
This value is used to set of PyMOL parameter surface_cavity_mode as
shown below:
.Sp
.Vb 2
\&    Yes: 1 (Cavities and Pockets Only)
\&    No: 2 (Cavities and Pockets Culled)
.Ve
.IP "\fB\-\-cavityCullSize\fR <number>  [default: 2.0]" 4
.IX Item "--cavityCullSize <number> [default: 2.0]"
Approximate dimension of the cavity in Angstroms for detecting cavities and
pockets in the interior of a macromolecule. The higher value makes PyMOL less
sensitive to detection of smaller cavities.
.IP "\fB\-\-cavityCutoff\fR <number>  [default: 3.0]" 4
.IX Item "--cavityCutoff <number> [default: 3.0]"
Cavity cutoff in terms of number of solvent radii for detecting cavities
and pockets. This value is used to set value of PyMOL parameter
surface_cavity_cutoff.
.IP "\fB\-\-cavityRadius\fR <number>  [default: 5.0]" 4
.IX Item "--cavityRadius <number> [default: 5.0]"
Cavity detection radius in terms of number of solvent radii for detecting
cavities and pockets. The detection of larger pockets is ignored for lower
value for the cavity radius. This value is used to set of PyMOL parameter
surface_cavity_radius.
.IP "\fB\-c, \-\-chainIDs\fR <First, All or \s-1ID1,ID2...\s0>  [default: First]" 4
.IX Item "-c, --chainIDs <First, All or ID1,ID2...> [default: First]"
List of chain IDs to use for visualizing macromolecules. Possible values:
First, All, or a comma delimited list of chain IDs. The default is to use the
chain \s-1ID\s0 for the first chain in each input file.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infiles\fR <infile1,infile2,infile3...>" 4
.IX Item "-i, --infiles <infile1,infile2,infile3...>"
Input file names.
.IP "\fB\-\-labelFontID\fR <number>  [default: 7]" 4
.IX Item "--labelFontID <number> [default: 7]"
Font \s-1ID\s0 for drawing labels. Default: 7 (Sans Bold). Valid values: 5 to 16.
The specified value must be a valid PyMOL font \s-1ID.\s0 No validation is
performed. The complete lists of valid font IDs is available at:
pymolwiki.org/index.php/Label_font_id. Examples: 5 \- Sans;
7 \- Sans Bold; 9 \- Serif; 10 \- Serif Bold.
.IP "\fB\-l, \-\-ligandIDs\fR <Largest, All or \s-1ID1,ID2...\s0>  [default: All]" 4
.IX Item "-l, --ligandIDs <Largest, All or ID1,ID2...> [default: All]"
List of ligand IDs to show in chains during visualizing of cavities in
macromolecules. Possible values: Largest, All, or a comma delimited
list of ligand IDs. The default is to show all ligands present in all or
specified chains in each input file.
.Sp
Ligands are identified using organic selection operator available in PyMOL.
It'll also  identify buffer molecules as ligands. The largest ligand contains
the highest number of heavy atoms.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-p, \-\-PMLOut\fR <yes or no>  [default: yes]" 4
.IX Item "-p, --PMLOut <yes or no> [default: yes]"
Save \s-1PML\s0 file during generation of \s-1PSE\s0 file.
.IP "\fB\-r, \-\-residueTypes\fR <Type,Color,ResNames,...>  [default: auto]" 4
.IX Item "-r, --residueTypes <Type,Color,ResNames,...> [default: auto]"
Residue types, colors, and names to generate for residue groups during
\&'\-\-residueTypesChain' option. It is only valid for amino acids.
.Sp
It is a triplet of comma delimited list of amino acid residues type, residues
color, and a space delimited list three letter residue names.
.Sp
The default values for residue type, color, and name triplets  are shown
below:
.Sp
.Vb 5
\&    Aromatic,brightorange,HIS PHE TRP TYR,
\&    Hydrophobic,orange,ALA GLY VAL LEU ILE PRO MET,
\&    Polar,palegreen,ASN GLN SER THR CYS,
\&    Positively_Charged,marine,ARG LYS,
\&    Negatively_Charged,red,ASP GLU
.Ve
.Sp
The color name must be a valid PyMOL name. No validation is performed.
An amino acid name may appear across multiple residue types. All other
residues are grouped under 'Other'.
.IP "\fB\-\-residueTypesChain\fR <yes or no>  [default: auto]" 4
.IX Item "--residueTypesChain <yes or no> [default: auto]"
Chain residue types. The residue groups are generated using residue types,
colors, and names specified by '\-\-residueTypes' option. It is only valid for
amino acids.  By default, the residue type groups are automatically created
for chains containing amino acids and skipped for chains only containing
nucleic acids.
.IP "\fB\-\-surfaceChain\fR <yes or no>  [default: auto]" 4
.IX Item "--surfaceChain <yes or no> [default: auto]"
Surfaces around individual chain colored by hydrophobicity alone and
both hydrophobicity and charge. The hydrophobicity surface is colored
at residue level using Eisenberg hydrophobicity scale for residues and color
gradient specified by '\-\-surfaceColorPalette' option. The  hydrophobicity and
charge surface is colored [ Ref 140 ] at atom level using colors specified for
groups of atoms by '\-\-surfaceAtomTypesColors' option. This scheme allows
simultaneous mapping of hyrophobicity and charge values on the surfaces.
.Sp
This option is only valid for amino acids. By default, both surfaces are
automatically created for chains containing amino acids and skipped for
chains containing only nucleic acids.
.Sp
In addition, generic surfaces colored by '\-\-surfaceColor' are always created
for chain residues containing amino acids and nucleic acids.
.IP "\fB\-\-surfaceChainElectrostatics\fR <yes or no>  [default: no]" 4
.IX Item "--surfaceChainElectrostatics <yes or no> [default: no]"
Vacuum electrostatics contact potential surface around individual
chain. A word to the wise from PyMOL documentation: The computed protein
contact potentials are only qualitatively useful, due to short cutoffs,
truncation, and lack of solvent \*(L"screening\*(R".
.Sp
This option is only valid for amino acids. By default, the electrostatics surface
is automatically created for chains containing amino acids and
skipped for chains containing only nucleic acids.
.IP "\fB\-\-surfaceChainComplex\fR <yes or no>  [default: no]" 4
.IX Item "--surfaceChainComplex <yes or no> [default: no]"
Hydrophobic surface around chain complex. The  surface is colored by
hydrophobicity. It is only valid for amino acids.
.IP "\fB\-\-surfaceComplex\fR <yes or no>  [default: no]" 4
.IX Item "--surfaceComplex <yes or no> [default: no]"
Hydrophobic surface around complete complex. The  surface is colored by
hydrophobicity. It is only valid for amino acids.
.IP "\fB\-\-surfaceAtomTypesColors\fR <ColorType,ColorSpec,...>  [default: auto]" 4
.IX Item "--surfaceAtomTypesColors <ColorType,ColorSpec,...> [default: auto]"
Atom colors for generating surfaces colored by hyrophobicity and charge
around chains and pockets in proteins. It's a pairwise comma delimited list
of atom color type and color specification for goups of atoms.
.Sp
The default values for color types [ Ref 140 ] along wth color specifications
are shown below:
.Sp
.Vb 4
\&    HydrophobicAtomsColor, yellow,
\&    NegativelyChargedAtomsColor, red,
\&    PositivelyChargedAtomsColor, blue,
\&    OtherAtomsColor, gray90
.Ve
.Sp
The color names must be valid PyMOL names.
.Sp
The color values may also be specified as space delimited \s-1RGB\s0 triplets:
.Sp
.Vb 4
\&    HydrophobicAtomsColor, 0.95 0.78 0.0,
\&    NegativelyChargedAtomsColor, 1.0 0.4 0.4,
\&    PositivelyChargedAtomsColor, 0.2 0.5 0.8,
\&    OtherAtomsColor, 0.95 0.95 0.95
.Ve
.IP "\fB\-\-surfaceColors\fR <ColorName1,ColorName2>  [default: salmon,lightblue]" 4
.IX Item "--surfaceColors <ColorName1,ColorName2> [default: salmon,lightblue]"
Color names for surfaces around cavities and chains. These colors are not
used for surfaces and cavities colored by hydrophobicity and charge. The
color names must be valid PyMOL names.
.IP "\fB\-\-surfaceColorPalette\fR <RedToWhite or WhiteToGreen>  [default: RedToWhite]" 4
.IX Item "--surfaceColorPalette <RedToWhite or WhiteToGreen> [default: RedToWhite]"
Color palette for hydrophobic surfaces around chains and pockets in proteins.
Possible values: RedToWhite or WhiteToGreen from most hydrophobic amino
acid to least hydrophobic. The colors values for amino acids are taken from
color_h script available as part of the Script Library at PyMOL Wiki.
.IP "\fB\-\-surfaceTransparency\fR <number>  [default: 0.25]" 4
.IX Item "--surfaceTransparency <number> [default: 0.25]"
Surface transparency for molecular surfaces.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To visualize cavities in the first chain along with the largest ligand in the
first chain, solvents, and inorganics, in a \s-1PDB\s0 file, and generate a \s-1PML\s0
file, type:
.PP
.Vb 1
\&    % PyMOLVisualizeCavities.py \-i Sample4.pdb \-o Sample4.pml
.Ve
.PP
To visualize cavities in all chain along with all ligands, solvents,
and inorganics, in a \s-1PDB\s0 file, and generate a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeCavities.py \-c All \-l All \-i Sample4.pdb
\&      \-o Sample4.pml
.Ve
.PP
To visualize cavities in the first chain at a specific cavity radius and cutoff
using specifc colors for surfaces corresponding to cavities and non-cavities,
and generate a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeCavities.py  \-\-cavityRadius 3 \-\-cavityCutoff 5
\&       \-\-surfaceColors "red,blue" \-i Sample4.pdb \-o Sample4.pml
.Ve
.PP
To visualize cavities in the first chain along with the largest ligand in the
first chain, solvents, and inorganics, in \s-1PDB\s0 files, along with aligning first
chain in each input file to the first chain inand generate a \s-1PML\s0 file, type:
.PP
.Vb 3
\&    % PyMOLVisualizeCavities.py \-\-align yes
\&      \-i "Sample5.pdb,Sample6.pdb,Sample7.pdb"
\&      \-o SampleOut.pml
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DownloadPDBFiles.pl, PyMOLVisualizeCryoEMDensity.py,
PyMOLVisualizeElectronDensity.py, PyMOLVisualizeInterfaces.py
PyMOLVisualizeMacromolecules.py, PyMOLVisualizeSurfaceAndBuriedResidues.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using PyMOL, a
molecular visualization system on an open source foundation originally
developed by Warren DeLano.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
