.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AtomNeighborhoodsFingerprints 1"
.TH AtomNeighborhoodsFingerprints 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AtomNeighborhoodsFingerprints.pl \- Generate atom neighborhoods fingerprints for SD files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
AtomNeighborhoodsFingerprints.pl SDFile(s)...
.PP
AtomNeighborhoodsFingerprints.pl [\fB\-\-AromaticityModel\fR \fIAromaticityModelType\fR]
[\fB\-a, \-\-AtomIdentifierType\fR \fIAtomicInvariantsAtomTypes |
DREIDINGAtomTypes | EStateAtomTypes | MMFF94AtomTypes | SLogPAtomTypes | SYBYLAtomTypes | TPSAAtomTypes | UFFAtomTypes\fR]
[\fB\-\-AtomicInvariantsToUse\fR \fI\*(L"AtomicInvariant,AtomicInvariant...\*(R"\fR]
[\fB\-\-FunctionalClassesToUse\fR \fI\*(L"FunctionalClass1,FunctionalClass2...\*(R"\fR]
[\fB\-\-CompoundID\fR \fIDataFieldName or LabelPrefixString\fR] [\fB\-\-CompoundIDLabel\fR \fItext\fR]
[\fB\-\-CompoundIDMode\fR] [\fB\-\-DataFields\fR \fI\*(L"FieldLabel1,FieldLabel2,...\*(R"\fR]
[\fB\-d, \-\-DataFieldsMode\fR \fIAll | Common | Specify | CompoundID\fR] [\fB\-f, \-\-Filter\fR \fIYes | No\fR]
[\fB\-\-FingerprintsLabel\fR \fItext\fR] [\fB\-h, \-\-help\fR] [\fB\-k, \-\-KeepLargestComponent\fR \fIYes | No\fR]
[\fB\-\-MinNeighborhoodRadius\fR \fInumber\fR] [\fB\-\-MaxNeighborhoodRadius\fR \fInumber\fR]
[\fB\-\-OutDelim\fR \fIcomma | tab | semicolon\fR] [\fB\-\-output\fR \fI\s-1SD\s0 | \s-1FP\s0 | text | all\fR] [\fB\-o, \-\-overwrite\fR]
[\fB\-q, \-\-quote\fR \fIYes | No\fR] [\fB\-r, \-\-root\fR \fIRootName\fR]
[\fB\-w, \-\-WorkingDir\fR dirname] SDFile(s)...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generate atom neighborhoods fingerprints  [ Ref 53\-56, Ref 73 ] for \fISDFile(s)\fR and create appropriate
\&\s-1SD, FP\s0 or \s-1CSV/TSV\s0 text file(s) containing fingerprints vector strings corresponding to molecular fingerprints.
.PP
Multiple SDFile names are separated by spaces. The valid file extensions are \fI.sdf\fR
and \fI.sd\fR. All other file names are ignored. All the \s-1SD\s0 files in a current directory
can be specified either by \fI*.sdf\fR or the current directory name.
.PP
The current release of MayaChemTools supports generation of atom neighborhoods fingerprints
corresponding to following \fB\-a, \-\-AtomIdentifierTypes\fR:
.PP
.Vb 3
\&    AtomicInvariantsAtomTypes, DREIDINGAtomTypes, EStateAtomTypes,
\&    FunctionalClassAtomTypes, MMFF94AtomTypes, SLogPAtomTypes,
\&    SYBYLAtomTypes, TPSAAtomTypes, UFFAtomTypes
.Ve
.PP
Based on the values specified for \fB\-a, \-\-AtomIdentifierType\fR and \fB\-\-AtomicInvariantsToUse\fR,
initial atom types are assigned to all non-hydrogen atoms in a molecule. Using atom neighborhoods
around each non-hydrogen central atom corresponding to radii between specified values
\&\fB\-\-MinNeighborhoodRadius\fR and \fB\-\-MaxNeighborhoodRadius\fR, unique atom types at
each radii level are counted and an atom neighborhood identifier is generated.
.PP
The format of an atom neighborhood identifier around a central non-hydrogen atom at a
specific radius is:
.PP
.Vb 1
\&    NR<n>\-<AtomType>\-ATC<n>
\&
\&    NR: Neighborhood radius
\&    AtomType: Assigned atom type
\&    ATC: Atom type count
.Ve
.PP
The atom neighborhood identifier for a non-hydrogen central atom corresponding to all specified radii
is generated by concatenating neighborhood identifiers at each radii by colon as a delimiter:
.PP
.Vb 1
\&    NR<n>\-<AtomType>\-ATC<n>:NR<n>\-<AtomType>\-ATC<n>:...
.Ve
.PP
The atom neighborhood identifiers for all non-hydrogen central atoms at all specified radii are
concatenated using space as a delimiter and constitute atom neighborhood fingerprint of the molecule.
.PP
Example of \fI\s-1SD\s0\fR file containing atom neighborhood fingerprints string data:
.PP
.Vb 10
\&    ... ...
\&    ... ...
\&    $$$$
\&    ... ...
\&    ... ...
\&    ... ...
\&    41 44  0  0  0  0  0  0  0  0999 V2000
\&     \-3.3652    1.4499    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
\&    ... ...
\&    2  3  1  0  0  0  0
\&    ... ...
\&    M  END
\&    >  <CmpdID>
\&    Cmpd1
\&
\&    >  <AtomNeighborhoodsFingerprints>
\&    FingerprintsVector;AtomNeighborhoods:AtomicInvariantsAtomTypes:MinRadiu
\&    s0:MaxRadius2;41;AlphaNumericalValues;ValuesString;NR0\-C.X1.BO1.H3\-ATC1
\&    :NR1\-C.X3.BO3.H1\-ATC1:NR2\-C.X1.BO1.H3\-ATC1:NR2\-C.X3.BO4\-ATC1 NR0\-C.X1.B
\&    O1.H3\-ATC1:NR1\-C.X3.BO3.H1\-ATC1:NR2\-C.X1.BO1.H3\-ATC1:NR2\-C.X3.BO4\-ATC1
\&    NR0\-C.X2.BO2.H2\-ATC1:NR1\-C.X2.BO2.H2\-ATC1:NR1\-C.X3.BO3.H1\-ATC1:NR2\-C...
\&
\&    $$$$
\&    ... ...
\&    ... ...
.Ve
.PP
Example of \fI\s-1FP\s0\fR file containing atom neighborhood fingerprints string data:
.PP
.Vb 10
\&    #
\&    # Package = MayaChemTools 7.4
\&    # Release Date = Oct 21, 2010
\&    #
\&    # TimeStamp = Fri Mar 11 14:15:27 2011
\&    #
\&    # FingerprintsStringType = FingerprintsVector
\&    #
\&    # Description = AtomNeighborhoods:AtomicInvariantsAtomTypes:MinRadiu...
\&    # VectorStringFormat = ValuesString
\&    # VectorValuesType = AlphaNumericalValues
\&    #
\&    Cmpd1 41;NR0\-C.X1.BO1.H3\-ATC1:NR1\-C.X3.BO3.H1\-ATC1:NR2\-C.X1.BO1.H3\-A...
\&    Cmpd2 23;NR0\-C.X1.BO1.H3\-ATC1:NR1\-C.X2.BO2.H2\-ATC1:NR2\-C.X3.BO3.H1\-A...
\&    ... ...
\&    ... ..
.Ve
.PP
Example of \s-1CSV \s0\fIText\fR file containing atom neighborhood fingerprints string data:
.PP
.Vb 8
\&    "CompoundID","AtomNeighborhoodsFingerprints"
\&    "Cmpd1","FingerprintsVector;AtomNeighborhoods:AtomicInvariantsAtomTypes
\&    :MinRadius0:MaxRadius2;41;AlphaNumericalValues;ValuesString;NR0\-C.X1.B
\&    O1.H3\-ATC1:NR1\-C.X3.BO3.H1\-ATC1:NR2\-C.X1.BO1.H3\-ATC1:NR2\-C.X3.BO4\-ATC1
\&    NR0\-C.X1.BO1.H3\-ATC1:NR1\-C.X3.BO3.H1\-ATC1:NR2\-C.X1.BO1.H3\-ATC1:NR2\-C.X3
\&    .BO4\-ATC1 NR0\-C.X2.BO2.H2\-ATC1:NR1\-C.X2.BO2.H2\-ATC1:NR1\-C.X3.BO3.H1..."
\&    ... ...
\&    ... ...
.Ve
.PP
The current release of MayaChemTools generates the following types of atom neighborhoods
fingerprints vector strings:
.PP
.Vb 6
\&    FingerprintsVector;AtomNeighborhoods:AtomicInvariantsAtomTypes:MinRadi
\&    us0:MaxRadius2;41;AlphaNumericalValues;ValuesString;NR0\-C.X1.BO1.H3\-AT
\&    C1:NR1\-C.X3.BO3.H1\-ATC1:NR2\-C.X1.BO1.H3\-ATC1:NR2\-C.X3.BO4\-ATC1 NR0\-C.X
\&    1.BO1.H3\-ATC1:NR1\-C.X3.BO3.H1\-ATC1:NR2\-C.X1.BO1.H3\-ATC1:NR2\-C.X3.BO4\-A
\&    TC1 NR0\-C.X2.BO2.H2\-ATC1:NR1\-C.X2.BO2.H2\-ATC1:NR1\-C.X3.BO3.H1\-ATC1:NR2
\&    \-C.X2.BO2.H2\-ATC1:NR2\-N.X3.BO3\-ATC1:NR2\-O.X1.BO1.H1\-ATC1 NR0\-C.X2.B...
\&
\&    FingerprintsVector;AtomNeighborhoods:DREIDINGAtomTypes:MinRadius0:MaxR
\&    adius2;41;AlphaNumericalValues;ValuesString;NR0\-C_2\-ATC1:NR1\-C_3\-ATC1:
\&    NR1\-O_2\-ATC1:NR1\-O_3\-ATC1:NR2\-C_3\-ATC1 NR0\-C_2\-ATC1:NR1\-C_R\-ATC1:NR1\-N
\&    _3\-ATC1:NR1\-O_2\-ATC1:NR2\-C_R\-ATC3 NR0\-C_3\-ATC1:NR1\-C_2\-ATC1:NR1\-C_3\-AT
\&    C1:NR2\-C_3\-ATC1:NR2\-O_2\-ATC1:NR2\-O_3\-ATC2 NR0\-C_3\-ATC1:NR1\-C_3\-ATC1:NR
\&    1\-N_R\-ATC1:NR2\-C_3\-ATC1:NR2\-C_R\-ATC2 NR0\-C_3\-ATC1:NR1\-C_3\-ATC1:NR2\-...
\&
\&    FingerprintsVector;AtomNeighborhoods:EStateAtomTypes:MinRadius0:MaxRad
\&    ius2;41;AlphaNumericalValues;ValuesString;NR0\-aaCH\-ATC1:NR1\-aaCH\-ATC1:
\&    NR1\-aasC\-ATC1:NR2\-aaCH\-ATC1:NR2\-aasC\-ATC1:NR2\-sF\-ATC1 NR0\-aaCH\-ATC1:NR
\&    1\-aaCH\-ATC1:NR1\-aasC\-ATC1:NR2\-aaCH\-ATC1:NR2\-aasC\-ATC1:NR2\-sF\-ATC1 NR0\-
\&    aaCH\-ATC1:NR1\-aaCH\-ATC1:NR1\-aasC\-ATC1:NR2\-aaCH\-ATC1:NR2\-aasC\-ATC2 NR0\-
\&    aaCH\-ATC1:NR1\-aaCH\-ATC1:NR1\-aasC\-ATC1:NR2\-aaCH\-ATC1:NR2\-aasC\-ATC2 N...
\&
\&    FingerprintsVector;AtomNeighborhoods:FunctionalClassAtomTypes:MinRadiu
\&    s0:MaxRadius2;41;AlphaNumericalValues;ValuesString;NR0\-Ar\-ATC1:NR1\-Ar\-
\&    ATC1:NR1\-Ar.HBA\-ATC1:NR1\-None\-ATC1:NR2\-Ar\-ATC2:NR2\-None\-ATC4 NR0\-Ar\-AT
\&    C1:NR1\-Ar\-ATC2:NR1\-Ar.HBA\-ATC1:NR2\-Ar\-ATC5:NR2\-None\-ATC1 NR0\-Ar\-ATC1:N
\&    R1\-Ar\-ATC2:NR1\-HBD\-ATC1:NR2\-Ar\-ATC2:NR2\-None\-ATC1 NR0\-Ar\-ATC1:NR1\-Ar\-A
\&    TC2:NR1\-Hal\-ATC1:NR2\-Ar\-ATC2 NR0\-Ar\-ATC1:NR1\-Ar\-ATC2:NR1\-None\-ATC1:...
\&
\&    FingerprintsVector;AtomNeighborhoods:MMFF94AtomTypes:MinRadius0:MaxRad
\&    ius2;41;AlphaNumericalValues;ValuesString;NR0\-C5A\-ATC1:NR1\-C5B\-ATC1:NR
\&    1\-CB\-ATC1:NR1\-N5\-ATC1:NR2\-C5A\-ATC1:NR2\-C5B\-ATC1:NR2\-CB\-ATC3:NR2\-CR\-ATC
\&    1 NR0\-C5A\-ATC1:NR1\-C5B\-ATC1:NR1\-CR\-ATC1:NR1\-N5\-ATC1:NR2\-C5A\-ATC1:NR2\-C
\&    5B\-ATC1:NR2\-C=ON\-ATC1:NR2\-CR\-ATC3 NR0\-C5B\-ATC1:NR1\-C5A\-ATC1:NR1\-C5B\-AT
\&    C1:NR1\-C=ON\-ATC1:NR2\-C5A\-ATC1:NR2\-CB\-ATC1:NR2\-CR\-ATC1:NR2\-N5\-ATC1:N...
\&
\&    FingerprintsVector;AtomNeighborhoods:SLogPAtomTypes:MinRadius0:MaxRadi
\&    us2;41;AlphaNumericalValues;ValuesString;NR0\-C1\-ATC1:NR1\-C10\-ATC1:NR1\-
\&    CS\-ATC1:NR2\-C1\-ATC1:NR2\-N11\-ATC1:NR2\-O2\-ATC1 NR0\-C1\-ATC1:NR1\-C11\-ATC1:
\&    NR2\-C1\-ATC1:NR2\-C21\-ATC1 NR0\-C1\-ATC1:NR1\-C11\-ATC1:NR2\-C1\-ATC1:NR2\-C21\-
\&    ATC1 NR0\-C1\-ATC1:NR1\-C5\-ATC1:NR1\-CS\-ATC1:NR2\-C1\-ATC1:NR2\-O2\-ATC2:NR2\-O
\&    9\-ATC1 NR0\-C1\-ATC1:NR1\-CS\-ATC2:NR2\-C1\-ATC2:NR2\-O2\-ATC2 NR0\-C10\-ATC1...
\&
\&    FingerprintsVector;AtomNeighborhoods:SYBYLAtomTypes:MinRadius0:MaxRadi
\&    us2;41;AlphaNumericalValues;ValuesString;NR0\-C.2\-ATC1:NR1\-C.3\-ATC1:NR1
\&    \-O.co2\-ATC2:NR2\-C.3\-ATC1 NR0\-C.2\-ATC1:NR1\-C.ar\-ATC1:NR1\-N.am\-ATC1:NR1\-
\&    O.2\-ATC1:NR2\-C.ar\-ATC3 NR0\-C.3\-ATC1:NR1\-C.2\-ATC1:NR1\-C.3\-ATC1:NR2\-C.3\-
\&    ATC1:NR2\-O.3\-ATC1:NR2\-O.co2\-ATC2 NR0\-C.3\-ATC1:NR1\-C.3\-ATC1:NR1\-N.ar\-AT
\&    C1:NR2\-C.3\-ATC1:NR2\-C.ar\-ATC2 NR0\-C.3\-ATC1:NR1\-C.3\-ATC1:NR2\-C.3\-ATC...
\&
\&    FingerprintsVector;AtomNeighborhoods:TPSAAtomTypes:MinRadius0:MaxRadiu
\&    s2;41;AlphaNumericalValues;ValuesString;NR0\-N21\-ATC1:NR1\-None\-ATC3:NR2
\&    \-None\-ATC5 NR0\-N7\-ATC1:NR1\-None\-ATC2:NR2\-None\-ATC3:NR2\-O3\-ATC1 NR0\-Non
\&    e\-ATC1:NR1\-N21\-ATC1:NR1\-None\-ATC1:NR2\-None\-ATC3 NR0\-None\-ATC1:NR1\-N21\-
\&    ATC1:NR1\-None\-ATC2:NR2\-None\-ATC6 NR0\-None\-ATC1:NR1\-N21\-ATC1:NR1\-None\-A
\&    TC2:NR2\-None\-ATC6 NR0\-None\-ATC1:NR1\-N7\-ATC1:NR1\-None\-ATC1:NR1\-O3\-AT...
\&
\&    FingerprintsVector;AtomNeighborhoods:UFFAtomTypes:MinRadius0:MaxRadius
\&    2;41;AlphaNumericalValues;ValuesString;NR0\-C_2\-ATC1:NR1\-C_3\-ATC1:NR1\-O
\&    _2\-ATC1:NR1\-O_3\-ATC1:NR2\-C_3\-ATC1 NR0\-C_2\-ATC1:NR1\-C_R\-ATC1:NR1\-N_3\-AT
\&    C1:NR1\-O_2\-ATC1:NR2\-C_R\-ATC3 NR0\-C_3\-ATC1:NR1\-C_2\-ATC1:NR1\-C_3\-ATC1:NR
\&    2\-C_3\-ATC1:NR2\-O_2\-ATC1:NR2\-O_3\-ATC2 NR0\-C_3\-ATC1:NR1\-C_3\-ATC1:NR1\-N_R
\&    \-ATC1:NR2\-C_3\-ATC1:NR2\-C_R\-ATC2 NR0\-C_3\-ATC1:NR1\-C_3\-ATC1:NR2\-C_3\-A...
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-AromaticityModel\fR \fIMDLAromaticityModel | TriposAromaticityModel | MMFFAromaticityModel | ChemAxonBasicAromaticityModel | ChemAxonGeneralAromaticityModel | DaylightAromaticityModel | MayaChemToolsAromaticityModel\fR" 4
.IX Item "--AromaticityModel MDLAromaticityModel | TriposAromaticityModel | MMFFAromaticityModel | ChemAxonBasicAromaticityModel | ChemAxonGeneralAromaticityModel | DaylightAromaticityModel | MayaChemToolsAromaticityModel"
Specify aromaticity model to use during detection of aromaticity. Possible values in the current
release are: \fIMDLAromaticityModel, TriposAromaticityModel, MMFFAromaticityModel,
ChemAxonBasicAromaticityModel, ChemAxonGeneralAromaticityModel, DaylightAromaticityModel
or MayaChemToolsAromaticityModel\fR. Default value: \fIMayaChemToolsAromaticityModel\fR.
.Sp
The supported aromaticity model names along with model specific control parameters
are defined in \fBAromaticityModelsData.csv\fR, which is distributed with the current release
and is available under \fBlib/data\fR directory. \fBMolecule.pm\fR module retrieves data from
this file during class instantiation and makes it available to method \fBDetectAromaticity\fR
for detecting aromaticity corresponding to a specific model.
.IP "\fB\-a, \-\-AtomIdentifierType\fR \fIAtomicInvariantsAtomTypes | DREIDINGAtomTypes | EStateAtomTypes | FunctionalClassAtomTypes | MMFF94AtomTypes | SLogPAtomTypes | SYBYLAtomTypes | TPSAAtomTypes | UFFAtomTypes\fR" 4
.IX Item "-a, --AtomIdentifierType AtomicInvariantsAtomTypes | DREIDINGAtomTypes | EStateAtomTypes | FunctionalClassAtomTypes | MMFF94AtomTypes | SLogPAtomTypes | SYBYLAtomTypes | TPSAAtomTypes | UFFAtomTypes"
Specify atom identifier type to use for assignment of initial atom identifier to non-hydrogen
atoms during calculation of atom neighborhoods fingerprints. Possible values in the current
release are: \fIAtomicInvariantsAtomTypes, DREIDINGAtomTypes, EStateAtomTypes,
FunctionalClassAtomTypes, MMFF94AtomTypes, SLogPAtomTypes, SYBYLAtomTypes,
TPSAAtomTypes, UFFAtomTypes\fR. Default value: \fIAtomicInvariantsAtomTypes\fR.
.ie n .IP "\fB\-\-AtomicInvariantsToUse\fR \fI""AtomicInvariant,AtomicInvariant...""\fR" 4
.el .IP "\fB\-\-AtomicInvariantsToUse\fR \fI``AtomicInvariant,AtomicInvariant...''\fR" 4
.IX Item "--AtomicInvariantsToUse AtomicInvariant,AtomicInvariant..."
This value is used during \fIAtomicInvariantsAtomTypes\fR value of \fBa, \-\-AtomIdentifierType\fR
option. It's a list of comma separated valid atomic invariant atom types.
.Sp
Possible values for atomic invariants are: \fI\s-1AS, X, BO,  LBO, SB, DB, TB,
H,\s0 Ar, \s-1RA, FC, MN, SM\s0\fR. Default value: \fI\s-1AS,X,BO,H,FC\s0\fR.
.Sp
The atomic invariants abbreviations correspond to:
.Sp
.Vb 1
\&    AS = Atom symbol corresponding to element symbol
\&
\&    X<n>   = Number of non\-hydrogen atom neighbors or heavy atoms
\&    BO<n> = Sum of bond orders to non\-hydrogen atom neighbors or heavy atoms
\&    LBO<n> = Largest bond order of non\-hydrogen atom neighbors or heavy atoms
\&    SB<n> = Number of single bonds to non\-hydrogen atom neighbors or heavy atoms
\&    DB<n> = Number of double bonds to non\-hydrogen atom neighbors or heavy atoms
\&    TB<n> = Number of triple bonds to non\-hydrogen atom neighbors or heavy atoms
\&    H<n>   = Number of implicit and explicit hydrogens for atom
\&    Ar     = Aromatic annotation indicating whether atom is aromatic
\&    RA     = Ring atom annotation indicating whether atom is a ring
\&    FC<+n/\-n> = Formal charge assigned to atom
\&    MN<n> = Mass number indicating isotope other than most abundant isotope
\&    SM<n> = Spin multiplicity of atom. Possible values: 1 (singlet), 2 (doublet) or
\&            3 (triplet)
.Ve
.Sp
Atom type generated by AtomTypes::AtomicInvariantsAtomTypes class corresponds to:
.Sp
.Vb 1
\&    AS.X<n>.BO<n>.LBO<n>.<SB><n>.<DB><n>.<TB><n>.H<n>.Ar.RA.FC<+n/\-n>.MN<n>.SM<n>
.Ve
.Sp
Except for \s-1AS\s0 which is a required atomic invariant in atom types, all other atomic invariants are
optional. Atom type specification doesn't include atomic invariants with zero or undefined values.
.Sp
In addition to usage of abbreviations for specifying atomic invariants, the following descriptive words
are also allowed:
.Sp
.Vb 12
\&    X : NumOfNonHydrogenAtomNeighbors or NumOfHeavyAtomNeighbors
\&    BO : SumOfBondOrdersToNonHydrogenAtoms or SumOfBondOrdersToHeavyAtoms
\&    LBO : LargestBondOrderToNonHydrogenAtoms or LargestBondOrderToHeavyAtoms
\&    SB :  NumOfSingleBondsToNonHydrogenAtoms or NumOfSingleBondsToHeavyAtoms
\&    DB : NumOfDoubleBondsToNonHydrogenAtoms or NumOfDoubleBondsToHeavyAtoms
\&    TB : NumOfTripleBondsToNonHydrogenAtoms or NumOfTripleBondsToHeavyAtoms
\&    H :  NumOfImplicitAndExplicitHydrogens
\&    Ar : Aromatic
\&    RA : RingAtom
\&    FC : FormalCharge
\&    MN : MassNumber
\&    SM : SpinMultiplicity
.Ve
.Sp
\&\fIAtomTypes::AtomicInvariantsAtomTypes\fR module is used to assign atomic invariant
atom types.
.ie n .IP "\fB\-\-FunctionalClassesToUse\fR \fI""FunctionalClass1,FunctionalClass2...""\fR" 4
.el .IP "\fB\-\-FunctionalClassesToUse\fR \fI``FunctionalClass1,FunctionalClass2...''\fR" 4
.IX Item "--FunctionalClassesToUse FunctionalClass1,FunctionalClass2..."
This value is used during \fIFunctionalClassAtomTypes\fR value of \fBa, \-\-AtomIdentifierType\fR
option. It's a list of comma separated valid functional classes.
.Sp
Possible values for atom functional classes are: \fIAr, \s-1CA, H, HBA, HBD,\s0 Hal, \s-1NI, PI, RA\s0\fR.
Default value [ Ref 24 ]: \fI\s-1HBD,HBA,PI,NI\s0,Ar,Hal\fR.
.Sp
The functional class abbreviations correspond to:
.Sp
.Vb 9
\&    HBD: HydrogenBondDonor
\&    HBA: HydrogenBondAcceptor
\&    PI :  PositivelyIonizable
\&    NI : NegativelyIonizable
\&    Ar : Aromatic
\&    Hal : Halogen
\&    H : Hydrophobic
\&    RA : RingAtom
\&    CA : ChainAtom
\&
\& Functional class atom type specification for an atom corresponds to:
\&
\&    Ar.CA.H.HBA.HBD.Hal.NI.PI.RA
.Ve
.Sp
\&\fIAtomTypes::FunctionalClassAtomTypes\fR module is used to assign functional class atom
types. It uses following definitions [ Ref 60\-61, Ref 65\-66 ]:
.Sp
.Vb 4
\&    HydrogenBondDonor: NH, NH2, OH
\&    HydrogenBondAcceptor: N[!H], O
\&    PositivelyIonizable: +, NH2
\&    NegativelyIonizable: \-, C(=O)OH, S(=O)OH, P(=O)OH
.Ve
.IP "\fB\-\-CompoundID\fR \fIDataFieldName or LabelPrefixString\fR" 4
.IX Item "--CompoundID DataFieldName or LabelPrefixString"
This value is \fB\-\-CompoundIDMode\fR specific and indicates how compound \s-1ID\s0 is generated.
.Sp
For \fIDataField\fR value of \fB\-\-CompoundIDMode\fR option, it corresponds to datafield label name
whose value is used as compound \s-1ID\s0; otherwise, it's a prefix string used for generating compound
IDs like LabelPrefixString<Number>. Default value, \fICmpd\fR, generates compound IDs which
look like Cmpd<Number>.
.Sp
Examples for \fIDataField\fR value of \fB\-\-CompoundIDMode\fR:
.Sp
.Vb 2
\&    MolID
\&    ExtReg
.Ve
.Sp
Examples for \fILabelPrefix\fR or \fIMolNameOrLabelPrefix\fR value of \fB\-\-CompoundIDMode\fR:
.Sp
.Vb 1
\&    Compound
.Ve
.Sp
The value specified above generates compound IDs which correspond to Compound<Number>
instead of default value of Cmpd<Number>.
.IP "\fB\-\-CompoundIDLabel\fR \fItext\fR" 4
.IX Item "--CompoundIDLabel text"
Specify compound \s-1ID\s0 column label for \s-1FP\s0 or \s-1CSV/TSV\s0 text file(s) used during \fICompoundID\fR value
of \fB\-\-DataFieldsMode\fR option. Default: \fICompoundID\fR.
.IP "\fB\-\-CompoundIDMode\fR \fIDataField | MolName | LabelPrefix | MolNameOrLabelPrefix\fR" 4
.IX Item "--CompoundIDMode DataField | MolName | LabelPrefix | MolNameOrLabelPrefix"
Specify how to generate compound IDs and write to \s-1FP\s0 or \s-1CSV/TSV\s0 text file(s) along with generated
fingerprints for \fI\s-1FP\s0 | text | all\fR values of \fB\-\-output\fR option: use a \fISDFile(s)\fR datafield value;
use molname line from \fISDFile(s)\fR; generate a sequential \s-1ID\s0 with specific prefix; use combination
of both MolName and LabelPrefix with usage of LabelPrefix values for empty molname lines.
.Sp
Possible values: \fIDataField | MolName | LabelPrefix | MolNameOrLabelPrefix\fR.
Default: \fILabelPrefix\fR.
.Sp
For \fIMolNameAndLabelPrefix\fR value of \fB\-\-CompoundIDMode\fR, molname line in \fISDFile(s)\fR takes
precedence over sequential compound IDs generated using \fILabelPrefix\fR and only empty molname
values are replaced with sequential compound IDs.
.Sp
This is only used for \fICompoundID\fR value of \fB\-\-DataFieldsMode\fR option.
.ie n .IP "\fB\-\-DataFields\fR \fI""FieldLabel1,FieldLabel2,...""\fR" 4
.el .IP "\fB\-\-DataFields\fR \fI``FieldLabel1,FieldLabel2,...''\fR" 4
.IX Item "--DataFields FieldLabel1,FieldLabel2,..."
Comma delimited list of \fISDFiles(s)\fR data fields to extract and write to \s-1CSV/TSV\s0 text file(s) along
with generated fingerprints for \fItext | all\fR values of \fB\-\-output\fR option.
.Sp
This is only used for \fISpecify\fR value of \fB\-\-DataFieldsMode\fR option.
.Sp
Examples:
.Sp
.Vb 2
\&    Extreg
\&    MolID,CompoundName
.Ve
.IP "\fB\-d, \-\-DataFieldsMode\fR \fIAll | Common | Specify | CompoundID\fR" 4
.IX Item "-d, --DataFieldsMode All | Common | Specify | CompoundID"
Specify how data fields in \fISDFile(s)\fR are transferred to output \s-1CSV/TSV\s0 text file(s) along
with generated fingerprints for \fItext | all\fR values of \fB\-\-output\fR option: transfer all \s-1SD\s0
data field; transfer \s-1SD\s0 data files common to all compounds; extract specified data fields;
generate a compound \s-1ID\s0 using molname line, a compound prefix, or a combination of both.
Possible values: \fIAll | Common | specify | CompoundID\fR. Default value: \fICompoundID\fR.
.IP "\fB\-f, \-\-Filter\fR \fIYes | No\fR" 4
.IX Item "-f, --Filter Yes | No"
Specify whether to check and filter compound data in SDFile(s). Possible values: \fIYes or No\fR.
Default value: \fIYes\fR.
.Sp
By default, compound data is checked before calculating fingerprints and compounds containing
atom data corresponding to non-element symbols or no atom data are ignored.
.IP "\fB\-\-FingerprintsLabel\fR \fItext\fR" 4
.IX Item "--FingerprintsLabel text"
\&\s-1SD\s0 data label or text file column label to use for fingerprints string in output \s-1SD\s0 or
\&\s-1CSV/TSV\s0 text file(s) specified by \fB\-\-output\fR. Default value: \fIAtomNeighborhoodsFingerprints\fR.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-k, \-\-KeepLargestComponent\fR \fIYes | No\fR" 4
.IX Item "-k, --KeepLargestComponent Yes | No"
Generate fingerprints for only the largest component in molecule. Possible values:
\&\fIYes or No\fR. Default value: \fIYes\fR.
.Sp
For molecules containing multiple connected components, fingerprints can be generated
in two different ways: use all connected components or just the largest connected
component. By default, all atoms except for the largest connected component are
deleted before generation of fingerprints.
.IP "\fB\-\-MinNeighborhoodRadius\fR \fInumber\fR" 4
.IX Item "--MinNeighborhoodRadius number"
Minimum atom neighborhood radius for generating atom neighborhoods. Default value: \fI0\fR.
Valid values: positive integers and less than \fB\-\-MaxNeighborhoodRadius\fR. Neighborhood
radius of zero corresponds to list of non-hydrogen atoms.
.IP "\fB\-\-MaxNeighborhoodRadius\fR \fInumber\fR" 4
.IX Item "--MaxNeighborhoodRadius number"
Maximum atom neighborhood radius for generating atom neighborhoods. Default value: \fI2\fR.
Valid values: positive integers and greater than \fB\-\-MineighborhoodRadius\fR.
.IP "\fB\-\-OutDelim\fR \fIcomma | tab | semicolon\fR" 4
.IX Item "--OutDelim comma | tab | semicolon"
Delimiter for output \s-1CSV/TSV\s0 text file(s). Possible values: \fIcomma, tab, or semicolon\fR
Default value: \fIcomma\fR.
.IP "\fB\-\-output\fR \fI\s-1SD\s0 | \s-1FP\s0 | text | all\fR" 4
.IX Item "--output SD | FP | text | all"
Type of output files to generate. Possible values: \fI\s-1SD, FP,\s0 text, or all\fR. Default value: \fItext\fR.
.IP "\fB\-o, \-\-overwrite\fR" 4
.IX Item "-o, --overwrite"
Overwrite existing files.
.IP "\fB\-q, \-\-quote\fR \fIYes | No\fR" 4
.IX Item "-q, --quote Yes | No"
Put quote around column values in output \s-1CSV/TSV\s0 text file(s). Possible values:
\&\fIYes or No\fR. Default value: \fIYes\fR.
.IP "\fB\-r, \-\-root\fR \fIRootName\fR" 4
.IX Item "-r, --root RootName"
New file name is generated using the root: <Root>.<Ext>. Default for new file names:
<SDFileName><AtomNeighborhoodsFP>.<Ext>. The file type determines <Ext>
value. The sdf, fpf, csv, and tsv <Ext> values are used for \s-1SD,\s0 comma/semicolon, and tab
delimited text files, respectively.This option is ignored for multiple input files.
.IP "\fB\-w, \-\-WorkingDir\fR \fIDirName\fR" 4
.IX Item "-w, --WorkingDir DirName"
Location of working directory. Default: current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using atomic invariants atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 1
\&    % AtomNeighborhoodsFingerprints.pl \-r SampleANFP \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using \s-1DREIDING\s0 atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a DREIDINGAtomTypes \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using EStateAtomTypes types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a EStateAtomTypes \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using \s-1SYBYL\s0 atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a SYBYLAtomTypes \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using FunctionalClass atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a FunctionalClassAtomTypes
\&      \-r SampleANFP \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using \s-1MMFF94\s0 atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a MMFF94AtomTypes \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using SLogP atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a SLogPAtomTypes \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using \s-1SYBYL\s0 atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a SYBYLAtomTypes \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using \s-1TPSA\s0 atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a TPSAAtomTypes \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using \s-1UFF\s0 atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a UFFAtomTypes \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using atomic invariants atom types in vector string format and create SampleANFP.sdf,
SampleANFP.fpf and SampleANFP.csv files containing sequential compound IDs in \s-1CSV\s0 file along
with fingerprints vector strings data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-\-output all \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 1 to
3 using atomic invariants atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 3
\&    % AtomNeighborhoodsFingerprints.pl \-a AtomicInvariantsAtomTypes
\&      \-\-MinNeighborhoodRadius 1 \-\-MaxNeighborhoodRadius 3 \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using only \s-1AS,X\s0 atomic invariants atom types in vector string format and create a SampleANFP.csv
file containing sequential compound IDs along with fingerprints vector strings data, type:
.PP
.Vb 3
\&    % AtomNeighborhoodsFingerprints.pl \-a AtomicInvariantsAtomTypes
\&      \-\-AtomicInvariantsToUse "AS,X" \-\-MinNeighborhoodRadius 0
\&      \-\-MaxNeighborhoodRadius 3 \-r SampleANFP \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using atomic invariants atom types in vector string format and create a SampleANFP.csv
file containing compound \s-1ID\s0 from molecule name line along with fingerprints vector strings data, type:
.PP
.Vb 3
\&    % AtomNeighborhoodsFingerprints.pl \-a AtomicInvariantsAtomTypes
\&      \-\-DataFieldsMode CompoundID \-\-CompoundIDMode MolName
\&      \-r SampleANFP \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using atomic invariants atom types in vector string format and create a SampleANFP.csv
file containing compound IDs using specified data field along with fingerprints vector strings
data, type:
.PP
.Vb 3
\&    % AtomNeighborhoodsFingerprints.pl \-a AtomicInvariantsAtomTypes
\&      \-\-DataFieldsMode CompoundID \-\-CompoundIDMode DataField \-\-CompoundID
\&      Mol_ID \-r SampleANFP \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using atomic invariants atom types in vector string format and create a SampleANFP.csv
file containing compound \s-1ID\s0 using combination of molecule name line and an explicit compound
prefix along with fingerprints vector strings data, type:
.PP
.Vb 3
\&    % AtomNeighborhoodsFingerprints.pl \-a AtomicInvariantsAtomTypes
\&      \-\-DataFieldsMode CompoundID \-\-CompoundIDMode MolnameOrLabelPrefix
\&      \-\-CompoundID Cmpd \-\-CompoundIDLabel MolID \-r SampleANFP \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using atomic invariants atom types in vector string format and create a SampleANFP.csv
file containing specific data fields columns along with fingerprints vector strings
data, type:
.PP
.Vb 3
\&    % AtomNeighborhoodsFingerprints.pl \-a AtomicInvariantsAtomTypes
\&      \-\-DataFieldsMode Specify \-\-DataFields Mol_ID \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using atomic invariants atom types in vector string format and create a SampleANFP.csv
file containing common data fields columns along with fingerprints vector strings
data, type:
.PP
.Vb 2
\&    % AtomNeighborhoodsFingerprints.pl \-a AtomicInvariantsAtomTypes
\&      \-\-DataFieldsMode Common \-r SampleANFP \-o Sample.sdf
.Ve
.PP
To generate atom neighborhoods fingerprints corresponding to atom neighborhood radii from 0 to
2 using atomic invariants atom types in vector string format and create SampleANFP.sdf,
 SampleANFP.fpf and SampleANFP.csv files containing all data fields columns in \s-1CSV\s0 file along with
fingerprints data, type:
.PP
.Vb 3
\&    % AtomNeighborhoodsFingerprints.pl \-a AtomicInvariantsAtomTypes
\&      \-\-DataFieldsMode All  \-\-output all \-r SampleANFP
\&      \-o Sample.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
InfoFingerprintsFiles.pl, SimilarityMatricesFingerprints.pl, SimilaritySearchingFingerprints.pl,
ExtendedConnectivityFingerprints.pl, MACCSKeysFingerprints.pl, PathLengthFingerprints.pl,
TopologicalAtomPairsFingerprints.pl, TopologicalAtomTorsionsFingerprints.pl,
TopologicalPharmacophoreAtomPairsFingerprints.pl, TopologicalPharmacophoreAtomTripletsFingerprints.pl
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
