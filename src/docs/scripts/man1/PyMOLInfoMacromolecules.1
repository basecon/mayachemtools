.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PyMOLInfoMacromolecules 1"
.TH PyMOLInfoMacromolecules 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PyMOLInfoMacromolecules.py \- List information about macromolecules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
PyMOLInfoMacromolecules.py [\fB\-\-all\fR] [\fB\-\-boundingBox\fR] [\fB\-\-chains\fR] [\fB\-\-countResidues\fR] 
[\fB\-\-header\fR] [\fB\-\-inorganics\fR] [\fB\-\-interfaceResidues\fR]
[\fB\-\-interfaceResiduesChains\fR <ChainID1,ChainD2,...>] [\fB\-\-interfaceResiduesMethod\fR <text>]
[\fB\-\-interfaceResiduesCutoff\fR <number>] [\fB\-\-ligands\fR] [\fB\-\-pocketLigands\fR]
[\fB\-\-pocketDistanceCutoff\fR  <number>] [\fB\-\-pocketSolvents\fR] [\fB\-\-pocketInorganics\fR]
[\fB\-\-phiPsi\fR] [\fB\-\-phiPsiMode\fR <All or Categories>] [\fB\-\-phiPsiPrecision\fR <number>]
[\fB\-\-surfaceResidues\fR] [\fB\-\-surfaceResiduesCutoff\fR <number>] [\fB\-\-surfaceResiduesIDs\fR <yes or no>]
[\fB\-\-solvents\fR] [\fB\-w\fR <dir>] \fB\-i\fR <infile1,infile2,infile3...>
.PP
PyMOLInfoMacromolecules.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
List information regarding  \s-1ID,\s0 classification, experimental technique, chains,
solvents, inorganics, ligands, and ligand binding pockets in macromolecules
present including proteins and nucleic acids.
.PP
The supported input  file format are: \s-1PDB \s0(.pdb), mmCIF (.cif)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-all\fR" 4
.IX Item "-a, --all"
All available information.
.IP "\fB\-b, \-\-boundingBox\fR" 4
.IX Item "-b, --boundingBox"
Min and max coordinates for bounding box along with its size.
.IP "\fB\-c, \-\-chains\fR" 4
.IX Item "-c, --chains"
Number of chains and their IDs. This is also default behavior.
 \-\-countResidues
Number of residues across chains. The chain residues are identified
using polymer selection operator available in PyMOL. In addition,
the non-standard amino acid residues are listed.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
 \-\-header
Header information including experimental technique information
along with any available resolution. This is also default behavior.
.IP "\fB\-i, \-\-infiles\fR <infile1,infile2,infile3...>" 4
.IX Item "-i, --infiles <infile1,infile2,infile3...>"
A comma delimited list of input files. The wildcards are also allowed
in file names.
.IP "\fB\-\-inorganics\fR" 4
.IX Item "--inorganics"
Inorganic residues across chains. The inorganic residues are identified
using inorganic selection operator available in PyMOL.
.IP "\fB\-\-interfaceResidues\fR" 4
.IX Item "--interfaceResidues"
Interface residues between specified pairs of chains.
.IP "\fB\-\-interfaceResiduesChains\fR <ChainID1,Chain1D2,...>  [default: Auto]" 4
.IX Item "--interfaceResiduesChains <ChainID1,Chain1D2,...> [default: Auto]"
Pairwise comma delimited list of chain IDs for the identification of
interface residues. Each chain \s-1ID\s0 may contain mutiple chain IDs
delimited by a plus sign. For example: A+B,C+D chain pair specifies
interface between chain complexes A+B and C+D.
.Sp
The interface residues are identified between first two chains in
input files by default.
.IP "\fB\-\-interfaceResiduesMethod\fR <text>  [default: BySASAChange]" 4
.IX Item "--interfaceResiduesMethod <text> [default: BySASAChange]"
Methodology for the identification of interface residues between a pair
of chains in an input file. The interface residues may be identified by
change in solvent accessible surface area (\s-1SASA\s0) for a residue between
a chain and chains complex, distance between heavy atoms
in two chains, or distance between CAlpha atoms. Possible values:
BySASAChange, ByHeavyAtomsDistance, or ByCAlphaAtomsDistance.
.IP "\fB\-\-interfaceResiduesCutoff\fR <number>  [default: auto]" 4
.IX Item "--interfaceResiduesCutoff <number> [default: auto]"
Cutoff value used by different methodologies during identification of
interface residues between a pair of chains. The default values are
shown below:
.Sp
.Vb 3
\&    BySASAChange: 1.0; Units: Angstrom**2 [ Ref 141 ]
\&    ByHeavyAtomsDistance: 5.0; Units: Angstrom [ Ref 142 ]
\&    ByCAlphaAtomsDistance: 8.0; Units: Angstrom [ Ref 143 ]
.Ve
.IP "\fB\-l, \-\-ligands\fR" 4
.IX Item "-l, --ligands"
Ligands across chains. This is also default behavior. The ligands
residues are identified using organic selection operator available
in PyMOL.
.IP "\fB\-p, \-\-pocketLigands\fR" 4
.IX Item "-p, --pocketLigands"
Chain residues in ligand pockets.
.IP "\fB\-\-pocketDistanceCutoff\fR <number>  [default: 5.0]" 4
.IX Item "--pocketDistanceCutoff <number> [default: 5.0]"
Distance in Angstroms for identifying pocket residues around ligands.
.IP "\fB\-\-pocketSolvents\fR" 4
.IX Item "--pocketSolvents"
Solvent residues in ligand pockets. The solvent residues are identified
using solvent selection operator available in PyMOL.
.IP "\fB\-\-pocketInorganics\fR" 4
.IX Item "--pocketInorganics"
Inorganic residues in ligand pockets. The inorganic residues are identified
using Inorganic selection operator available in PyMOL.
 \-\-phiPsi
Phi and psi torsion angles across chains in macromolecules containing
amino acids.
 \-\-phiPsiMode <All or Categories>  [default: Categories]
List all phi and psi torsion angles for residues as a single group or split
them into the following categories corresponding to four types of
Ramachandran plots:
.Sp
.Vb 5
\&    General: All residues except glycine, proline, or pre\-proline
\&    Glycine: Only glycine residues
\&    Proline: Only proline residues
\&    Pre\-Proline: Only residues before proline not including glycine
\&        or proline
\&
\& \-\-phiPsiPrecision <number>  [default: 2]
\&Precision for listing phi and psi torsion angles.
.Ve
.IP "\fB\-s, \-\-solvents\fR" 4
.IX Item "-s, --solvents"
Solvent residues across chains. The solvent residues are identified
using solvent selection operator available in PyMOL.
.IP "\fB\-\-surfaceResidues\fR" 4
.IX Item "--surfaceResidues"
Surface and buried residues in chains.
.IP "\fB\-\-surfaceResiduesCutoff\fR <number>  [default: 2.5]" 4
.IX Item "--surfaceResiduesCutoff <number> [default: 2.5]"
Solvenet Accessible Surface Area (\s-1SASA\s0) cutoff value in Angstroms**2
for surface and buried resiudes in chains. The residues with \s-1SASA\s0 less than
the cutoff value correspond to burried residues.
.IP "\fB\-\-surfaceResiduesIDs\fR <yes or no>  [default: No]" 4
.IX Item "--surfaceResiduesIDs <yes or no> [default: No]"
List residue IDs for surface and buried residues during listing of the
distribution of these residues for '\-\-surfaceResidues' option.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To list header, chains, and ligand information for macromolecules in input
file, type:
.PP
.Vb 1
\&    % PyMOLInfoMacromolecules.py  \-i Sample3.pdb
.Ve
.PP
To list all available information for macromolecules in input files, type:
.PP
.Vb 1
\&    % PyMOLInfoMacromolecules.py  \-a  \-i "Sample3.pdb,Sample4.pdb"
.Ve
.PP
To list pockets residues information along with other default information
for marcomolecules in input file, type:
.PP
.Vb 2
\&    % PyMOLInfoMacromolecules.py  \-p \-\-pocketDistanceCutoff 4.5 
\&    \-\-pocketSolvents  \-\-pocketInorganics \-i Sample3.pdb
.Ve
.PP
To list chain residues information along with other default information
for marcomolecules in input file, type:
.PP
.Vb 2
\&    % PyMOLInfoMacromolecules.py  \-c \-\-countResidues \-\-solvents
\&    \-\-inorganics \-i "Sample3.pdb,Sample4.pdb"
.Ve
.PP
To list interface residues between first two chains by \s-1SASA\s0 change for
marcomolecules in input file, type:
.PP
.Vb 2
\&    % PyMOLInfoMacromolecules.py  \-\-interfaceResidues
\&    \-i Sample3.pdb
.Ve
.PP
To list interface residues between chains E and I  by heay atoms
distance for marcomolecules in input file, type:
.PP
.Vb 3
\&    % PyMOLInfoMacromolecules.py  \-\-interfaceResidues
\&    \-\-interfaceResiduesChains E,I  \-\-interfaceResiduesMethod
\&    ByHeavyAtomsDistance \-\-interfaceResiduesCutoff  5 \-i Sample3.pdb
.Ve
.PP
To list interface residues between two sets of chains by \s-1SASA\s0 change for
marcomolecules in input file, type:
.PP
.Vb 2
\&    % PyMOLInfoMacromolecules.py  \-\-interfaceResidues
\&    \-\-interfaceResiduesChains "A+B,C+D" \-i Sample8.pdb
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DownloadPDBFiles.pl, PyMOLSplitChainsAndLigands.py,
PyMOLVisualizeMacromolecules.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using PyMOL, a
molecular visualization system on an open source foundation originally
developed by Warren DeLano.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
