.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitPerformPositionalAnalogueScan 1"
.TH RDKitPerformPositionalAnalogueScan 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitPerformPositionalAnalogueScan.py \- Positional analogue scanning.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitPerformPositionalAnalogueScan.py [\fB\-\-comboSearchAtoms\fR <number>] [\fB\-\-infileParams\fR <Name,Value,...>]
[\fB\-\-mode\fR <ReplaceAtoms, AttachAtoms, AttachSMILES, RxnSMARTS, TandemScan>]
[\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name,Value,...>] [ \fB\-\-nameSuffix\fR <text>] [ \fB\-\-outfileParams\fR <Name,Value,...> ]
[\fB\-\-overwrite\fR] [\fB\-\-permuteTandemScan\fR <yes or no>] [\fB\-\-quiet\fR <yes or no>] [\fB\-\-searchPattern\fR <SMARTSPattern>]
[\fB\-\-targetPattern\fR <ElementSymbol, \s-1SMILES,\s0 RxnSMARTS,...>] [\fB\-\-uniqueAnalogues\fR <yes or no> ]
[\fB\-w\fR <dir>] \fB\-i\fR <infile>  \fB\-o\fR <outfile>
.PP
RDKitPerformPositionalAnalogueScan.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perform Positional Analogue Scanning (\s-1PAS\s0) to generate analogues of molecules
by applying chemical transformations to molecules [ Ref 147\-148 ]. The chemical
transformations are defined using \s-1SMARTS,\s0 element symbols, \s-1SMILES,\s0 and 
RxnSMARTS. Four different types of chemical transformations are available for
for generating analogues of molecules: replace atoms, attach atoms, attach \s-1SMILES,\s0
and RxnSMARTS. Tandem positional analogue scanning may be performed by the
concurrent application of multiple chemical transformations.
.PP
A \s-1SMARTS\s0 search pattern identifies atoms in molecules for attachment or
replacement points during positional analogue scanning. It may retrieve multiple
substructure matches in a molecule. The first matched atom in each substructure
match comprises a set of attachment or replacement points.
.PP
A target pattern encompasses information regarding element symbol, \s-1SMILES,\s0 and
reaction \s-1SMARTS\s0 for replacing and attaching atoms, attaching \s-1SMILES,\s0 and applying
reaction \s-1SMARTS.\s0 In addition, multiple concurrent chemical transformations may
be specified during tandem positional analogue scanning.
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi,
\&.csv, .tsv .txt)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi, .csv,
\&.tsv .txt)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-c, \-\-comboSearchAtoms\fR <number>  [default: 1]" 4
.IX Item "-c, --comboSearchAtoms <number> [default: 1]"
Number of concurrent search pattern match atoms to use as attachment or
replacement points during positional analogue scanning in 'AttachAtoms', 
\&'AttachSMILES', and 'ReplaceAtoms' modes. This value is ignored during 
\&'RxnSMARTS' and 'TandemScan' values of  '\-m, \-\-mode' option.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD, MOL: removeHydrogens,yes,sanitize,yes,strictParsing,yes
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-m, \-\-mode\fR <ReplaceAtoms, AttachAtoms,...>  [default: ReplaceAtoms]" 4
.IX Item "-m, --mode <ReplaceAtoms, AttachAtoms,...> [default: ReplaceAtoms]"
Type of operations to perform during positional analogue scanning. The
supported values, along with a brief description, are shown below:
.Sp
.Vb 7
\&    Mode           Description
\&    ReplaceAtoms   Replace atoms with new atoms
\&    AttachAtoms    Attach new atoms to atoms
\&    AttachSMILES   Attach SMILES to atoms
\&    RxnSMARTS      Run reaction SMARTS
\&    TandemScan     Perform tandem scan by combining ReplaceAtoms,
\&        AttachAtoms, and AttachSMILES
.Ve
.Sp
The chemical transformations of input molecules is dependent on the
values of '\-s, \-\-searchPattern' and  '\-t, \-\-targetPattern' options. For
example, nitrogen-walk or nitrogen scan is performed by '[cH]' and 'N'
values for '\-s, \-\-searchPattern' and  '\-t, \-\-targetPattern' options.
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for to
configure multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-n, \-\-nameSuffix\fR <text>  [default: Analogue]" 4
.IX Item "-n, --nameSuffix <text> [default: Analogue]"
Name suffix for generating molecule names of analogues. Format of analogue
names: <MolName>_<NameSuffix>_<MolNum>
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD: compute2DCoords,auto,kekulize,no
\&    SMILES: kekulize,no,smilesDelimiter,space, smilesIsomeric,yes,
\&        smilesTitleLine,yes,smilesMolName,yes,smilesMolProps,no
.Ve
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-p, \-\-permuteTandemScan\fR <yes or no>  [default: yes]" 4
.IX Item "-p, --permuteTandemScan <yes or no> [default: yes]"
Permute atom positions matched by \s-1SMARTS\s0 search pattern in a molecule
to generate all possible analogues during tandem positional analogue
scanning.
.Sp
This option is only valid for 'TandemScan' value of '\-m, \-\-mode' option.
.IP "\fB\-q, \-\-quiet\fR <yes or no>  [default: no]" 4
.IX Item "-q, --quiet <yes or no> [default: no]"
Use quiet mode. The warning and information messages will not be printed.
.IP "\fB\-s, \-\-searchPattern\fR <SMARTSPattern>  [default: auto]" 4
.IX Item "-s, --searchPattern <SMARTSPattern> [default: auto]"
\&\s-1SMARTS\s0 search pattern identifying atoms in molecules for attachment or
replacement points during positional analogue scanning. The \s-1SMARTS\s0 search
pattern may retrieve multiple substructure matches in a molecule. The first
matched atom in each substructure match comprises a set of attachment or
replacement points.
.Sp
The default values, dependent on the value of '\-m, \-\-mode' option, are
shown below:
.Sp
.Vb 6
\&    Mode            Default   Description
\&    ReplaceAtoms    [cH]      Aromatic carbon  
\&    AttachAtoms     [cH]      Aromatic carbon
\&    AttachSMILES    [cH]      Aromatic carbon
\&    RxnSMARTS       None      Not applicable
\&    TandemScan      [cH]      Aromatic carbon
.Ve
.Sp
This option is ignored during 'RxnSMARTS' value of '\-m, \-\-mode' option.
.IP "\fB\-t, \-\-targetPattern\fR <ElementSymbol, \s-1SMILES,\s0 RxnSMARTS...>  [default: auto]" 4
.IX Item "-t, --targetPattern <ElementSymbol, SMILES, RxnSMARTS...> [default: auto]"
Target pattern for performing chemical transformations during positional
analogue scanning. These values are used in conjunction with the value of
\&'\-s, \-\-searchPattern' to generate appropriate analogues.
.Sp
The default values, dependent on the values of '\-m, \-\-mode' and 
\&'\-s, \-\-searchPattern' options, are shown below:
.Sp
.Vb 6
\&    Mode            Default        Description
\&    ReplaceAtoms    N              Element symbol for nitrogen
\&    AttachAtoms     F              Element symbol for fluorine
\&    AttachSMILES    C(F)(F)(F)     SMILES for CF3
\&    RxnSMARTS       [cH:1]>>[N:1]  Replace aromatic carbon by nitrogen
\&    TandemScan      ReplaceAtoms,N,AttachAtoms,F  Replace and attach
.Ve
.Sp
Multiple concurrent chemical transformations are allowed during 'TandemScan'. The
target pattern specification for 'TandemScan' is a comma delimited list of operation
type and target pattern. Format: OperationType,TargetPattern,...
.Sp
The supported operation types and target pattern are shown below:
.Sp
.Vb 3
\&    ReplaceAtoms,<ElementSymbol>
\&    AttachAtoms,<ElementSymbol>
\&    AttachSMILES,<SMILES>
.Ve
.Sp
For example:
.Sp
.Vb 2
\&    ReplaceAtoms,N,AttachAtoms,F
\&    ReplaceAtoms,N,AttachAtoms,F,AttachSMILES,C(F)(F)(F)
.Ve
.Sp
The number of chemical transformations  in 'TandemScan' must be less than or
equal to the total number atoms matched by \s-1SMARTS\s0 search pattern in a molecule.
Otherwise, it is not possible to perform a 'TandemScan'. The matched atom positions
may be optionally permuted to generate all possible analogues during  positional
analogue scanning using '\-p, \-\-permuteTandemScan' option.
.IP "\fB\-u, \-\-uniqueAnalogues\fR <yes or no>  [default: yes]" 4
.IX Item "-u, --uniqueAnalogues <yes or no> [default: yes]"
Keep only unique analogues of a molecule corresponding to unique \s-1SMILES\s0
strings. The duplicate \s-1SMILES\s0 string may be generated during \s-1PAS\s0 due to
symmetric replacement or attachment points in molecules.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To perform a nitrogen-walk or nitrogen scan by replacing aromatic carbons by
nitrogens in molecules in a \s-1SMILES\s0 file and write out a \s-1SMILES\s0 file, type:
.PP
.Vb 1
\&    % RDKitPerformPositionalAnalogueScan.py  \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To run the first example by explicity specifying search and target patterns for
replacing aromatic carbons by nitogens in molecules in a \s-1SD\s0 file and write out
a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitPerformPositionalAnalogueScan.py  \-m ReplaceAtoms \-s "[cH]"
\&      \-t "N" \-i Sample.sdf \-o SampleOut.sdf
.Ve
.PP
To run the first example in multiprocessing mode on all available CPUs
without loading all data into memory and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitPerformPositionalAnalogueScan.py  \-i Sample.smi \-o SampleOut.sdf
\&      \-\-mp yes
.Ve
.PP
To run the previous example in multiprocessing mode on all available CPUs
by loading all data into memory and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitPerformPositionalAnalogueScan.py  \-i Sample.smi \-o SampleOut.sdf
\&      \-\-mp yes \-\-mpParams "inputDataMode,InMemory"
.Ve
.PP
To run the previous example in multiprocessing mode on specific number of
CPUs and chunk size without loading all data into memory and write out a \s-1SD\s0 file,
type:
.PP
.Vb 2
\&    % RDKitPerformPositionalAnalogueScan.py  \-i Sample.smi \-o SampleOut.sdf
\&      \-\-mpParams "inputDataMode,Lazy,numProcesses,4,chunkSize,8"
.Ve
.PP
To perform positional analogue scanning by simultaneously attaching fluorines
to two aromatic carbons in molecules in a \s-1SMILES\s0 file and write out a \s-1SD\s0 file,
type:
.PP
.Vb 2
\&    % RDKitPerformPositionalAnalogueScan.py  \-m AttachAtoms \-s "[cH]"
\&      \-t "F" \-c 2 \-i Sample.smi \-o SampleOut.sdf
.Ve
.PP
To perform positional analogue scanning by attaching \s-1SMILES\s0 for \s-1CF3\s0 to aromatic
carbons in molecules in a \s-1SMILES\s0 file and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % RDKitPerformPositionalAnalogueScan.py  \-m AttachSMILES \-s "[cH]"
\&      \-t "C(F)(F)(F)" \-i Sample.smi \-o SampleOut.sdf
.Ve
.PP
To perform a nitrogen-walk or nitrogen scan by using reaction \s-1SMARTS\s0 to replace
aromatic carbons by nitrogens in molecules in a \s-1SMILES\s0 file and write out a  \s-1SMILES\s0
file,  type:
.PP
.Vb 2
\&    % RDKitPerformPositionalAnalogueScan.py  \-m RxnSMARTS
\&      \-t "[cH:1]>>[N:1]" \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To perform a tandem positional analogue scan by concurrently applying multiple
chemical transformations to aromatic carbons, permute all matched search
atom positions during analogue generation, and write out a \s-1SD\s0 file, type:
.PP
.Vb 3
\&    % RDKitPerformPositionalAnalogueScan.py  \-m TandemScan \-s "[cH]"
\&      \-t "ReplaceAtoms,N,AttachAtoms,F,AttachSMILES,OC"
\&      \-p yes  \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To perform a nitrogen-walk or nitrogen scan by replacing aromatic carbons by
nitrogens in molecules in a \s-1SMILES CSV\s0 fileS, \s-1MILES\s0 strings in column 1, name
in column 2, and write out a \s-1SD\s0 file, type:
.PP
.Vb 4
\&    % RDKitPerformPositionalAnalogueScan.py  \-m ReplaceAtoms \-s "[cH]"
\&      \-t "N" \-\-infileParams "smilesDelimiter,comma, smilesTitleLine,yes,
\&      smilesColumn,1,smilesNameColumn,2"
\&      \-i SampleSMILES.csv \-o SampleOut.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitConvertFileFormat.py, RDKitEnumerateCompoundLibrary.py,
RDKitPerformTorsionScan.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
