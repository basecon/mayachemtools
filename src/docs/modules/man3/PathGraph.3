.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PathGraph 1"
.TH PathGraph 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PathGraph
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Graph::PathGraph;
.PP
use Graph::PathGraph qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBPathGraph\fR class provides the following methods:
.PP
new, CollapseVertexAndCollectCyclicPaths, DeleteVerticesWithDegreeLessThan,
GetCyclicPaths, GetPaths, IsPathGraph, StringifyPathGraph
.PP
\&\fBPathGraph\fR class is derived from \fIGraph\fR class.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 1
\&    $NewPathGraph = new Graph::PathGraph($Graph);
.Ve
.Sp
Using specified \fIGraph\fR, \fBnew\fR method creates a new \fBPathGraph\fR object and returns
newly created \fBPathGraph\fR object.
.Sp
\&\fIGraph\fR is converted into a \fBPathGraph\fR by copying all its vertices and edges without any
associated properties data and associating a \fIPath\fR object to each edge containing edge
vertex IDs as intial path.
.IP "\fBCollapseVertexAndCollectCyclicPaths\fR" 4
.IX Item "CollapseVertexAndCollectCyclicPaths"
.Vb 1
\&    $PathGraph\->CollapseVertexAndCollectCyclicPaths($VertexID);
.Ve
.Sp
Collapses paths around a \fIVertexID\fR by updating paths around the vertex [Ref 31] and associating any
resulting cyclic paths to graph as \fBCyclicPaths\fR property name. And returns \fIPathGraph\fR.
.IP "\fBDeleteVerticesWithDegreeLessThan\fR" 4
.IX Item "DeleteVerticesWithDegreeLessThan"
.Vb 1
\&    $Return = $PathGraph\->DeleteVerticesWithDegreeLessThan($Degree);
.Ve
.Sp
Deletes vertices with degree less than \fIDegree\fR from \fIPathGraph\fR and returns \fIPathGraph\fR.
.IP "\fBGetCyclicPaths\fR" 4
.IX Item "GetCyclicPaths"
.Vb 2
\&    @CyclicPaths = $PathGraph\->GetCyclicPaths();
\&    $NumOfPaths = $PathGraph\->GetCyclicPaths();
.Ve
.Sp
Returns an array of cyclic \fIPaths\fR associated with edges in \fIPathGraph\fR. In scalar context, number
of cyclic paths is returned.
.IP "\fBGetPaths\fR" 4
.IX Item "GetPaths"
.Vb 2
\&    @Paths = $PathGraph\->GetPaths();
\&    $NumOfPaths = $PathGraph\->GetPaths();
.Ve
.Sp
Returns an array of \fIPaths\fR associated with edges in \fIPathGraph\fR. In scalar context, number
of paths is returned.
.IP "\fBIsPathGraph\fR" 4
.IX Item "IsPathGraph"
.Vb 1
\&    $Status = Graph::PathGraph::IsPathGraph($Object);
.Ve
.Sp
Returns 1 or 0 based on whether \fIObject\fR is a \fBPathGraph\fR object.
.IP "\fBStringifyPathGraph\fR" 4
.IX Item "StringifyPathGraph"
.Vb 1
\&    $String = $PathGraph\->StringifyPathGraph();
.Ve
.Sp
Returns a string containing information about traversed paths in \fIPathGraph\fR object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Graph.pm, Path.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
