.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TopologicalPharmacophoreAtomTripletsFingerprints 1"
.TH TopologicalPharmacophoreAtomTripletsFingerprints 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TopologicalPharmacophoreAtomTripletsFingerprints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Fingerprints::TopologicalPharmacophoreAtomTripletsFingerprints;
.PP
use Fingerprints::TopologicalPharmacophoreAtomTripletsFingerprints qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBTopologicalPharmacophoreAtomTripletsFingerprints\fR [ Ref 66, Ref 68\-71 ] class provides
the following methods:
.PP
new, GenerateFingerprints, , GetDescription, GetAtomTripletIDs,
SetAtomTypesToUse, SetDistanceBinSize, SetMaxDistance, SetMinDistance,
StringifyTopologicalPharmacophoreAtomTripletsFingerprints
.PP
\&\fBTopologicalPharmacophoreAtomTripletsFingerprints\fR is derived from \fBFingerprints\fR class
which in turn is  derived from \fBObjectProperty\fR base class that provides methods not explicitly
defined in \fBTopologicalPharmacophoreAtomTripletsFingerprints\fR, \fBFingerprints\fR or \fBObjectProperty\fR
classes using Perl's \s-1AUTOLOAD\s0 functionality. These methods are generated on-the-fly for a specified
object property:
.PP
.Vb 3
\&    Set<PropertyName>(<PropertyValue>);
\&    $PropertyValue = Get<PropertyName>();
\&    Delete<PropertyName>();
.Ve
.PP
Based on the values specified for \fBAtomTypesToUse\fR, pharmacophore atom types are
assigned to all non-hydrogen atoms in a molecule and a distance matrix is generated.
Using \fBMinDistance\fR, \fBMaxDistance\fR, and \fBDistanceBinSize\fR values, a
binned distance matrix is generated with lower bound on the distance bin as the distance
in distance matrix; the lower bound on the distance bin is also used as the distance between
atom pairs for generation of atom triplet identifiers.
.PP
A pharmacophore atom triplets basis set is generated for all unique atom triplets constituting
atom pairs binned distances between \fB\-\-MinDistance\fR and \fB\-\-MaxDistance\fR. The value
of \fB\-\-UseTriangleInequality\fR determines whether the triangle inequality test is applied during
generation of atom triplets basis set. The lower distance bound, along with specified pharmacophore
types, is used during generation of atom triplet IDs.
.PP
.Vb 1
\&    Let:
\&
\&    P = Valid pharmacophore atom type
\&
\&    Px = Pharmacophore atom x
\&    Py = Pharmacophore atom y
\&    Pz = Pharmacophore atom z
\&
\&    Dmin = Minimum distance corresponding to number of bonds between two atoms
\&    Dmax = Maximum distance corresponding to number of bonds between two atoms
\&    D = Distance corresponding to number of bonds between two atom
\&
\&    Bsize  = Distance bin size
\&    Nbins = Number of distance bins
\&
\&    Dxy = Distance or lower bound of binned distance between Px and Py
\&    Dxz = Distance or lower bound of binned distance between Px and Pz
\&    Dyz = Distance or lower bound of binned distance between Py and Pz
\&
\&    Then:
\&
\&    PxDyz\-PyDxz\-PzDxy = Pharmacophore atom triplet IDs for atom types Px,
\&                        Py, and Pz
\&
\&    For example: H1\-H1\-H1, H2\-HBA\-H2 and so on.
\&
\&    For default values of Dmin = 1 , Dmax = 10 and Bsize = 2, the number of
\&    distance bins, Nbins = 5, are:
\&
\&    [1, 2] [3, 4] [5, 6] [7, 8] [9 10]
\&
\&    and atom triplet basis set size is 2692.
\&
\&    Atom triplet basis set size for various values of Dmin, Dmax and Bsize in
\&    conjunction with usage of triangle inequality is:
\&
\&    Dmin    Dmax   Bsize   UseTriangleInequality   TripletBasisSetSize
\&    1       10     2       No                      4960
\&    1       10     2       Yes                     2692 [ Default ]
\&    2       12     2       No                      8436
\&    2       12     2       Yes                     4494
.Ve
.PP
Using binned distance matrix and pharmacohore atom types, occurrence of unique pharmacohore
atom triplets is counted.
.PP
The final pharmacophore atom triples count along with atom pair identifiers involving all non-hydrogen
atoms constitute pharmacophore topological atom triplets fingerprints of the molecule.
.PP
For \fIArbitrarySize\fR value of \fBAtomTripletsSetSizeToUse\fR, the fingerprint vector correspond to
only those topological pharmacophore atom triplets which are present and have non-zero count. However,
for \fIFixedSize\fR value of \fBAtomTripletsSetSizeToUse\fR, the fingerprint vector contains all possible
valid topological pharmacophore atom triplets with both zero and non-zero count values.
.PP
The current release of MayaChemTools generates the following types of topological pharmacophore
atom triplets fingerprints vector strings:
.PP
.Vb 8
\&    FingerprintsVector;TopologicalPharmacophoreAtomTriplets:ArbitrarySize:
\&    MinDistance1:MaxDistance10;696;NumericalValues;IDsAndValuesString;Ar1\-
\&    Ar1\-Ar1 Ar1\-Ar1\-H1 Ar1\-Ar1\-HBA1 Ar1\-Ar1\-HBD1 Ar1\-H1\-H1 Ar1\-H1\-HBA1 Ar1
\&    \-H1\-HBD1 Ar1\-HBA1\-HBD1 H1\-H1\-H1 H1\-H1\-HBA1 H1\-H1\-HBD1 H1\-HBA1\-HBA1 H1\-
\&    HBA1\-HBD1 H1\-HBA1\-NI1 H1\-HBD1\-NI1 HBA1\-HBA1\-NI1 HBA1\-HBD1\-NI1 Ar1\-...;
\&    46 106 8 3 83 11 4 1 21 5 3 1 2 2 1 1 1 100 101 18 11 145 132 26 14 23
\&    28 3 3 5 4 61 45 10 4 16 20 7 5 1 3 4 5 3 1 1 1 1 5 4 2 1 2 2 2 1 1 1
\&    119 123 24 15 185 202 41 25 22 17 3 5 85 95 18 11 23 17 3 1 1 6 4 ...
\&
\&    FingerprintsVector;TopologicalPharmacophoreAtomTriplets:FixedSize:MinD
\&    istance1:MaxDistance10;2692;OrderedNumericalValues;ValuesString;46 106
\&    8 3 0 0 83 11 4 0 0 0 1 0 0 0 0 0 0 0 0 21 5 3 0 0 1 2 2 0 0 1 0 0 0
\&    0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100 101 18 11 0 0 145 132 26
\&    14 0 0 23 28 3 3 0 0 5 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 61 45 10 4 0
\&    0 16 20 7 5 1 0 3 4 5 3 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 5 ...
\&
\&    FingerprintsVector;TopologicalPharmacophoreAtomTriplets:FixedSize:MinD
\&    istance1:MaxDistance10;2692;OrderedNumericalValues;IDsAndValuesString;
\&    Ar1\-Ar1\-Ar1 Ar1\-Ar1\-H1 Ar1\-Ar1\-HBA1 Ar1\-Ar1\-HBD1 Ar1\-Ar1\-NI1 Ar1\-Ar1\-P
\&    I1 Ar1\-H1\-H1 Ar1\-H1\-HBA1 Ar1\-H1\-HBD1 Ar1\-H1\-NI1 Ar1\-H1\-PI1 Ar1\-HBA1\-HB
\&    A1 Ar1\-HBA1\-HBD1 Ar1\-HBA1\-NI1 Ar1\-HBA1\-PI1 Ar1\-HBD1\-HBD1 Ar1\-HBD1\-...;
\&    46 106 8 3 0 0 83 11 4 0 0 0 1 0 0 0 0 0 0 0 0 21 5 3 0 0 1 2 2 0 0 1
\&    0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100 101 18 11 0 0 145
\&    132 26 14 0 0 23 28 3 3 0 0 5 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 61 ...
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 2
\&    $TPATFP = new TopologicalPharmacophoreAtomTripletsFingerprints(
\&                                                   %NamesAndValues);
.Ve
.Sp
Using specified \fITopologicalPharmacophoreAtomTripletsFingerprints\fR property names and values hash, \fBnew\fR
method creates a new object and returns a reference to newly created \fBTopologicalPharmacophoreAtomTripletsFingerprints\fR
object. By default, the following properties are initialized:
.Sp
.Vb 7
\&    Molecule = \*(Aq\*(Aq
\&    Type = \*(AqTopologicalPharmacophoreAtomTriplets\*(Aq
\&    MinDistance = 1
\&    MaxDistance = 10
\&    DistanceBinSize = 2
\&    UseTriangleInequality = 1
\&    AtomTypesToUse = [\*(AqHBD\*(Aq, \*(AqHBA\*(Aq, \*(AqPI\*(Aq, \*(AqNI\*(Aq, \*(AqH\*(Aq, \*(AqAr\*(Aq]
.Ve
.Sp
Examples:
.Sp
.Vb 2
\&    $TPATFP = new TopologicalPharmacophoreAtomTripletsFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule);
\&
\&    $TPATFP = new TopologicalPharmacophoreAtomTripletsFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqAtomTripletsSetSizeToUse\*(Aq => \*(AqArbitrarySize\*(Aq;
\&                              \*(AqMinDistance\*(Aq => 1,
\&                              \*(AqMaxDistance\*(Aq => 10,
\&                              \*(AqDistanceBinSize\*(Aq => 2,
\&                              \*(AqAtomTypesToUse\*(Aq => [\*(AqHBD\*(Aq, \*(AqHBA\*(Aq, \*(AqPI\*(Aq, \*(AqNI\*(Aq, \*(AqH\*(Aq, \*(AqAr\*(Aq],
\&                              \*(AqUseTriangleInequality\*(Aq => 1);
\&
\&    $TPATFP = new TopologicalPharmacophoreAtomTripletsFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqAtomTripletsSetSizeToUse\*(Aq => \*(AqFixedSize\*(Aq;
\&                              \*(AqMinDistance\*(Aq => 1,
\&                              \*(AqMaxDistance\*(Aq => 10,
\&                              \*(AqDistanceBinSize\*(Aq => 2,
\&                              \*(AqAtomTypesToUse\*(Aq => [\*(AqHBD\*(Aq, \*(AqHBA\*(Aq, \*(AqPI\*(Aq, \*(AqNI\*(Aq, \*(AqH\*(Aq, \*(AqAr\*(Aq],
\&                              \*(AqUseTriangleInequality\*(Aq => 1);
\&
\&    $TPATFP\->GenerateFingerprints();
\&    print "$TPATFP\en";
.Ve
.IP "\fBGetDescription\fR" 4
.IX Item "GetDescription"
.Vb 1
\&    $Description = $TopologicalPharmacophoreAtomTripletsFP\->GetDescription();
.Ve
.Sp
Returns a string containing description of topological pharmacophore atom triplets fingerprints.
.IP "\fBGenerateFingerprints\fR" 4
.IX Item "GenerateFingerprints"
.Vb 1
\&    $TopologicalPharmacophoreAtomTripletsFP\->GenerateFingerprints();
.Ve
.Sp
Generates topological pharmacophore atom triplets fingerprints and returns
\&\fITopologicalPharmacophoreAtomTripletsFP\fR.
.IP "\fBGetAtomTripletIDs\fR" 4
.IX Item "GetAtomTripletIDs"
.Vb 2
\&    $AtomTripletsIDsRef = $TopologicalPharmacophoreATFP\->GetAtomTripletIDs();
\&    @AtomTripletIDs = $TopologicalPharmacophoreATFP\->GetAtomTripletIDs();
.Ve
.Sp
Returns atom triplet IDs corresponding to atom pairs count values in topological pharmacophore
atom triplet fingerprints vector as an array or reference to an array.
.IP "\fBAtomTripletsSetSizeToUse\fR" 4
.IX Item "AtomTripletsSetSizeToUse"
.Vb 1
\&    $TPAFP\->AtomTripletsSetSizeToUse($Values);
.Ve
.Sp
Sets pharmacophore atom triplets set size to use for topological pharmacophore fingerprints
generation and returns \fITopologicalPharmacophoreAtomTripletsFingerprints\fR.
.Sp
Possible values for pharmacophore atom triplets set size are: \fIArbitrarySize, FizedSize\fR.
Default value: \fIArbitrarySize\fR.
.Sp
For \fIArbitrarySize\fR value of \fBAtomTripletsSetSizeToUse\fR, the fingerprint vector correspond to
only those topological pharmacophore atom triplets which are present and have non-zero count. However,
for \fIFixedSize\fR value of \fBAtomTripletsSetSizeToUse\fR, the fingerprint vector contains all possible
valid topological pharmacophore atom triplets with both zero and non-zero count values.
.IP "\fBSetAtomTypesToUse\fR" 4
.IX Item "SetAtomTypesToUse"
.Vb 2
\&    $TopologicalPharmacophoreAtomTripletsFP\->SetAtomTypesToUse($ValuesRef);
\&    $TopologicalPharmacophoreAtomTripletsFP\->SetAtomTypesToUse(@Values);
.Ve
.Sp
Sets pharmacophore atom types to use for topological pharmacophore fingerprints
generation and returns \fITopologicalPharmacophoreAtomTripletsFingerprints\fR.
.Sp
Possible values for pharmacophore atom types are: \fIAr, \s-1CA, H, HBA, HBD,\s0 Hal, \s-1NI, PI, RA\s0\fR.
Default value [ Ref 71 ] : \fI\s-1HBD,HBA,PI,NI,H\s0,Ar\fR.
.Sp
The pharmacophore atom types abbreviations correspond to:
.Sp
.Vb 9
\&    HBD: HydrogenBondDonor
\&    HBA: HydrogenBondAcceptor
\&    PI :  PositivelyIonizable
\&    NI : NegativelyIonizable
\&    Ar : Aromatic
\&    Hal : Halogen
\&    H : Hydrophobic
\&    RA : RingAtom
\&    CA : ChainAtom
.Ve
.Sp
\&\fIAtomTypes::FunctionalClassAtomTypes\fR module is used to assign pharmacophore atom
types. It uses following definitions [ Ref 60\-61, Ref 65\-66 ]:
.Sp
.Vb 4
\&    HydrogenBondDonor: NH, NH2, OH
\&    HydrogenBondAcceptor: N[!H], O
\&    PositivelyIonizable: +, NH2
\&    NegativelyIonizable: \-, C(=O)OH, S(=O)OH, P(=O)OH
.Ve
.IP "\fBSetDistanceBinSize\fR" 4
.IX Item "SetDistanceBinSize"
.Vb 1
\&    $TopologicalPharmacophoreAtomTripletsFP\->SetDistanceBinSize($Value);
.Ve
.Sp
Sets distance bin size used to bin distances between atom pairs in atom triplets and returns
\&\fITopologicalPharmacophoreAtomTriplesFP\fR.
.Sp
For default \fBMinDistance\fR and \fBMaxDistance\fR values of 1 and 10 with  \fBDistanceBinSize\fR
of 2 [ Ref 70 ], the following 5 distance bins are generated:
.Sp
.Vb 1
\&    [1, 2] [3, 4] [5, 6] [7, 8] [9 10]
.Ve
.Sp
The lower distance bound on the distance bin is uses to bin the distance between atom pairs in
atom triplets. So in the previous example, atom pairs with distances 1 and 2 fall in first distance
bin, atom pairs with distances 3 and 4  fall in second distance bin and so on.
.Sp
In order to distribute distance bins of equal size, the last bin is allowed to go past \fBMaxDistance\fR
by up to distance bin size. For example, \fBMinDistance\fR and \fBMaxDistance\fR values of 2 and 10
with \fBDistanceBinSize\fR of 2 generates the following 6 distance bins:
.Sp
.Vb 1
\&    [2, 3] [4, 5] [6, 7] [8, 9] [10 11]
.Ve
.IP "\fBSetMaxDistance\fR" 4
.IX Item "SetMaxDistance"
.Vb 1
\&    $TopologicalPharmacophoreAtomTriplesFP\->SetMaxDistance($Value);
.Ve
.Sp
Sets maximum bond distance between atom pairs  corresponding to atom triplets for
generating topological pharmacophore atom triplets fingerprints and returns
\&\fITopologicalPharmacophoreAtomTriplesFP\fR.
.IP "\fBSetMinDistance\fR" 4
.IX Item "SetMinDistance"
.Vb 1
\&    $TopologicalPharmacophoreAtomTriplesFP\->SetMinDistance($Value);
.Ve
.Sp
Sets minimum bond distance between atom pairs  corresponding to atom triplets for
generating topological pharmacophore atom triplets fingerprints and returns
\&\fITopologicalPharmacophoreAtomTriplesFP\fR.
.IP "\fBStringifyTopologicalPharmacophoreAtomTripletsFingerprints\fR" 4
.IX Item "StringifyTopologicalPharmacophoreAtomTripletsFingerprints"
.Vb 2
\&    $String = $TopologicalPharmacophoreAtomTripletsFingerprints\->
\&                   StringifyTopologicalPharmacophoreAtomTripletsFingerprints();
.Ve
.Sp
Returns a string containing information about \fITopologicalPharmacophoreAtomTripletsFingerprints\fR object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Fingerprints.pm, FingerprintsStringUtil.pm, AtomNeighborhoodsFingerprints.pm,
AtomTypesFingerprints.pm, EStateIndiciesFingerprints.pm, ExtendedConnectivityFingerprints.pm,
MACCSKeys.pm, PathLengthFingerprints.pm, TopologicalAtomPairsFingerprints.pm,
TopologicalAtomTripletsFingerprints.pm, TopologicalAtomTorsionsFingerprints.pm,
TopologicalPharmacophoreAtomPairsFingerprints.pm,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
