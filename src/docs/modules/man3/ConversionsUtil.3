.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ConversionsUtil 1"
.TH ConversionsUtil 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ConversionsUtil
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use ConversionsUtil;
.PP
use ConversionsUtil qw(:math);
.PP
use ConversionsUtil qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBConversionsUtil\fR module provides the following functions:
.PP
BinaryToDecimal, BinaryToHexadecimal, DecimalToBinary, DecimalToHexadecimal,
DecimalToOctal, DegreesToRadians, HexadecimalToBinary, HexadecimalToDecimal,
HexadecimalToOctal, OctalToDecimal, OctalToHexadecimal, RadiansToDegrees,
StringToBinary, StringToHexadecimal
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
.IP "\fBBinaryToDecimal\fR" 4
.IX Item "BinaryToDecimal"
.Vb 1
\&    $Decimal = BinaryToDecimal($Binary);
.Ve
.Sp
Converts a \fIBinary\fR string to \fBDecimal\fR string.
.IP "\fBBinaryToHexadecimal\fR" 4
.IX Item "BinaryToHexadecimal"
.Vb 1
\&    $Hexadecimal = BinaryToHexadecimal($Binary);
.Ve
.Sp
Converts a \fIBinary\fR string to \fBHexadecimal\fR string.
.IP "\fBDecimalToBinary\fR" 4
.IX Item "DecimalToBinary"
.Vb 1
\&    $Binary = DecimalToBinary($Decimal);
.Ve
.Sp
Converts a \fIDecimal\fR string to \fBBinary\fR string.
.IP "\fBDecimalToHexadecimal\fR" 4
.IX Item "DecimalToHexadecimal"
.Vb 1
\&    $Hexadecimal = DecimalToHexadecimal($Decimal);
.Ve
.Sp
Converts a \fIDecimal\fR string to \fBHexadecimal\fR string.
.IP "\fBDecimalToOctal\fR" 4
.IX Item "DecimalToOctal"
.Vb 1
\&    $Octal = DecimalToOctal($Decimal);
.Ve
.Sp
Converts a \fIDecimal\fR string to \fBOctal\fR string.
.IP "\fBDegreesToRadians\fR" 4
.IX Item "DegreesToRadians"
.Vb 1
\&    $Radians = DegreesToRadians($Degrees, [$DoNotWrapValue]);
.Ve
.Sp
Converts degrees to radians in the range from 0 to 2PI or to corresponding radians without
wrapping the converted value to 0 to 2PI. Default is to wrap the converted value.
.IP "\fBHexadecimalToBinary\fR" 4
.IX Item "HexadecimalToBinary"
.Vb 1
\&    $Binary = HexadecimalToBinary($Hexadecimal);
.Ve
.Sp
Converts a \fIHexadecimal\fR string to \fBBinary\fR string.
.IP "\fBHexadecimalToDecimal\fR" 4
.IX Item "HexadecimalToDecimal"
.Vb 1
\&    $Decimal = HexadecimalToDecimal($Hexadecimal);
.Ve
.Sp
Converts a \fIHexadecimal\fR string to \fBDecimal\fR string.
.IP "\fBHexadecimalToOctal\fR" 4
.IX Item "HexadecimalToOctal"
.Vb 1
\&    $Octal = HexadecimalToOctal($Hexadecimal);
.Ve
.Sp
Converts a \fIHexadecimal\fR string to \fBOctal\fR string.
.IP "\fBOctalToDecimal\fR" 4
.IX Item "OctalToDecimal"
.Vb 1
\&    $Decimal = OctalToDecimal($Octal);
.Ve
.Sp
Converts a \fIOctal\fR string to \fBDecimal\fR string.
.IP "\fBOctalToHexadecimal\fR" 4
.IX Item "OctalToHexadecimal"
.Vb 1
\&    $Hexadecimal = OctalToHexadecimal($Octal);
.Ve
.Sp
Converts a \fIOctal\fR string to \fBHexadecimal\fR string.
.IP "\fBRadiansToDegrees\fR" 4
.IX Item "RadiansToDegrees"
.Vb 1
\&    $Degrees = RadiansToDegrees($Radians, [$DoNotWrapValue]);
.Ve
.Sp
Converts radians to degrees in the range from 0 to 360 or to corresponding degrees without
wrapping the converted value to 0 to 360. Default is to wrap the converted value.
.IP "\fBStringToBinary\fR" 4
.IX Item "StringToBinary"
.Vb 1
\&    $BinaryString = StringToBinary($String, [$UseReverseBitOrder]);
.Ve
.Sp
Converts specified \fIString\fR into a \fBBinarystring\fR. Going from left to right, two ways of arranging
bits inside each byte are available: Most Significat Bits (\s-1MSB\s0) first or Least Significat Bits (\s-1LSB\s0) first.
Default is \s-1MSB\s0 corresponding to  descending bits order (PerlSpeak) inside each each packed byte
(Most singificat bits first).
.IP "\fBStringToHexadecimal\fR" 4
.IX Item "StringToHexadecimal"
.Vb 2
\&    $HexadecimalString = StringToHexadecimal($String,
\&                         [$UseReverseBitOrder]);
.Ve
.Sp
Convert string into a hexadecimal string. Two ways of arranging nybbles (pair of 4 bits in each
byte) are available: high nybbles first or low nybbles first. Default is \s-1MSB\s0 corresponding to high
nybbles (PerlSpeak) first. Low and high nybbles correspond to pair of a low and high four bits in a byte.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Constants.pm, MathUtil.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
