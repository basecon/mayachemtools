.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AtomTypes 1"
.TH AtomTypes 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AtomTypes \- AtomTypes class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use AtomTypes::AtomTypes;
.PP
use AtomTypes::AtomTypes qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBAtomTypes\fR base class used to derive all other atom types classes provides the following methods:
.PP
new, GetAtomType, GetAtomTypes, IsAtomTypesAssignmentSuccessful,
LoadAtomTypesData, SetAtomType, SetMolecule, SetType
.PP
\&\fBAtomTypes\fR class is  derived from \fBObjectProperty\fR base class which provides methods not
explicitly defined in \fBFingerprints\fR or \fBObjectProperty\fR classes using Perl's \s-1AUTOLOAD\s0 functionality.
These methods are generated on-the-fly for a specified object property:
.PP
.Vb 3
\&    Set<PropertyName>(<PropertyValue>);
\&    $PropertyValue = Get<PropertyName>();
\&    Delete<PropertyName>();
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 1
\&    $NewAtomTypes = new AtomTypes::AtomTypes(%NamesAndValues);
.Ve
.Sp
Using specified \fIAtomTypes\fR property names and values hash, \fBnew\fR method creates a new object
and returns a reference to newly created \fBAtomTypes\fR object. By default, following properties are
initialized:
.Sp
.Vb 3
\&    Molecule = \*(Aq\*(Aq;
\&    Type = \*(Aq\*(Aq;
\&    IgnoreHydrogens = 0;
.Ve
.IP "\fBGetAtomType\fR" 4
.IX Item "GetAtomType"
.Vb 1
\&    $AtomType = $AtomTypes\->GetAtomType($Atom);
.Ve
.Sp
Returns \fBAtomType\fR value string assigned to \fIAtom\fR by \fIAtomTypes\fR object.
.IP "\fBGetAtomTypes\fR" 4
.IX Item "GetAtomTypes"
.Vb 1
\&    %AtomTypes = $AtomTypes\->GetAtomTypes();
.Ve
.Sp
Returns atom types assigned to atoms by \fIAtomTypes\fR object as a hash
with atom \s-1ID\s0 and atom types as key and value pairs.
.IP "\fBIsAtomTypesAssignmentSuccessful\fR" 4
.IX Item "IsAtomTypesAssignmentSuccessful"
.Vb 1
\&    $Status = $AtomTypes\->IsAtomTypesAssignmentSuccessful();
.Ve
.Sp
Returns 1 or 0 based on whether atom types assignment was successfully performed.
For a successful atom types assignment, all atoms must have an atom type other
than a string \fINone\fR.
.IP "\fBLoadAtomTypesData\fR" 4
.IX Item "LoadAtomTypesData"
.Vb 2
\&    $AtomTypes\->LoadAtomTypesData($AtomTypesDataMapRef);
\&    AtomTypes::AtomTypes::LoadAtomTypesData($AtomTypesDataMapRef);
.Ve
.Sp
Loads atom types data from the specified \s-1CSV\s0 atom type file into the specified hash
reference.
.Sp
The lines starting with # are treated as comments and ignored. First line not starting with
# must contain column labels and the number of columns in all other data rows must match
the number of column labels.
.Sp
The first column is assumed to contain atom types; all other columns contain data
as indicated in their column labels.
.Sp
In order to avoid dependence of data access on the specified column labels, the
column data is loaded into hash with \fIDataColNum\fR and \fIAtomType\fR as hash keys;
however, the data for the first column which is treated as AtomTypes is also loaded
into an array with AtomTypes as hash key. The format of the data structure loaded
into a specified hash reference is:
.Sp
.Vb 7
\&    @{$AtomTypesDataMapRef\->{AtomTypes}} \- Array of all possible atom
\&                                           types for all atoms
\&    @{$AtomTypesDataMapRef\->{NonHydrogenAtomTypes}} \- Array of all possible
\&                                           atom types for non\-hydrogen atoms
\&    @{$AtomTypesDataMapRef\->{ColLabels}} \- Array of column labels
\&    %{$AtomTypesDataMapRef\->{DataCol<ColNum>}} \- Hash keys pair:
\&                                           <DataCol<ColNum>, AtomType>
.Ve
.Sp
\&\fIColNum\fR starts from 1. Column data for first column is not loaded into \fIDataColNum\fR,
\&\fIAtomType\fR hash keys pairs.
.IP "\fBSetAtomType\fR" 4
.IX Item "SetAtomType"
.Vb 1
\&    $AtomTypes\->SetAtomType($Atom, $AtomType);
.Ve
.Sp
Assigns specific \fIAtomType\fR to \fIAtom\fR and returns \fIAtomTypes\fR.
.IP "\fBSetMolecule\fR" 4
.IX Item "SetMolecule"
.Vb 1
\&    $AtomTypes\->SetMolecule($Molecule);
.Ve
.Sp
Sets \fIMolecule\fR object for \fIAtomTypes\fR and retuens \fIAtomTypes\fR.
.IP "\fBSetType\fR" 4
.IX Item "SetType"
.Vb 1
\&    $AtomTypes\->SetType($Type);
.Ve
.Sp
Sets \fIType\fR for \fIAtomTypes\fR object and retuens \fIAtomTypes\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AtomicInvariantsAtomTypes.pm, DREIDINGAtomTypes.pm, EStateAtomTypes.pm,
FunctionalClassAtomTypes.pm, MMFF94AtomTypes.pm, SLogPAtomTypes.pm,
SYBYLAtomTypes.pm, TPSAAtomTypes.pm, UFFAtomTypes.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
