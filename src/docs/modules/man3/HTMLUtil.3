.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTMLUtil 1"
.TH HTMLUtil 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTMLUtil
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use HTMLUtil;
.PP
use HTMLUtil qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBHTMLUtil\fR module provides the following functions:
.PP
InsertHTMLTags, SetupHTMLAlignmentBegin, SetupHTMLAlignmentEnd,
SetupHTMLButtonRef, SetupHTMLDivBegin, SetupHTMLDivEnd, SetupHTMLEmptyLines,
SetupHTMLHRef, SetupHTMLPageEnd, SetupHTMLPageHeader, SetupHTMLPageTitle,
SetupHTMLStyleSheetTags, SetupHTMLTableColumnEnd, SetupHTMLTableColumnHeader,
SetupHTMLTableEnd, SetupHTMLTableHeader, SetupHTMLTableRowDataValue,
SetupHTMLTableRowEnd, SetupHTMLTableRowHeader, SetupHTMLTableRowHeaderValue,
SetupJavaScriptCmds, SetupStrViewerAccelrysActiveX, SetupStrViewerChem3DActiveX,
SetupStrViewerChemDrawActiveX, SetupStrViewerChemDrawPlugIn,
SetupStrViewerChimePlugIn, SetupStrViewerJMEApplet, SetupStrViewerJSInitCmd,
SetupStrViewerJmolApplet, SetupStrViewerMarvinViewApplet
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
.IP "\fBInsertHTMLTags\fR" 4
.IX Item "InsertHTMLTags"
.Vb 1
\&    $NewTag = InsertHTMLTags($Tag, @TagsNameValue);
.Ve
.Sp
Inserts tag name and value pair from \fITagsNameValue\fR into a exisiting \fITag\fR as \fITagName = \*(L"TagValue\*(R"\fR
and returns \fBNewTag\fR string.
.IP "\fBSetupHTMLAlignmentBegin\fR" 4
.IX Item "SetupHTMLAlignmentBegin"
.Vb 1
\&    $AlignmentTag = SetupHTMLAlignmentBegin([$Alignment]);
.Ve
.Sp
Returns an alignment begin tag string. Possible \fIAlignment\fR values: \fIleft, center, or right\fR.
Default: \fIleft\fR.
.IP "\fBSetupHTMLAlignmentEnd\fR" 4
.IX Item "SetupHTMLAlignmentEnd"
.Vb 1
\&    $AlignmentTag = SetupHTMLAlignmentBegin([$Alignment]);
.Ve
.Sp
Returns an alignment end tag string.
.IP "\fBSetupHTMLButtonRef\fR" 4
.IX Item "SetupHTMLButtonRef"
.Vb 1
\&    $ButtonTag = SetupHTMLButtonRef($ButtonLabel, $FileName);
.Ve
.Sp
Returns a button tag string for associating \fBonClick\fR button event of a button with label \fIButtonLabel\fR
to open a file \fIFileName\fR.
.IP "\fBSetupHTMLDivBegin\fR" 4
.IX Item "SetupHTMLDivBegin"
.Vb 1
\&    $DivTag = SetupHTMLDivBegin($ID);
.Ve
.Sp
Returns a div begin tag string for div \fI\s-1ID\s0\fR.
.IP "\fBSetupHTMLDivEnd\fR" 4
.IX Item "SetupHTMLDivEnd"
.Vb 1
\&    $DivTag = SetupHTMLDivEnd();
.Ve
.Sp
Returns a div end tag string.
.IP "\fBSetupHTMLTableEnd\fR" 4
.IX Item "SetupHTMLTableEnd"
.Vb 1
\&    $TableEndTag = SetupHTMLTableEnd();
.Ve
.Sp
Returns a table end tag string.
.IP "\fBSetupHTMLEmptyLines\fR" 4
.IX Item "SetupHTMLEmptyLines"
.Vb 1
\&    $EmptyLineTags = SetupHTMLEmptyLines([$LineCount]);
.Ve
.Sp
Returns an empty lines tag string for empty \fILineCount\fR. Default line count: \fI1\fR.
.IP "\fBSetupHTMLPageHeader\fR" 4
.IX Item "SetupHTMLPageHeader"
.Vb 2
\&    $PageHeaderTag = SetupHTMLPageHeader($HeaderTitle, [$Stylesheet,
\&                     $JavaScript]);
.Ve
.Sp
Returns a page header tag string using \fIHeaderTitle\fR and using optionally specifed
values for \fIStylesheet\fR and \fIJavaScript\fR.
.IP "\fBSetupHTMLHRef\fR" 4
.IX Item "SetupHTMLHRef"
.Vb 1
\&    $HRef = SetupHTMLHRef($Label, $URL, [$Title]);
.Ve
.Sp
Returns a HRef tag string for setting up a \s-1URL\s0 with \fILabel\fR and \fI\s-1URL\s0\fR with optional \fITitle\fR.
.IP "\fBSetupHTMLPageEnd\fR" 4
.IX Item "SetupHTMLPageEnd"
.Vb 1
\&    $PageEndTag = SetupHTMLPageEnd([$FooterMsg]);
.Ve
.Sp
Returns a page end tag string conating optional \fIFooterMsg\fR.
.IP "\fBSetupHTMLPageTitle\fR" 4
.IX Item "SetupHTMLPageTitle"
.Vb 1
\&    $PageTitleTag = SetupHTMLPageTitle($Title, [$Alignment]);
.Ve
.Sp
Returns a page title tag string with optional alignment. Valid alignment value: \fIleft, center, right\fR
Default alignment: \fIcenter\fR.
.IP "\fBSetupHTMLStyleSheetTags\fR" 4
.IX Item "SetupHTMLStyleSheetTags"
.Vb 1
\&    $StyleSheetTags = SetupHTMLStyleSheetTags();
.Ve
.Sp
Returns a default style sheet tag string to be used for \s-1HTML\s0 files generated by MayaChemTools.
.IP "\fBSetupHTMLTableHeader\fR" 4
.IX Item "SetupHTMLTableHeader"
.Vb 2
\&    $TableHeaderTags = SetupHTMLTableHeader([$BorderWidth,
\&                       $CellPadding, $CellSpacing, $Width, $Height]);
.Ve
.Sp
Returns a table header tag string containing specified values for \fIBorderWidth, CellPadding, CellSpacing,
Width, and Height\fR. Default values: \fIBorderWidth = 1; CellPadding = 2; CellSpacing = 0; Width = NotUsed;
Height = NotUsed\fR.
.IP "<SetupHTMLTableEnd>" 4
.IX Item "<SetupHTMLTableEnd>"
.Vb 1
\&    $TableEndTag = SetupHTMLTableEnd();
.Ve
.Sp
Returns a table end tag string.
.IP "\fBSetupHTMLTableColumnHeader\fR" 4
.IX Item "SetupHTMLTableColumnHeader"
.Vb 1
\&    $ColumnHeaderTag = SetupHTMLTableColumnHeader([$BgColor, $Width]);
.Ve
.Sp
Returns a table column header tag string containing specified values for \fIBgColor, Width\fR. Default
values: \fIBgColor = NotUsed; Width = NotUsed\fR.
.IP "\fBSetupHTMLTableColumnEnd\fR" 4
.IX Item "SetupHTMLTableColumnEnd"
.Vb 1
\&    $ColumnEndTag = SetupHTMLTableColumnEnd();
.Ve
.Sp
Returns a table column end tag string.
.IP "\fBSetupHTMLTableRowHeader\fR" 4
.IX Item "SetupHTMLTableRowHeader"
.Vb 2
\&    $RowHeaderTag = SetupHTMLTableRowHeader([$HAlignment, $BgColor,
\&                    $VAlignment]);
.Ve
.Sp
Returns a table row header tag string containing specified values for \fIHAlignment, BgColor, and VAlignment\fR.
Default values: \fIHAlignment = center; \f(CI$BgColor\fI = NotUsed; \f(CI$VAlignment\fI = top\fR.
.IP "\fBSetupHTMLTableRowEnd\fR" 4
.IX Item "SetupHTMLTableRowEnd"
.Vb 1
\&    $RowEndTag = SetupHTMLTableRowEnd();
.Ve
.Sp
Returns a table row end tag string.
.IP "\fBSetupHTMLTableRowHeaderValue\fR" 4
.IX Item "SetupHTMLTableRowHeaderValue"
.Vb 1
\&    $HeaderValueTag = SetupHTMLTableRowHeaderValue([$Value]);
.Ve
.Sp
Returns a table header row tag string using specifed \fIValue\fR. Default value: \fIEmptySpace\fR.
.IP "\fBSetupHTMLTableRowDataValue\fR" 4
.IX Item "SetupHTMLTableRowDataValue"
.Vb 2
\&    $RowValueTag = SetupHTMLTableRowDataValue([$Value, $BgColor,
\&                   $FontColor, $FontBold]);
.Ve
.Sp
Returns a table row column value tag string using specified values for \fIValue, BgColor,
FontColor, and FontBold\fR. Default values: \fIValue = EmptySpace; BgColor = NotUsed;
FontColor = NotUsed; \f(CI$FontBold\fI = NotUsed\fR.
.IP "\fBSetupJavaScriptCmds\fR" 4
.IX Item "SetupJavaScriptCmds"
.Vb 1
\&   $JSTag = SetupJavaScriptCmds(@JSCmdList);
.Ve
.Sp
Returns a Java script tag string using java script commands specified in \fIJSCmdList\fR.
.IP "\fBSetupStrViewerJSInitCmd\fR" 4
.IX Item "SetupStrViewerJSInitCmd"
.Vb 1
\&   $JSTag = SetupStrViewerJSInitCmd($StrViewerType, $CodeBase);
.Ve
.Sp
Returns a Java script command tag string for intializing structure viewers with specified \fICodeBase\fR
location for viewers to be invoked as Java Applets. Supported values for \fIStrViewerType\fR: \fIJmol,
ChemDrawPlugIn, ChemDrawActiveX, Chem3DActiveX\fR.
.IP "\fBSetupStrViewerJMEApplet\fR" 4
.IX Item "SetupStrViewerJMEApplet"
.Vb 2
\&    $JMEAppletTag = SetupStrViewerJMEApplet($MolString, $CodeBase,
\&                    [{param => "value"}]);
.Ve
.Sp
Returns a \s-1JME\s0 tag string for displaying molecule using \fIMolString\fR along with valid optional applet
parameters specified as name and value pairs. Defaul \s-1JME\s0 parameter values: \fIname = \s-1JME\s0; id = \s-1JME\s0;
width = 250; height = 170\fR.
.IP "\fBSetupStrViewerJmolApplet\fR" 4
.IX Item "SetupStrViewerJmolApplet"
.Vb 2
\&    $JmolAppletTag = SetupStrViewerJmolApplet($MolString, $CodeBase,
\&                     [{param => "value"}]);
.Ve
.Sp
Returns a JMol tag string for displaying molecule using \fIMolString\fR along with valid optional applet
parameters specified as name and value pairs. Defaul JMol parameter values: \fIname = Jmol; id = Jmol;
width = 250; height = 170; progressbar = true; progresscolor = 0000ff; bgcolor = 000000; JMolScript =
select *; set frank off; wireframe on; spacefill off\fR.
.IP "\fBSetupStrViewerMarvinViewApplet\fR" 4
.IX Item "SetupStrViewerMarvinViewApplet"
.Vb 2
\&    $MarvinAppletTag = SetupStrViewerMarvinViewApplet($MolString,
\&                       $CodeBase, [{param => "value"}]);
.Ve
.Sp
Returns a MarvinView tag string for displaying molecule using \fIMolString\fR along with valid optional applet
parameters specified as name and value pairs. Defaul MarvinView parameter values: \fIname = MView; id = MView;
width = 250; height = 170; navmode = zoom\fR.
.IP "\fBSetupStrViewerChimePlugIn\fR" 4
.IX Item "SetupStrViewerChimePlugIn"
.Vb 2
\&    $ChimePlugInTag = SetupStrViewerChimePlugIn($MolFile,
\&                      [{param => "value"}]);
.Ve
.Sp
Returns a \s-1MDL\s0 Chime tag string for displaying molecule using \fIMolFile\fR along with valid optional
parameters specified as name and value pairs. Defaul Chime parameter values: \fIwidth = 250; height = 170;
display2d = true\fR.
.IP "\fBSetupStrViewerChem3DActiveX\fR" 4
.IX Item "SetupStrViewerChem3DActiveX"
.Vb 2
\&    $ChemDraw3DActiveXTags = SetupStrViewerChemDrawActiveX($MolFile,
\&                             [{param => "value"}]);
.Ve
.Sp
Returns a CambridgeSoft Chem3D tag string for displaying molecule using \fIMolFile\fR along with valid optional
parameters specified as name and value pairs. Defaul Chime parameter values: \fIwidth = 250; height = 170;
displaytype = BallAndStick; rotationbars = false; moviecontroller = false\fR.
.IP "\fBSetupStrViewerChemDrawActiveX\fR" 4
.IX Item "SetupStrViewerChemDrawActiveX"
.Vb 2
\&    $ChemDrawActiveXTags = SetupStrViewerChem3DActiveX($MolFile,
\&                           [{param => "value"}]);
.Ve
.Sp
Returns a CambridgeSoft ChemDraw ActiveX tag string for displaying molecule using \fIMolFile\fR along with valid optional
parameters specified as name and value pairs. Defaul ChemDraw ActiveX parameter values: \fIwidth = 250; height = 170;
ViewOnly = 1; ShrinkToFit = 1; ShowToolsWhenVisible = 1\fR.
.IP "\fBSetupStrViewerChemDrawPlugIn\fR" 4
.IX Item "SetupStrViewerChemDrawPlugIn"
.Vb 2
\&    $ChemDrawPlugInTag = SetupStrViewerChemDrawPlugIn($MolFile,
\&                         [{param => "value"}]);
.Ve
.Sp
Returns a CambridgeSoft ChemDraw PlugIn tag string for displaying molecule using \fIMolFile\fR along with valid optional
parameters specified as name and value pairs. Defaul ChemDraw PlugIn parameter values: \fIwidth = 250; height = 170;
ViewOnly = 1; ShrinkToFit = 1; ShowToolsWhenVisible = 1\fR.
.IP "\fBSetupStrViewerAccelrysActiveX\fR" 4
.IX Item "SetupStrViewerAccelrysActiveX"
.Vb 2
\&    $AccelrysActiveXTags = SetupStrViewerAccelrysActiveX($MolFile,
\&                           [{param => "value"}]);
.Ve
.Sp
Returns a Accelrys ViewerActiveX tag string for displaying molecule using \fIMolFile\fR along with valid optional
parameters specified as name and value pairs. Defaul ViewerActiveX parameter values: \fIwidth = 250; height = 170;
Convert2Dto3D = 0; Mouse = 4\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
