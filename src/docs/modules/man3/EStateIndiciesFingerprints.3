.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "EStateIndiciesFingerprints 1"
.TH EStateIndiciesFingerprints 1 "2020-08-27" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
EStateIndiciesFingerprints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Fingerprints::EStateIndiciesFingerprints;
.PP
use Fingerprints::EStateIndiciesFingerprints qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBEStateIndiciesFingerprints\fR [ Ref 75\-78 ] class provides the following methods:
.PP
new, GenerateFingerprints, GetDescription, SetEStateAtomTypesSetToUse,
SetValuesPrecision, StringifyEStateIndiciesFingerprints
.PP
\&\fBEStateIndiciesFingerprints\fR is derived from \fBFingerprints\fR class which in turn
is  derived from \fBObjectProperty\fR base class that provides methods not explicitly defined
in \fBAtomNeighborhoodsFingerprints\fR, \fBFingerprints\fR or \fBObjectProperty\fR classes using Perl's
\&\s-1AUTOLOAD\s0 functionality. These methods are generated on-the-fly for a specified object property:
.PP
.Vb 3
\&    Set<PropertyName>(<PropertyValue>);
\&    $PropertyValue = Get<PropertyName>();
\&    Delete<PropertyName>();
.Ve
.PP
E\-state atom types are assigned to all non-hydrogen atoms in a molecule using module
AtomTypes::EStateAtomTypes.pm and E\-state values are calculated using module
AtomicDescriptors::EStateValues.pm. Using E\-state atom types and E\-state values,
\&\fBEStateIndiciesFingerprints\fR constituting sum of E\-state values for E\-sate atom types
are generated.
.PP
Two types of E\-state atom types set size are allowed:
.PP
.Vb 4
\&    ArbitrarySize \- Corresponds to only E\-state atom types detected
\&                    in molecule
\&    FixedSize \- Corresponds to fixed number of E\-state atom types previously
\&                defined
.Ve
.PP
Module AtomTypes::EStateAtomTypes.pm, used to assign E\-state atom types to
non-hydrogen atoms in the molecule, is able to assign atom types to any valid
atom group. However, for \fIFixedSize\fR value of \fBEStateAtomTypesSetToUse\fR, only a
fixed set of E\-state atom types corresponding to specific atom groups [ Appendix \s-1III\s0 in
Ref 77 ] are used for fingerprints.
.PP
The fixed size E\-state atom type set size used during generation of fingerprints contains
87 E\-state non-hydrogen atom types in EStateAtomTypes.csv data file distributed with
MayaChemTools.
.PP
Combination of Type and EStateAtomTypesSetToUse allow generation of 2 different types of
E\-state indicies fingerprints:
.PP
.Vb 1
\&    Type                        EStateAtomTypesSetToUse
\&
\&    EStateIndicies              ArbitrarySize      [ default fingerprints ]
\&    EStateIndicies              FixedSize
.Ve
.PP
The current release of MayaChemTools generates the following types of E\-state
fingerprints vector strings:
.PP
.Vb 4
\&    FingerprintsVector;EStateIndicies:ArbitrarySize;11;NumericalValues;IDs
\&    AndValuesString;SaaCH SaasC SaasN SdO SdssC SsCH3 SsF SsOH SssCH2 SssN
\&    H SsssCH;24.778 4.387 1.993 25.023 \-1.435 3.975 14.006 29.759 \-0.073 3
\&    .024 \-2.270
\&
\&    FingerprintsVector;EStateIndicies:FixedSize;87;OrderedNumericalValues;
\&    ValuesString;0 0 0 0 0 0 0 3.975 0 \-0.073 0 0 24.778 \-2.270 0 0 \-1.435
\&    4.387 0 0 0 0 0 0 3.024 0 0 0 0 0 0 0 1.993 0 29.759 25.023 0 0 0 0 1
\&    4.006 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
\&    0 0 0 0 0 0 0 0 0 0 0 0 0 0
\&
\&    FingerprintsVector;EStateIndicies:FixedSize;87;OrderedNumericalValues;
\&    IDsAndValuesString;SsLi SssBe SssssBem SsBH2 SssBH SsssB SssssBm SsCH3
\&    SdCH2 SssCH2 StCH SdsCH SaaCH SsssCH SddC StsC SdssC SaasC SaaaC Sssss
\&    C SsNH3p SsNH2 SssNH2p SdNH SssNH SaaNH StN SsssNHp SdsN SaaN SsssN Sd
\&    0 0 0 0 0 0 0 3.975 0 \-0.073 0 0 24.778 \-2.270 0 0 \-1.435 4.387 0 0 0
\&    0 0 0 3.024 0 0 0 0 0 0 0 1.993 0 29.759 25.023 0 0 0 0 14.006 0 0 0 0
\&    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.Vb 1
\&    $EStateIndiciesFingerprints = new EStateIndiciesFingerprints(%NamesAndValues);
.Ve
.Sp
Using specified \fIEStateIndiciesFingerprints\fR property names and values hash, \fBnew\fR method creates a new object
and returns a reference to newly created \fBPathLengthFingerprints\fR object. By default, the
following properties are initialized:
.Sp
.Vb 4
\&    Molecule = \*(Aq\*(Aq;
\&    Type = \*(AqEStateIndicies\*(Aq
\&    EStateAtomTypesSetToUse = \*(AqArbitrarySize\*(Aq
\&    ValuesPrecision = 3
.Ve
.Sp
Examples:
.Sp
.Vb 4
\&    $EStateIndiciesFingerprints = new AtomTypesFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqEStateAtomTypesSetToUse\*(Aq =>
\&                                              \*(AqArbitrarySize\*(Aq);
\&
\&    $EStateIndiciesFingerprints = new AtomTypesFingerprints(
\&                              \*(AqMolecule\*(Aq => $Molecule,
\&                              \*(AqEStateAtomTypesSetToUse\*(Aq =>
\&                                              \*(AqFixedSize\*(Aq);
\&
\&    $EStateIndiciesFingerprints\->GenerateFingerprints();
\&    print "$EStateIndiciesFingerprints\en";
.Ve
.IP "\fBGenerateFingerprints\fR" 4
.IX Item "GenerateFingerprints"
.Vb 2
\&    $EStateIndiciesFingerprints = $EStateIndiciesFingerprints\->
\&                                  GenerateEStateIndiciesFingerprints();
.Ve
.Sp
Generates EState keys fingerprints and returns \fIEStateIndiciesFingerprints\fR.
.IP "\fBGetDescription\fR" 4
.IX Item "GetDescription"
.Vb 1
\&    $Description = $EStateIndiciesFingerprints\->GetDescription();
.Ve
.Sp
Returns a string containing description of EState keys fingerprints.
.IP "\fBSetEStateAtomTypesSetToUse\fR" 4
.IX Item "SetEStateAtomTypesSetToUse"
.Vb 1
\&    $EStateIndiciesFingerprints\->SetEStateAtomTypesSetToUse($Value);
.Ve
.Sp
Sets \fIValue\fR of \fIEStateAtomTypesSetToUse\fR and returns \fIEStateIndiciesFingerprints\fR.
Possible values: \fIArbitrarySize or FixedSize\fR. Default value: \fIArbitrarySize\fR.
.IP "\fBSetValuesPrecision\fR" 4
.IX Item "SetValuesPrecision"
.Vb 1
\&    $EStateIndiciesFingerprints\->SetValuesPrecision($Precision);
.Ve
.Sp
Sets precesion of E\-state values to use during generation of E\-state indices fingerprints
and returns \fIEStateIndiciesFingerprints\fR. Possible values: \fIPositive integers\fR.
Default value: \fI3\fR.
.IP "\fBStringifyEStateIndiciesFingerprints\fR" 4
.IX Item "StringifyEStateIndiciesFingerprints"
.Vb 1
\&    $String = $EStateIndiciesFingerprints\->StringifyEStateIndiciesFingerprints();
.Ve
.Sp
Returns a string containing information about \fIEStateIndiciesFingerprints\fR object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Fingerprints.pm, FingerprintsStringUtil.pm, AtomNeighborhoodsFingerprints.pm, AtomTypesFingerprints.pm,
ExtendedConnectivityFingerprints.pm, MACCSKeys.pm, PathLengthFingerprints.pm,
TopologicalAtomPairsFingerprints.pm, TopologicalAtomTripletsFingerprints.pm,
TopologicalAtomTorsionsFingerprints.pm, TopologicalPharmacophoreAtomPairsFingerprints.pm,
TopologicalPharmacophoreAtomTripletsFingerprints.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
